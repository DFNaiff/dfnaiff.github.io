{"version":3,"file":"static/js/main.f4493f07.js","mappings":"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","sources":["src/shared/types/actions.ts","src/config/env.ts","src/services/socket.service.ts","src/theme/ThemeContext.tsx","src/screens/LoginScreen.tsx","src/screens/HomeScreen.tsx","src/components/GameManagement.tsx","src/components/Card.tsx","src/components/GamePlay.tsx","src/components/GameEnd.tsx","src/shared/types/game-state.ts","src/components/ConfirmDialog.tsx","src/components/LeaveGameButton.tsx","src/screens/GameScreen.tsx","src/screens/GameCreationScreen.tsx","src/screens/JoinGameScreen.tsx","src/components/ThemeToggleButton.tsx","App.tsx","index.ts","webpack://web/./src/components/Card.web.css?a5d3","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { AvailableGames } from './game-state';\n\n// Authentication Actions\nexport enum AuthActions {\n    LOGIN = 'auth/login',\n    LOGOUT = 'auth/logout',\n    HEARTBEAT = 'auth:heartbeat'\n}\n\nexport type LoginPayload = {\n    username: string;\n}\n\nexport type LoginResponse = {\n    success: boolean;\n    error?: string;\n    userId?: string;\n}\n\n// Main Service Actions\nexport enum MainActions {\n    CREATE_GAME = 'main/createGame',\n    JOIN_GAME = 'main/joinGame',\n    LEAVE_GAME = 'main/leaveGame'\n}\n\nexport type CreateGamePayload = {\n    gameType: AvailableGames;\n}\n\nexport type JoinGamePayload = {\n    gameId: string;\n}\n\n// Game Administrative Actions\nexport enum GameAdminActions {\n    ADD_AGENT = 'game/admin/addAgent',\n    START_GAME = 'game/admin/startGame',\n    KICK_PLAYER = 'game/admin/kickPlayer',\n    LEAVE_GAME = 'game/admin/leaveGame'\n}\n\nexport type KickPlayerPayload = {\n    playerId: string;\n}\n\n// Game Play Actions\nexport enum GamePlayActions {\n    PLAY_CARD = 'game/play/playCard',\n    EXTRA_ACTION = 'game/play/extraAction'\n}\n\nexport interface PlayCardPayload {\n    cardIndex: number;\n    gameId: string;\n}\n\nexport interface ExtraActionPayload {\n    actionType: string;\n    actionData: Record<string, unknown>;\n    gameId: string;\n}\n\n// Server Broadcast Types\nexport enum BroadcastTypes {\n    STATE = 'broadcast/state',\n    GAME_ERROR = 'broadcast/gameError',\n    GAME_ENDED = 'broadcast/gameEnded',\n    GAME_DELETED = 'broadcast/gameDeleted',\n    NOT_IN_GAME = 'broadcast/notInGame'\n}\n\nexport interface GameEndedPayload {\n    gameId: string;\n    winner?: string;\n}\n\nexport interface GameErrorPayload {\n    gameId: string;\n    error: string;\n}","const ENV = {\n    development: {\n      socketUrl: 'http://localhost:3000',\n      socketPath: '/socket.io/',\n    },\n    production: {\n      socketUrl: 'https://suecatatau-server-production.up.railway.app',\n      socketPath: '/socket.io/',\n    }\n  };\n  \n  // In development, the app can connect to your local server\n  // In production, it will connect to the Railway server\n  const getEnvironment = () => {\n    if (__DEV__) {\n      return ENV.development;\n    }\n    return ENV.production;\n  };\n  \n  export default getEnvironment();","import { io, Socket } from 'socket.io-client';\nimport { AvailableGames } from '../shared/types/game-state';\nimport { AuthActions, GamePlayActions, GameAdminActions, MainActions } from '../shared/types/actions';\nimport { BroadcastTypes } from '../shared/types/actions';\nimport { GameBroadcastState } from '../shared/types/game-state';\nimport config from '../config/env';\n\ninterface LoginResponse {\n    success: boolean;\n    userId?: string;\n    error?: string;\n}\n\ninterface GameResponse {\n    success: boolean;\n    gameId?: string;\n    error?: string;\n}\n\nexport class SocketService {\n    private socket: Socket;\n    private static instance: SocketService;\n    private currentUser: { username: string; userId: string } | null = null;\n    private reconnectAttempts: number = 0;\n    private readonly MAX_RECONNECT_ATTEMPTS = 5;\n    private heartbeatInterval: NodeJS.Timeout | null = null;\n    private readonly HEARTBEAT_INTERVAL = 60 * 1000; // Send heartbeat every minute\n    private eventHandlers: Map<string, Function[]> = new Map();\n\n    private constructor() {\n        this.socket = io(config.socketUrl, {\n            transports: ['websocket', 'polling'],\n            path: config.socketPath,\n            autoConnect: false,\n            reconnection: true,\n            reconnectionAttempts: this.MAX_RECONNECT_ATTEMPTS,\n            reconnectionDelay: 1000,\n            timeout: 10000\n        });\n\n        console.log('SocketService constructor called, connecting to:', config.socketUrl);\n        \n        this.setupSocketListeners();\n    }\n\n    private setupSocketListeners() {\n        this.socket.on('connect', () => {\n            console.log('Socket CONNECTED, ID:', this.socket.id);\n            this.reconnectAttempts = 0;\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Socket DISCONNECTED, was ID:', this.socket.id, 'Reason:', reason);\n            if (reason === 'io server disconnect') {\n                // the disconnection was initiated by the server, reconnect manually\n                this.socket.connect();\n            }\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('Connection error:', error);\n            this.reconnectAttempts++;\n            \n            if (this.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {\n                console.error('Max reconnection attempts reached');\n                this.socket.disconnect();\n            }\n        });\n\n        this.socket.on('reconnect', (attemptNumber) => {\n            console.log('Socket RECONNECTED, new ID:', this.socket.id, 'Attempt:', attemptNumber);\n        });\n\n        this.socket.on('reconnect_attempt', (attemptNumber) => {\n            console.log('Socket RECONNECTING, attempt:', attemptNumber);\n        });\n\n        this.socket.on(BroadcastTypes.STATE, (state: GameBroadcastState) => {\n            console.log('Received state update for socket ID:', this.socket.id);\n        });\n\n        this.socket.on(BroadcastTypes.GAME_DELETED, (data: { gameId: string }) => {\n            console.log('Received game deleted event for socket ID:', this.socket.id, 'Game ID:', data.gameId);\n        });\n\n        this.socket.on(BroadcastTypes.NOT_IN_GAME, (data: { gameId: string, playerId: string }) => {\n            console.log('Received not in game event for socket ID:', this.socket.id, 'Game ID:', data.gameId, 'Player ID:', data.playerId);\n            \n            this.triggerEvent(BroadcastTypes.NOT_IN_GAME, data);\n        });\n\n        this.socket.on('forceDisconnect', (data: { reason: string }) => {\n            console.log('[Client Force Disconnect]', {\n                socketId: this.socket.id,\n                userId: this.currentUser?.userId,\n                reason: data.reason,\n                timestamp: new Date().toISOString()\n            });\n            this.clearHeartbeat();\n            this.clearCurrentUser();\n            this.socket.disconnect();\n        });\n    }\n\n    public static getInstance(): SocketService {\n        if (!SocketService.instance) {\n            SocketService.instance = new SocketService();\n        }\n        return SocketService.instance;\n    }\n\n    public connect(playerName: string): Promise<void> {\n        console.log('Connect called, current socket ID:', this.socket.id);\n        return new Promise((resolve, reject) => {\n            if (this.socket.connected) {\n                console.log('Socket already connected with ID:', this.socket.id);\n                resolve();\n                return;\n            }\n            \n            this.socket.connect();\n            this.socket.on('connect', () => {\n                console.log('Connected to server with ID:', this.socket.id);\n                resolve();\n            });\n            \n            this.socket.on('connect_error', (error) => {\n                reject(error);\n            });\n        });\n    }\n\n    public createGame(playerName: string, gameType: AvailableGames): Promise<GameResponse> {\n        return new Promise<GameResponse>((resolve, reject) => {\n            console.log('Emitting createGame event with playerName:', playerName,\n                'and gameType:', gameType);\n\n            const timeout = setTimeout(() => {\n                reject(new Error('createGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.CREATE_GAME, { playerName, gameType }, (response: GameResponse) => {\n                console.log('Received response from createGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public joinGame(gameId: string, playerName: string): Promise<{ success: boolean }> {\n        return new Promise<{ success: boolean }>((resolve, reject) => {\n            console.log('Emitting joinGame event with gameId:', gameId, 'playerName:', playerName);\n\n            // Add timeout to detect if callback never happens\n            const timeout = setTimeout(() => {\n                reject(new Error('joinGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.JOIN_GAME, { gameId, playerName }, (response: { success: boolean }) => {\n                console.log('Received response from joinGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            // Add error handler\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public addAgent(gameId: string): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GameAdminActions.ADD_AGENT, { gameId }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public startGame(gameId: string): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GameAdminActions.START_GAME, { gameId }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public playCard(gameId: string, cardIndex: number): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GamePlayActions.PLAY_CARD, { gameId, cardIndex }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public onGameState(callback: (state: GameBroadcastState) => void) {\n\n        console.log('Setting up game state listener for socket:', {\n            socketId: this.socket.id,\n            userId: this.currentUser?.userId,\n            connected: this.socket.connected\n        });\n    \n        this.socket.onAny((eventName, ...args) => {\n            console.log('Received event:', eventName, 'Socket ID:', this.socket.id, 'Args:', args);\n        });\n    \n        this.socket.on(BroadcastTypes.STATE, (state: GameBroadcastState) => {\n            console.log('Received game state for socket:', {\n                socketId: this.socket.id,\n                userId: this.currentUser?.userId,\n                state\n            });\n            callback(state);\n        });    \n\n        this.socket.on('connect', () => {\n            console.log('Socket connected:', this.socket.id);\n        });\n\n        this.socket.on('disconnect', () => {\n            console.log('Socket disconnected');\n        });\n    }\n\n    public disconnect() {\n        this.socket.disconnect();\n    }\n\n    public setupHeartbeat() {\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n            console.log('[Client Heartbeat] Cleared existing heartbeat interval');\n        }\n\n        console.log('[Client Heartbeat] Setting up new heartbeat interval');\n        this.heartbeatInterval = setInterval(() => {\n            if (this.socket.connected && this.currentUser) {\n                console.log('[Client Heartbeat] Sending heartbeat:', {\n                    socketId: this.socket.id,\n                    userId: this.currentUser.userId,\n                    timestamp: new Date().toISOString()\n                });\n\n                this.socket.emit(AuthActions.HEARTBEAT, {}, (response: { success: boolean }) => {\n                    console.log('[Client Heartbeat] Received response:', {\n                        socketId: this.socket.id,\n                        userId: this.currentUser?.userId,\n                        success: response.success,\n                        timestamp: new Date().toISOString()\n                    });\n\n                    if (!response.success) {\n                        console.warn('[Client Heartbeat] Failed, initiating logout');\n                        this.logout();\n                    }\n                });\n            } else {\n                console.log('[Client Heartbeat] Skipped: Socket disconnected or no user', {\n                    connected: this.socket.connected,\n                    hasUser: !!this.currentUser\n                });\n            }\n        }, this.HEARTBEAT_INTERVAL);\n    }\n\n    private clearHeartbeat() {\n        if (this.heartbeatInterval) {\n            console.log('[Client Heartbeat] Clearing heartbeat interval');\n            clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = null;\n        }\n    }\n\n    public login(username: string): Promise<LoginResponse> {\n        return new Promise((resolve) => {\n            this.socket.connect();\n            console.log('Logging in with socket ID:', this.socket.id);\n            \n            this.socket.emit(AuthActions.LOGIN, { username }, (response: LoginResponse) => {\n                console.log('Login response received for socket:', {\n                    socketId: this.socket.id,\n                    response\n                });\n                if (response.success) {\n                    this.setCurrentUser(username, response.userId!);\n                    this.setupHeartbeat(); // Start heartbeat after successful login\n                } else {\n                    this.socket.disconnect();\n                }\n                resolve(response);\n            });\n        });\n    }\n\n    public extraAction(gameId: string, actionType: string, actionData: any): Promise<GameResponse> {\n        return new Promise((resolve) => {\n            this.socket.emit(GamePlayActions.EXTRA_ACTION, { \n                gameId, \n                actionType, \n                actionData \n            }, (response: GameResponse) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public setCurrentUser(username: string, userId: string) {\n        this.currentUser = { username, userId };\n    }\n\n    public getCurrentUser() {\n        return this.currentUser;\n    }\n\n    public clearCurrentUser() {\n        this.currentUser = null;\n    }\n\n    public async logout(): Promise<void> {\n        this.clearHeartbeat(); // Stop heartbeat before logout\n        if (this.currentUser) {\n            await new Promise<void>((resolve) => {\n                this.socket.emit(AuthActions.LOGOUT, {}, () => {\n                    this.clearCurrentUser();\n                    this.socket.disconnect();\n                    resolve();\n                });\n            });\n        }\n    }\n\n    public leaveGame(gameId: string): Promise<{ success: boolean }> {\n        return new Promise((resolve, reject) => {\n            console.log('Emitting leaveGame event with gameId:', gameId);\n\n            const timeout = setTimeout(() => {\n                reject(new Error('leaveGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.LEAVE_GAME, { gameId }, (response: { success: boolean }) => {\n                console.log('Received response from leaveGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public kickPlayer(gameId: string, playerId: string): void {\n        this.socket.emit(GameAdminActions.KICK_PLAYER, { gameId, playerId });\n    }\n\n    public on(event: string, callback: Function) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event)?.push(callback);\n    }\n    \n    public off(event: string, callback: Function) {\n        if (!this.eventHandlers.has(event)) return;\n        \n        const handlers = this.eventHandlers.get(event) || [];\n        const index = handlers.indexOf(callback);\n        if (index !== -1) {\n            handlers.splice(index, 1);\n        }\n    }\n    \n    private triggerEvent(event: string, ...args: any[]) {\n        const handlers = this.eventHandlers.get(event) || [];\n        handlers.forEach(handler => handler(...args));\n    }\n}\n","// Theme context with provider for theme switching\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\nexport type ThemeType = 'light' | 'dark';\n\n// Theme color interface containing all colors used in the app\nexport interface ThemeColors {\n  // Card colors\n  cardBackground: string;\n  cardBorder: string;\n  cardTextBlack: string;\n  cardTextRed: string;\n  \n  // Dialog colors\n  dialogOverlay: string;\n  dialogBackground: string;\n  dialogCancelButton: string;\n  dialogConfirmButton: string;\n  dialogButtonText: string;\n  \n  // Button colors\n  leaveButtonBackground: string;\n  leaveButtonText: string;\n  \n  // Game UI colors\n  playerInfoBackground: string;\n  playerInfoBorder: string;\n  currentPlayerText: string;\n  playerStatsText: string;\n  trumpInfoBackground: string;\n  trumpInfoBorder: string;\n  teamScoreCardBackground: string;\n  teamScoreCardBorder: string;\n  \n  // Input & form colors\n  inputBorder: string;\n  inputBackground: string;\n  \n  // Game table colors\n  tableFelt: string;\n  tableEdge: string;\n  \n  // Status text colors\n  statusText: string;\n  subtitleText: string;\n  \n  // Team score colors\n  playerTeamBackground: string;\n  playerTeamBorder: string;\n  teamScoreText: string;\n  playerTeamScoreText: string;\n  \n  // Home screen colors\n  welcomeText: string;\n  logoutButton: string;\n  primaryButton: string;\n  primaryButtonText: string;\n  \n  // App background colors\n  appBackground: string;\n  containerBackground: string;\n  pickerBackground: string;\n  titleText: string;\n}\n\n// Light theme (default - exactly matches current hardcoded colors)\nexport const lightColors: ThemeColors = {\n  // Card colors\n  cardBackground: 'white',\n  cardBorder: '#ddd',\n  cardTextBlack: 'black',\n  cardTextRed: 'red',\n  \n  // Dialog colors\n  dialogOverlay: 'rgba(0, 0, 0, 0.5)',\n  dialogBackground: 'white',\n  dialogCancelButton: '#666',\n  dialogConfirmButton: '#d32f2f',\n  dialogButtonText: 'white',\n  \n  // Button colors\n  leaveButtonBackground: '#d32f2f',\n  leaveButtonText: 'white',\n  \n  // Game UI colors\n  playerInfoBackground: 'rgba(255, 255, 255, 0.9)',\n  playerInfoBorder: '#ccc',\n  currentPlayerText: '#4CAF50',\n  playerStatsText: '#666',\n  trumpInfoBackground: 'rgba(255, 255, 255, 0.9)',\n  trumpInfoBorder: '#ccc',\n  teamScoreCardBackground: 'rgba(255, 255, 255, 0.6)',\n  teamScoreCardBorder: 'rgba(0, 0, 0, 0.1)',\n  \n  // Input & form colors\n  inputBorder: '#ddd',\n  inputBackground: 'white',\n  \n  // Game table colors\n  tableFelt: '#1B5E20',\n  tableEdge: '#4A3211',\n  \n  // Status text colors\n  statusText: '#000000',\n  subtitleText: '#000000',\n  \n  // Team score colors\n  playerTeamBackground: 'rgba(220, 242, 220, 0.7)',\n  playerTeamBorder: 'rgba(76, 175, 80, 0.3)',\n  teamScoreText: '#333',\n  playerTeamScoreText: '#1B5E20',\n  \n  // Home screen colors\n  welcomeText: '#000000',\n  logoutButton: '#d32f2f',\n  primaryButton: '#2196f3',\n  primaryButtonText: 'white',\n  \n  // App background colors\n  appBackground: '#e8f5e9', // Light mint green background\n  containerBackground: '#e8f5e9', // Very light sage green\n  pickerBackground: '#e0f2f1', // Subtle teal tint for picker\n  titleText: '#000000', // Keeping text black as requested\n};\n\n// Dark theme colors (for future use)\nexport const darkColors: ThemeColors = {\n  // Card colors\n  cardBackground: '#2c2c2c',\n  cardBorder: '#444',\n  cardTextBlack: '#e0e0e0',\n  cardTextRed: '#ff6b6b',\n  \n  // Dialog colors\n  dialogOverlay: 'rgba(0, 0, 0, 0.7)',\n  dialogBackground: '#2c2c2c',\n  dialogCancelButton: '#555',\n  dialogConfirmButton: '#b71c1c',\n  dialogButtonText: '#e0e0e0',\n  \n  // Button colors\n  leaveButtonBackground: '#b71c1c',\n  leaveButtonText: '#e0e0e0',\n  \n  // Game UI colors\n  playerInfoBackground: 'rgba(40, 40, 40, 0.9)',\n  playerInfoBorder: '#444',\n  currentPlayerText: '#66bb6a',\n  playerStatsText: '#aaa',\n  trumpInfoBackground: 'rgba(40, 40, 40, 0.9)',\n  trumpInfoBorder: '#444',\n  teamScoreCardBackground: 'rgba(40, 40, 40, 0.6)',\n  teamScoreCardBorder: 'rgba(255, 255, 255, 0.1)',\n  \n  // Input & form colors\n  inputBorder: '#444',\n  inputBackground: '#222',\n  \n  // Game table colors\n  tableFelt: '#0c3912',\n  tableEdge: '#2A1901',\n  \n  // Status text colors\n  statusText: '#e0e0e0',\n  subtitleText: '#e0e0e0',\n  \n  // Team score colors\n  playerTeamBackground: 'rgba(40, 97, 40, 0.7)',\n  playerTeamBorder: 'rgba(76, 175, 80, 0.3)',\n  teamScoreText: '#e0e0e0',\n  playerTeamScoreText: '#66bb6a',\n  \n  // Home screen colors\n  welcomeText: '#e0e0e0',\n  logoutButton: '#b71c1c',\n  primaryButton: '#1565c0',\n  primaryButtonText: '#e0e0e0',\n  \n  // App background colors\n  appBackground: '#121212',\n  containerBackground: '#121212',\n  pickerBackground: '#333',\n  titleText: '#e0e0e0',\n};\n\n// Define the shape of our theme context\ninterface ThemeContextType {\n  themeType: ThemeType;\n  colors: ThemeColors;\n  setThemeType: (type: ThemeType) => void;\n  toggleTheme: () => void;\n}\n\n// Create the context with default values\nconst ThemeContext = createContext<ThemeContextType>({\n  themeType: 'light',\n  colors: lightColors,\n  setThemeType: () => {},\n  toggleTheme: () => {},\n});\n\n// Theme provider component\nexport const ThemeProvider: React.FC<{children: ReactNode}> = ({ children }) => {\n  const [themeType, setThemeType] = useState<ThemeType>('light');\n  \n  // Get the colors based on the current theme type\n  const colors = themeType === 'light' ? lightColors : darkColors;\n  \n  // Function to toggle between light and dark themes\n  const toggleTheme = () => {\n    setThemeType(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ themeType, colors, setThemeType, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Custom hook to use the theme\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// For backward compatibility - export the light colors as the default\n// This ensures existing code that uses `import { colors } from '../theme/ThemeContext'` won't break\nexport const colors = lightColors;","import React, { useState } from 'react';\nimport { View, TextInput, Button, StyleSheet, Text, Alert } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const LoginScreen: React.FC<{ navigation: any }> = ({ navigation }) => {\n    const [username, setUsername] = useState('');\n    const socketService = SocketService.getInstance();\n    const { colors } = useTheme();\n\n    const handleLogin = async () => {\n        if (!username.trim()) {\n            Alert.alert('Error', 'Please enter a username');\n            return;\n        }\n\n        try {\n            console.log('Logging in with username:', username);\n            const response = await socketService.login(username);\n            if (response.success) {\n                // Store the username globally in the SocketService\n                socketService.setCurrentUser(username, response.userId!);\n                console.log('Login successful. Navigating to Home.');\n                navigation.replace('Home'); // Using replace to prevent going back to login\n            } else {\n                console.log('Login failed:', response.error || 'Username already taken');\n                Alert.alert('Login Failed', response.error || 'Username already taken');\n            }\n        } catch (error) {\n            Alert.alert('Error', 'Failed to connect to server');\n        }\n    };\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            justifyContent: 'center',\n            backgroundColor: colors.containerBackground,\n        },\n        title: {\n            fontSize: 24,\n            textAlign: 'center',\n            marginBottom: 30,\n            color: colors.titleText,\n        },\n        input: {\n            borderWidth: 1,\n            borderColor: colors.inputBorder,\n            backgroundColor: colors.inputBackground,\n            padding: 10,\n            marginBottom: 20,\n            borderRadius: 5,\n            color: colors.titleText,\n        },\n        buttonContainer: {\n            marginTop: 10,\n        }\n    });\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Enter Your Username</Text>\n            <TextInput\n                style={styles.input}\n                onChangeText={setUsername}\n                value={username}\n                placeholder=\"Username\"\n                placeholderTextColor={colors.playerStatsText}\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n            />\n            <View style={styles.buttonContainer}>\n                <Button \n                    title=\"Login\" \n                    onPress={handleLogin} \n                    color={colors.primaryButton}\n                />\n            </View>\n        </View>\n    );\n}; ","import React from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const HomeScreen: React.FC<{ navigation: any }> = ({ navigation }) => {\n    const { colors, toggleTheme, themeType } = useTheme();\n\n    const socketService = SocketService.getInstance();\n    const username = socketService.getCurrentUser()?.username;\n\n    const handleCreateGame = () => {\n        console.log('Creating game');\n        navigation.navigate('GameCreation', { playerName: username });\n    };\n\n    const handleJoinGame = () => {\n        console.log('Joining game');\n        navigation.navigate('JoinGame', { playerName: username });\n    };\n\n    const handleLogout = async () => {\n        await socketService.logout();\n        console.log('Logging out');\n        navigation.replace('Login');\n    };\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            justifyContent: 'center',\n        },\n        welcome: {\n            fontSize: 24,\n            textAlign: 'center',\n            marginBottom: 30,\n            color: colors.welcomeText,\n        },\n        buttonContainer: {\n            gap: 10,\n        },\n    });\n    \n    return (\n        <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n            <Text style={styles.welcome}>Welcome, {username}!</Text>\n            <View style={styles.buttonContainer}>\n                <Button \n                    title=\"Create Game\" \n                    onPress={handleCreateGame}\n                    color={colors.primaryButton}\n                />\n                <Button \n                    title=\"Join Game\" \n                    onPress={handleJoinGame}\n                    color={colors.primaryButton}\n                />\n                <Button \n                    title=\"Logout\" \n                    onPress={handleLogout} \n                    color={colors.logoutButton}\n                />\n            </View>\n        </View>\n    );\n};\n","import React from 'react';\nimport { View, Text, Button, StyleSheet, ScrollView } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport interface GameManagementProps {\n    gameId: string;\n    onAddAgent: () => void;\n    onStartGame: () => void;\n    playerCount: number;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n        isOwner?: boolean;\n    }>;\n    isOwner: boolean;\n    onKickPlayer: (playerId: string) => void;\n    gameCharacteristics: {\n        minPlayers: number;\n        maxPlayers: number;\n        playerGroupSize: number;\n        extraActions: string[];\n        gamePointsReversed: boolean;\n    };\n}\n\nexport const GameManagement: React.FC<GameManagementProps> = ({\n    gameId,\n    onAddAgent,\n    onStartGame,\n    playerCount,\n    players,\n    isOwner,\n    onKickPlayer,\n    gameCharacteristics\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 10,\n        },\n        controls: {\n            flexDirection: 'column',\n            justifyContent: 'space-around',\n            marginTop: 20,\n        },\n        playerListContainer: {\n            marginTop: 10,\n            marginBottom: 10,\n            height: 160, // Fixed height for about 4 players without scrolling\n            borderWidth: 1,\n            borderColor: '#ddd',\n            borderRadius: 5,\n        },\n        playerList: {\n            flex: 1,\n        },\n        playerRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            paddingVertical: 8,\n            paddingHorizontal: 10,\n            borderBottomWidth: 1,\n            borderBottomColor: '#eee',\n        },\n        playerName: {\n            fontSize: 16,\n        },\n        kickButton: {\n            color: 'red',\n            fontSize: 18,\n            fontWeight: 'bold',\n            padding: 5,\n        },\n        buttonSpacer: {\n            marginTop: 10,\n        }\n    });\n\n    const hasEnoughPlayers = playerCount >= (gameCharacteristics?.minPlayers || 2);\n    \n    return (\n        <View style={styles.container}>\n            <Text style={[styles.subtitle, { color: colors.titleText }]}>Game Setup</Text>\n            <Text style={{ color: colors.statusText }}>Players: {playerCount} (Min: {gameCharacteristics?.minPlayers || 2})</Text>\n            \n            <View style={styles.playerListContainer}>\n                <ScrollView style={styles.playerList}>\n                    {players.map(player => (\n                        <View key={player.id} style={styles.playerRow}>\n                            <Text style={[styles.playerName, { color: colors.statusText }]}>\n                                {player.name} {player.isAgent ? '(AI)' : ''} {player.isOwner ? '(Owner)' : ''}\n                            </Text>\n                            {isOwner && !player.isOwner && (\n                                <Text \n                                    style={styles.kickButton}\n                                    onPress={() => onKickPlayer(player.id)}\n                                >\n                                    ✕\n                                </Text>\n                            )}\n                        </View>\n                    ))}\n                </ScrollView>\n            </View>\n            \n            <View style={styles.controls}>\n                {isOwner && (\n                    <>\n                        <Button title=\"Add AI Player\" onPress={onAddAgent} />\n                        {hasEnoughPlayers && (\n                            <View style={styles.buttonSpacer}>\n                                <Button title=\"Start Game\" onPress={onStartGame} />\n                            </View>\n                        )}\n                    </>\n                )}\n            </View>\n        </View>\n    );\n};","import React from 'react';\nimport { TouchableOpacity, Text, StyleSheet, Platform } from 'react-native';\nimport { Card } from '../shared/types/game-state';\nimport { colors } from '../theme/ThemeContext';\n\nif (Platform.OS === 'web') {\n    require('./Card.web.css');\n}\n\ninterface CardProps {\n    card: Card;\n    onPress?: () => void;\n    disabled?: boolean;\n}\n\nexport const CardRender: React.FC<CardProps> = ({ card, onPress, disabled }) => {\n    const suitSymbols = {\n        hearts: '♥',\n        diamonds: '♦',\n        clubs: '♣',\n        spades: '♠'\n    };\n\n    const valueMap: { [key: number]: string } = {\n        11: 'J',\n        12: 'Q',\n        13: 'K',\n        14: 'A'\n    };\n\n    const isRed = card.suit === 'hearts' || card.suit === 'diamonds';\n\n    return (\n        <TouchableOpacity\n            style={[styles.card, disabled && styles.disabled]}\n            // @ts-ignore\n            className={Platform.OS === 'web' ? 'card-hover' : undefined}\n            onPress={onPress}\n            disabled={disabled}\n            // @ts-ignore\n            {...(Platform.OS === 'web' && {\n                style: [\n                    styles.card,\n                    disabled && styles.disabled,\n                    { cursor: 'pointer' }\n                ]\n            })}\n        >\n            <Text style={[styles.value, isRed && styles.redText]}>\n                {valueMap[card.value] || card.value}\n            </Text>\n            <Text style={[styles.suit, isRed && styles.redText]}>\n                {suitSymbols[card.suit]}\n            </Text>\n        </TouchableOpacity>\n    );\n};\n\nconst styles = StyleSheet.create({\n    card: {\n        width: 60,\n        height: 90,\n        backgroundColor: colors.cardBackground,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colors.cardBorder,\n        padding: 5,\n        margin: 2,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    disabled: {\n        opacity: 0.5,\n    },\n    value: {\n        fontSize: 24,\n        color: colors.cardTextBlack,\n    },\n    suit: {\n        fontSize: 32,\n        color: colors.cardTextBlack,\n    },\n    redText: {\n        color: colors.cardTextRed,\n    },\n});","import React from 'react';\nimport { View, Button, Text, ScrollView, StyleSheet, ViewStyle, Dimensions } from 'react-native';\nimport { CardRender } from './Card';\nimport { GameBroadcastState } from '../shared/types/game-state';\nimport { Card } from '../shared/types/game-state';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface GamePlayProps {\n    gameState: GameBroadcastState;\n    playerName: string;\n    playerId: string;\n    onPlayCard: (index: number) => void;\n    onExtraAction: (actionType: string, actionData: any) => void;\n}\n\n// Game design properties to control layout\ninterface GameDesignProps {\n    TABLE_SIZE: number;                  // Size of the table in px\n    TABLE_MEMBERS_EXPANSION_FACTOR: number; // Expansion factor for spacing elements\n    CARD_RADIUS_FACTOR: number;          // Position factor for cards from center\n    PLAYER_RADIUS_FACTOR: number;        // Position factor for players from center  \n    MIN_GAME_AREA_HEIGHT: number;        // Minimum height for game area\n    CARD_SIZE: {width: number, height: number}; // Size of cards\n    PLAYER_INFO_MIN_WIDTH: number;       // Minimum width for player info boxes\n}\n\n// Default design properties\nconst defaultDesignProps: GameDesignProps = {\n    TABLE_SIZE: 280,\n    TABLE_MEMBERS_EXPANSION_FACTOR: 2.5, // 200% expansion as requested\n    CARD_RADIUS_FACTOR: 0.5,           // Cards at 25% of table radius\n    PLAYER_RADIUS_FACTOR: 0.5,          // Players at 70% of table radius * expansion factor\n    MIN_GAME_AREA_HEIGHT: 350,\n    CARD_SIZE: {width: 60, height: 85},\n    PLAYER_INFO_MIN_WIDTH: 80\n};\n\nexport const GamePlay: React.FC<GamePlayProps> = ({\n    gameState,\n    playerName,\n    playerId,\n    onPlayCard,\n    onExtraAction\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            position: 'relative',\n            padding: 10,\n            width: '100%',\n            alignSelf: 'center',\n            display: 'flex',\n            flexDirection: 'column',\n        },\n        headerRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: 10,\n        },\n        status: {\n            fontSize: 16,\n            flex: 1,\n            color: colors.statusText,\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 5,\n            color: colors.subtitleText,\n        },\n        trickContainer: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 1,\n        },\n        trickTable: {\n            position: 'relative',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        tableBackground: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            borderRadius: 1000,\n            backgroundColor: colors.tableFelt,\n            borderWidth: 4,\n            borderColor: colors.tableEdge,\n        },\n        cardPositioner: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        trickCardContainer: {\n            position: 'absolute',\n            alignItems: 'center',\n        },\n        handContainer: {\n            width: '100%',\n            marginTop: 5,\n            marginBottom: 10,\n            flexShrink: 0,\n        },\n        handWrapper: {\n            width: '100%',\n            height: 100,  // Fixed height\n        },\n        handContent: {\n            alignItems: 'center',\n            paddingHorizontal: 5,\n        },\n        hand: {\n            flexGrow: 0,\n        },\n        extraActionContainer: {\n            marginTop: 10,\n            marginBottom: 10,\n        },\n        gameArea: {\n            flex: 1,\n            position: 'relative',\n            marginVertical: 10,\n        },\n        playAreaContainer: {\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        playerTable: {\n            position: 'absolute',\n            width: 0,  // Set to 0 to ensure proper centering\n            height: 0,  // Set to 0 to ensure proper centering\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 2,\n        },\n        playerInfo: {\n            position: 'absolute',\n            alignItems: 'center',\n            backgroundColor: colors.playerInfoBackground,\n            padding: 8,\n            borderRadius: 8,\n            minWidth: 80,\n            borderWidth: 1,\n            borderColor: colors.playerInfoBorder,\n        },\n        playerNameFixed: {\n            fontSize: 12, // Smaller font\n            fontWeight: 'bold',\n            marginBottom: 2,\n        },\n        currentPlayerName: {\n            color: colors.currentPlayerText,\n            fontWeight: 'bold',\n        },\n        playerStats: {\n            fontSize: 10, // Smaller font\n            color: colors.playerStatsText,\n        },\n        trumpInfo: {\n            position: 'absolute',\n            top: 5,\n            right: 5,\n            alignItems: 'center',\n            backgroundColor: colors.trumpInfoBackground,\n            padding: 5, // Reduced padding\n            borderRadius: 6,\n            borderWidth: 1,\n            borderColor: colors.trumpInfoBorder,\n            zIndex: 10,\n        },\n        trumpTitle: {\n            fontSize: 14,\n            fontWeight: 'bold',\n            marginBottom: 4,\n        },\n        trumpHolder: {\n            fontSize: 12,\n            color: colors.playerStatsText,\n            marginTop: 4,\n        },\n        teamScoreContainer: {\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n            gap: 5, // Reduced gap\n        },\n        teamScoreCard: {\n            backgroundColor: colors.teamScoreCardBackground,\n            borderRadius: 4,\n            paddingVertical: 3,\n            paddingHorizontal: 6,\n            minWidth: 50,\n            alignItems: 'center',\n            borderWidth: 1,\n            borderColor: colors.teamScoreCardBorder,\n        },\n        playerTeamCard: {\n            backgroundColor: colors.playerTeamBackground,\n            borderColor: colors.playerTeamBorder,\n        },\n        teamName: {\n            fontSize: 12,\n            fontWeight: '500',\n            textAlign: 'center',\n        },\n        teamScore: {\n            fontSize: 14,\n            fontWeight: 'bold',\n            color: colors.teamScoreText,\n        },\n        playerTeamScore: {\n            color: colors.playerTeamScoreText,\n        },\n    });\n\n    const currentPlayerIndex = gameState.public.currentPlayerIndex;\n    const currentPlayerId = gameState.public.players[currentPlayerIndex].id;\n    const isCurrentPlayer = currentPlayerId === playerId;\n    const isResolvingTrick = gameState.public.gameSpecificData?.isResolvingTrick;\n    const hand = gameState.private?.hand || [];\n    const currentTrick = gameState.public.gameSpecificData?.currentTrick || [];\n    const scores = gameState.public.gameSpecificData?.scores || [];\n    const canToggle = gameState.public.gameSpecificData?.canToggle;\n    const trumpCard = gameState.public.gameSpecificData?.trumpCard;\n    const trumpHolder = gameState.public.gameSpecificData?.trumpHolder;\n    const teams = gameState.public.gameSpecificData?.teams || [];\n    const gamePoints = gameState.public.gameSpecificData?.gamePoints || [];\n    \n    // Find which team the player belongs to\n    const playerTeamIndex = teams.findIndex((team: string[]) => team.includes(playerId));\n\n    // Near the top of your component, after the props destructuring\n    const windowWidth = Dimensions.get('window').width;\n    const windowHeight = Dimensions.get('window').height;\n    const responsiveStyles = getResponsiveStyles(windowWidth, windowHeight);\n    \n    // Use the design props, can be adjusted dynamically if needed\n    const designProps = defaultDesignProps;\n\n    // Render cards in hand\n    const renderHand = () => (\n        <View style={styles.handWrapper}>\n            <ScrollView horizontal contentContainerStyle={styles.handContent}>\n                {hand.map((card: any, index: number) => (\n                    <CardRender\n                        key={index}\n                        card={card}\n                        onPress={() => isCurrentPlayer && onPlayCard(index)}\n                    />\n                ))}\n            </ScrollView>\n        </View>\n    );\n\n    // Render current trick\n    const renderCurrentTrick = () => {\n        const myPlayerIndex = gameState.public.players.findIndex(p => p.id === playerId);\n        const numPlayers = gameState.public.players.length;\n        \n        // Calculate card radius based on design props\n        const tableRadius = designProps.TABLE_SIZE / 2;\n        const CARD_RADIUS = tableRadius * designProps.CARD_RADIUS_FACTOR;\n\n        const getCardPosition = (playerIndex: number): ViewStyle => {\n            const relativePos = (playerIndex - myPlayerIndex + numPlayers) % numPlayers;\n            const angle = -Math.PI/2 - (relativePos * 2 * Math.PI / numPlayers);\n            // The minus is a hack\n            const x = - CARD_RADIUS * Math.cos(angle);\n            const y = - CARD_RADIUS * Math.sin(angle);\n\n            return {\n                position: 'absolute',\n                transform: [\n                    { translateX: x },\n                    { translateY: y },\n                    { rotate: `${angle + Math.PI/2}rad` }\n                ] as any[]\n            };\n        };\n\n        return (\n            <View style={styles.trickContainer}>\n                <View style={[styles.trickTable, {\n                    width: designProps.TABLE_SIZE, \n                    height: designProps.TABLE_SIZE\n                }]}>\n                    <View style={styles.tableBackground} />                    \n                    <View style={styles.cardPositioner}>\n                        {/* Render cards if they exist */}\n                        {currentTrick?.map(({playerId: cardPlayerId, card}: {playerId: string, card: Card}) => {\n                            const playerIndex = gameState.public.players.findIndex(p => p.id === cardPlayerId);\n                            return (\n                                <View \n                                    key={cardPlayerId} \n                                    style={[\n                                        styles.trickCardContainer, \n                                        getCardPosition(playerIndex),\n                                        {\n                                            width: designProps.CARD_SIZE.width, \n                                            height: designProps.CARD_SIZE.height\n                                        }\n                                    ]}\n                                >\n                                    <CardRender card={card} />\n                                </View>\n                            );\n                        })}\n                    </View>\n                </View>\n            </View>\n        );\n    };\n\n    // Render players\n    const renderPlayers = () => {\n        const myPlayerIndex = gameState.public.players.findIndex(p => p.id === playerId);\n        const numPlayers = gameState.public.players.length;\n        \n        // Calculate player radius based on design props and expansion factor\n        const tableRadius = designProps.TABLE_SIZE / 2;\n        const PLAYER_RADIUS = tableRadius * designProps.PLAYER_RADIUS_FACTOR * \n                             designProps.TABLE_MEMBERS_EXPANSION_FACTOR;\n\n        const getPlayerPosition = (playerIndex: number): ViewStyle => {\n            const relativePos = (playerIndex - myPlayerIndex + numPlayers) % numPlayers;\n            const angle = -Math.PI/2 - (relativePos * 2 * Math.PI / numPlayers);\n            const x = PLAYER_RADIUS * Math.cos(angle);\n            const y = PLAYER_RADIUS * Math.sin(angle);\n\n            return {\n                position: 'absolute',\n                transform: [\n                    { translateX: x },\n                    { translateY: y }\n                ] as any[]\n            };\n        };\n\n        return (\n            <View style={styles.playerTable}>\n                {gameState.public.players.map((player, index) => {\n                    const playerScore = gameState.public.gameSpecificData?.scores?.find(\n                        (score: {playerId: string, score: number}) => score.playerId === player.id\n                    )?.score || 0;\n\n                    return (\n                        <View \n                            key={player.id}\n                            style={[\n                                styles.playerInfo, \n                                getPlayerPosition(index),\n                                { minWidth: designProps.PLAYER_INFO_MIN_WIDTH }\n                            ]}\n                        >\n                            <Text style={[\n                                styles.playerNameFixed,\n                                player.id === playerId && styles.currentPlayerName\n                            ]}>\n                                {player.name}\n                            </Text>\n                            <Text style={styles.playerStats}>\n                                Points: {playerScore}\n                            </Text>\n                        </View>\n                    );\n                })}\n            </View>\n        );\n    };\n\n    // Render extra action button if available\n    const renderExtraAction = () => {\n        if (!isCurrentPlayer || !canToggle || !onExtraAction) return null;\n        return (\n            <View style={styles.extraActionContainer}>\n                <Button\n                    title={`Toggle ${gameState.public.gameSpecificData?.isHighWins ? 'High' : 'Low'} Wins`}\n                    onPress={() => onExtraAction('TOGGLE_WIN_CONDITION', {})}\n                />\n            </View>\n        );\n    };\n\n    // Add new function to render trump info\n    const renderTrumpInfo = () => {\n        if (!trumpCard || !trumpHolder) return null;\n        \n        const trumpHolderName = gameState.public.players.find(p => p.id === trumpHolder)?.name;\n        \n        return (\n            <View style={styles.trumpInfo}>\n                <Text style={styles.trumpTitle}>Trump Card:</Text>\n                <CardRender card={trumpCard} />\n                <Text style={styles.trumpHolder}>Held by: {trumpHolderName}</Text>\n            </View>\n        );\n    };\n\n    // Render team scores more discreetly\n    const renderTeamScores = () => {\n        if (!teams || teams.length === 0 || !gamePoints) return null;\n        \n        return (\n            <View style={styles.teamScoreContainer}>\n                {teams.map((team: string[], index: number) => {\n                    const teamScore = gamePoints[index] || 0;\n                    const isPlayerTeam = index === playerTeamIndex;\n                    \n                    return (\n                        <View \n                            key={`team-${index}`} \n                            style={[\n                                styles.teamScoreCard, \n                                isPlayerTeam && styles.playerTeamCard\n                            ]}\n                        >\n                            <Text style={styles.teamName}>\n                                Team {index + 1}\n                                {isPlayerTeam ? ' ★' : ''}\n                            </Text>\n                            <Text style={[\n                                styles.teamScore,\n                                isPlayerTeam && styles.playerTeamScore\n                            ]}>\n                                {teamScore}\n                            </Text>\n                        </View>\n                    );\n                })}\n            </View>\n        );\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.headerRow}>\n                <Text style={styles.status}>\n                    {isResolvingTrick \n                        ? \"Resolving trick...\" \n                        : isCurrentPlayer \n                            ? \"Your turn!\" \n                            : `Waiting for ${gameState.public.players[currentPlayerIndex].name}`}\n                </Text>\n                {renderTeamScores()}\n            </View>\n            <View style={[\n                styles.gameArea, \n                responsiveStyles.gameArea,\n                { minHeight: designProps.MIN_GAME_AREA_HEIGHT }\n            ]}>\n                <View style={styles.playAreaContainer}>\n                    {renderTrumpInfo()}\n                    {renderCurrentTrick()}\n                    {renderPlayers()}\n                </View>\n            </View>\n            <View style={styles.handContainer}>\n                <Text style={styles.subtitle}>Your Hand:</Text>\n                {renderHand()}\n                {renderExtraAction()}\n            </View>\n        </View>\n    );\n};\n\n// getResponsiveStyles stays outside\nconst getResponsiveStyles = (width: number, height: number) => ({\n    gameArea: {\n        maxHeight: height * 0.6,\n    },\n    playerTable: width <= 768 ? {\n        maxWidth: 350,\n        maxHeight: 350,\n    } : {\n        maxWidth: 450,\n        maxHeight: 450,\n    }\n}); ","import React from 'react';\nimport { View, Text, StyleSheet, ScrollView } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface GameEndProps {\n    teams: Array<string[]>;\n    gamePoints: Array<number>;\n    playerId: string;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n    }>;\n    gamePointsReversed: boolean;\n}\n\nexport const GameEnd: React.FC<GameEndProps> = ({\n    teams,\n    gamePoints,\n    playerId,\n    players,\n    gamePointsReversed\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n        },\n        title: {\n            fontSize: 24,\n            fontWeight: 'bold',\n            textAlign: 'center',\n            marginBottom: 10,\n        },\n        subtitle: {\n            fontSize: 18,\n            textAlign: 'center',\n            marginBottom: 20,\n        },\n        scoreList: {\n            flex: 1,\n        },\n        teamRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            padding: 15,\n            backgroundColor: colors.teamScoreCardBackground,\n            borderRadius: 8,\n            marginBottom: 10,\n            borderWidth: 1,\n            borderColor: colors.teamScoreCardBorder,\n        },\n        playerTeamRow: {\n            backgroundColor: colors.playerTeamBackground,\n            borderColor: colors.playerTeamBorder,\n        },\n        winnerRow: {\n            borderWidth: 2,\n            borderColor: 'gold',\n        },\n        rankAndTeam: {\n            flexDirection: 'row',\n            flex: 1,\n            alignItems: 'flex-start',\n        },\n        rank: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginRight: 10,\n            width: 25,\n        },\n        teamMembers: {\n            flex: 1,\n        },\n        teamTitle: {\n            fontSize: 16,\n            fontWeight: 'bold',\n            marginBottom: 5,\n        },\n        playerName: {\n            fontSize: 14,\n            marginLeft: 10,\n            color: colors.statusText,\n        },\n        currentPlayerName: {\n            fontWeight: 'bold',\n            color: colors.currentPlayerText,\n        },\n        playerTeamText: {\n            color: colors.playerTeamScoreText,\n        },\n        points: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            color: colors.teamScoreText,\n        },\n    });\n\n    // Find which team the player belongs to\n    const playerTeamIndex = teams.findIndex(team => team.includes(playerId));\n    \n    // Combine teams and points for sorting\n    const teamsWithPoints = teams.map((team, index) => ({\n        teamIndex: index,\n        teamMembers: team,\n        points: gamePoints[index] || 0,\n        isPlayerTeam: index === playerTeamIndex\n    }));\n    \n    // Sort teams by points (higher points first, unless reversed)\n    const sortedTeams = [...teamsWithPoints].sort((a, b) => {\n        if (gamePointsReversed) {\n            return a.points - b.points; // Lower points win if reversed\n        }\n        return b.points - a.points; // Higher points win normally\n    });\n\n    return (\n        <View style={styles.container}>\n            <Text style={[styles.title, { color: colors.titleText }]}>Game Finished</Text>\n            <Text style={[styles.subtitle, { color: colors.subtitleText }]}>Final Scores</Text>\n            \n            <ScrollView style={styles.scoreList}>\n                {sortedTeams.map((team, index) => {\n                    const isWinner = index === 0;\n                    return (\n                        <View \n                            key={`team-${team.teamIndex}`} \n                            style={[\n                                styles.teamRow, \n                                team.isPlayerTeam && styles.playerTeamRow,\n                                isWinner && styles.winnerRow\n                            ]}\n                        >\n                            <View style={styles.rankAndTeam}>\n                                <Text style={[\n                                    styles.rank, \n                                    team.isPlayerTeam && styles.playerTeamText\n                                ]}>\n                                    {index + 1}.\n                                </Text>\n                                <View style={styles.teamMembers}>\n                                    <Text style={[\n                                        styles.teamTitle, \n                                        team.isPlayerTeam && styles.playerTeamText\n                                    ]}>\n                                        Team {team.teamIndex + 1} {team.isPlayerTeam && '(Your Team)'}\n                                        {isWinner && ' 🏆'}\n                                    </Text>\n                                    {team.teamMembers.map(memberId => {\n                                        const player = players.find(p => p.id === memberId);\n                                        return (\n                                            <Text \n                                                key={memberId} \n                                                style={[\n                                                    styles.playerName,\n                                                    memberId === playerId && styles.currentPlayerName,\n                                                    team.isPlayerTeam && styles.playerTeamText\n                                                ]}\n                                            >\n                                                {player?.name || 'Unknown'} {memberId === playerId && '(You)'}\n                                                {player?.isAgent && ' (AI)'}\n                                            </Text>\n                                        );\n                                    })}\n                                </View>\n                            </View>\n                            <Text style={[\n                                styles.points, \n                                team.isPlayerTeam && styles.playerTeamText\n                            ]}>\n                                {team.points} pts\n                            </Text>\n                        </View>\n                    );\n                })}\n            </ScrollView>\n        </View>\n    );\n}; ","export type AvailableGames = 'SUECA'\n\nexport interface Card {\n    suit: 'hearts' | 'diamonds' | 'clubs' | 'spades';\n    value: number;  // 2-14 (14 being Ace)\n}\n\nexport interface PublicGameState {\n    id: string;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n    }>;\n    currentPlayerIndex: number;\n    phase: GamePhase;\n    owner?: string;\n    gameSpecificData: any;\n    gameCharacteristics: GameCharacteristics;\n}\n\nexport interface PrivatePlayerState {\n    hand: Card[];\n    gameSpecificData?: any;\n}\n\nexport interface GameCharacteristics {\n    minPlayers: number;\n    maxPlayers: number;\n    playerGroupSize: number;\n    extraActions: string[];\n    gamePointsReversed: boolean;\n}\n\nexport interface GameBroadcastState {\n    public: PublicGameState;\n    private?: PrivatePlayerState;\n}\n\n// Base interface for game-specific data\nexport interface BaseGameSpecificData {\n    currentTrick?: Array<{playerId: string; card: Card}>;\n    scores?: Array<{playerId: string; score: number}>;\n    gamePoints?: Array<number>;\n    teams?: Array<string[]>;\n}\n\nexport enum GamePhase {\n    WAITING = 'WAITING',\n    PLAYING = 'PLAYING',\n    FINISHED = 'FINISHED'\n}\n\nexport interface GameAction {\n    type: 'PLAY_CARD' | 'JOIN_GAME' | 'START_GAME';\n    playerId?: string;\n    cardIndex?: number;\n    gameId?: string;\n}\n","import React from 'react';\nimport { View, Text, Modal, TouchableOpacity, StyleSheet } from 'react-native';\nimport { colors } from '../theme/ThemeContext';\n\ninterface ConfirmDialogProps {\n    visible: boolean;\n    title: string;\n    message: string;\n    onConfirm: () => void;\n    onCancel: () => void;\n}\n\nexport const ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n    visible,\n    title,\n    message,\n    onConfirm,\n    onCancel\n}) => {\n    return (\n        <Modal\n            transparent\n            visible={visible}\n            animationType=\"fade\"\n            onRequestClose={onCancel}\n        >\n            <View style={styles.overlay}>\n                <View style={styles.dialog}>\n                    <Text style={styles.title}>{title}</Text>\n                    <Text style={styles.message}>{message}</Text>\n                    <View style={styles.buttonContainer}>\n                        <TouchableOpacity \n                            style={[styles.button, styles.cancelButton]} \n                            onPress={onCancel}\n                        >\n                            <Text style={styles.buttonText}>Cancel</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity \n                            style={[styles.button, styles.confirmButton]} \n                            onPress={onConfirm}\n                        >\n                            <Text style={styles.buttonText}>Leave Game</Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </View>\n        </Modal>\n    );\n};\n\nconst styles = StyleSheet.create({\n    overlay: {\n        flex: 1,\n        backgroundColor: colors.dialogOverlay,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    dialog: {\n        backgroundColor: colors.dialogBackground,\n        borderRadius: 10,\n        padding: 20,\n        width: '80%',\n        maxWidth: 400,\n    },\n    title: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        marginBottom: 10,\n        textAlign: 'center',\n    },\n    message: {\n        fontSize: 16,\n        marginBottom: 20,\n        textAlign: 'center',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n    },\n    button: {\n        flex: 1,\n        padding: 10,\n        borderRadius: 5,\n        marginHorizontal: 5,\n    },\n    cancelButton: {\n        backgroundColor: colors.dialogCancelButton,\n    },\n    confirmButton: {\n        backgroundColor: colors.dialogConfirmButton,\n    },\n    buttonText: {\n        color: colors.dialogButtonText,\n        textAlign: 'center',\n        fontSize: 16,\n    },\n}); ","import React, { useState } from 'react';\nimport { TouchableOpacity, Text, StyleSheet } from 'react-native';\nimport { ConfirmDialog } from './ConfirmDialog';\nimport { SocketService } from '../services/socket.service';\nimport { useNavigation } from '@react-navigation/native';\n\ninterface LeaveGameButtonProps {\n    gameId: string;\n    style?: any;\n}\n\nexport const LeaveGameButton: React.FC<LeaveGameButtonProps> = ({ gameId, style }) => {\n    const [showConfirm, setShowConfirm] = useState(false);\n    const navigation = useNavigation();\n    const socketService = SocketService.getInstance();\n\n    const handleLeaveGame = async () => {\n        try {\n            const response = await socketService.leaveGame(gameId);\n            if (response.success) {\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: 'Home' as never }],\n                });\n            } else {\n                console.error('Failed to leave game');\n            }\n        } catch (error) {\n            console.error('Error leaving game:', error);\n        }\n        setShowConfirm(false);\n    };\n\n    return (\n        <>\n            <TouchableOpacity \n                style={[styles.leaveButton, style]} \n                onPress={() => setShowConfirm(true)}\n            >\n                <Text style={styles.leaveButtonText}>Leave Game</Text>\n            </TouchableOpacity>\n\n            <ConfirmDialog\n                visible={showConfirm}\n                title=\"Leave Game\"\n                message=\"Are you sure you want to leave this game? This action cannot be undone.\"\n                onConfirm={handleLeaveGame}\n                onCancel={() => setShowConfirm(false)}\n            />\n        </>\n    );\n};\n\nconst styles = StyleSheet.create({\n    leaveButton: {\n        backgroundColor: '#d32f2f',\n        padding: 10,\n        borderRadius: 5,\n        position: 'absolute',\n        top: 10,\n        right: 10,\n    },\n    leaveButtonText: {\n        color: 'white',\n        fontSize: 16,\n        fontWeight: 'bold',\n    },\n}); ","import React, { useEffect, useState, useCallback } from 'react';\nimport { View, Text, Button, ScrollView, StyleSheet, Alert, BackHandler } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { GameScreenState } from '../types/game-ui';\nimport { GameManagement } from '../components/GameManagement';\nimport { GamePlay } from '../components/GamePlay';\nimport { GameEnd } from '../components/GameEnd';\nimport { GameBroadcastState, GamePhase } from '../shared/types/game-state';\nimport { LeaveGameButton } from '../components/LeaveGameButton';\nimport { useTheme } from '../theme/ThemeContext';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { BroadcastTypes } from '../shared/types/actions';\nimport { ConfirmDialog } from '../components/ConfirmDialog';\n\ninterface GameScreenProps {\n    route: any;\n}\n\nexport const GameScreen: React.FC<GameScreenProps> = ({ route }) => {\n    const { gameId, playerName } = route.params;\n    const [gameState, setGameState] = useState<GameBroadcastState | null>(null);\n    const [screenState, setScreenState] = useState<GameScreenState>({\n        mode: 'management',\n        isCurrentPlayer: false\n    });\n    const [showLeaveConfirm, setShowLeaveConfirm] = useState(false);\n    const socketService = SocketService.getInstance();\n    const { colors } = useTheme();\n    const navigation = useNavigation();\n\n    console.log('GameScreen mounted with gameId:', gameId, 'and playerName:', playerName);\n\n    // Handle hardware back button (Android)\n    useFocusEffect(\n        useCallback(() => {\n            const onBackPress = () => {\n                // Show leave game confirmation\n                setShowLeaveConfirm(true);\n                return true; // Prevent default back behavior\n            };\n\n            BackHandler.addEventListener('hardwareBackPress', onBackPress);\n            \n            // Set up navigation options for the header back button\n            navigation.setOptions({\n                headerLeft: () => null, // Remove the default back button\n                // If you want a custom back button, you can add it here\n            });\n\n            return () => BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n        }, [navigation])\n    );\n\n    useEffect(() => {\n        console.log('useEffect called');\n        \n        const handleNotInGame = (data: { gameId: string, playerId: string }) => {\n            console.log('handleNotInGame called with data:', data);\n            console.log('currentGameId:', gameId);\n            console.log('currentUserId:', socketService.getCurrentUser()?.userId);\n            \n            if (data.gameId === gameId && data.playerId === socketService.getCurrentUser()?.userId) {\n                console.log('Navigating to Home screen due to NOT_IN_GAME event');\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: 'Home' as never }],\n                });\n            }\n        };\n        \n        socketService.on(BroadcastTypes.NOT_IN_GAME, handleNotInGame);\n        \n        socketService.onGameState((state: GameBroadcastState) => {\n            console.log('Game state received:', state);\n            setGameState(state);\n            \n            setScreenState(prev => ({\n                ...prev,\n                mode: state.public.phase === 'PLAYING' ? 'playing' : 'management',\n                isCurrentPlayer: state.public.players[state.public.currentPlayerIndex]?.name === playerName\n            }));\n        });\n\n        return () => {\n            socketService.off(BroadcastTypes.NOT_IN_GAME, handleNotInGame);\n        };\n    }, [gameId, navigation]);\n\n    const handleAddAgent = () => {\n        socketService.addAgent(gameId);\n    };\n\n    const handleStartGame = () => {\n        socketService.startGame(gameId);\n    };\n\n    const handlePlayCard = (cardIndex: number) => {\n        socketService.playCard(gameId, cardIndex);\n    };\n\n    const handleExtraAction = (actionType: string, actionData: any) => {\n        socketService.extraAction(gameId, actionType, actionData);\n    };\n\n    const handleKickPlayer = (playerId: string) => {\n        socketService.kickPlayer(gameId, playerId);\n    };\n\n    if (!gameState) {\n        return <Text>Loading...</Text>;\n    }\n\n    const renderGameContent = () => {\n        if (gameState.public.phase === GamePhase.FINISHED) {\n            return (\n                <GameEnd \n                    teams={gameState.public.gameSpecificData?.teams || []}\n                    gamePoints={gameState.public.gameSpecificData?.gamePoints || []}\n                    playerId={socketService.getCurrentUser()?.userId || ''}\n                    players={gameState.public.players}\n                    gamePointsReversed={gameState.public.gameCharacteristics.gamePointsReversed}\n                />\n            );\n        } else if (screenState.mode === 'management') {\n            return (\n                <GameManagement\n                    gameId={gameId}\n                    onAddAgent={handleAddAgent}\n                    onStartGame={handleStartGame}\n                    playerCount={gameState.public.players.length}\n                    players={gameState.public.players.map(player => ({\n                        ...player,\n                        isOwner: player.id === gameState.public.owner\n                    }))}\n                    isOwner={socketService.getCurrentUser()?.userId === gameState.public.owner}\n                    onKickPlayer={handleKickPlayer}\n                    gameCharacteristics={gameState.public.gameCharacteristics}\n                />\n            );\n        } else {\n            return (\n                <GamePlay\n                    gameState={gameState}\n                    playerName={playerName}\n                    playerId={socketService.getCurrentUser()?.userId || ''}\n                    onPlayCard={handlePlayCard}\n                    onExtraAction={handleExtraAction}\n                />\n            );\n        }\n    };\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            position: 'relative',\n        },\n        title: {\n            fontSize: 24,\n            fontWeight: 'bold',\n            marginBottom: 20,\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 10,\n        },\n        controls: {\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 20,\n        },\n        status: {\n            fontSize: 16,\n            marginBottom: 20,\n        },\n        trickContainer: {\n            marginBottom: 20,\n        },\n        trick: {\n            flexGrow: 0,\n            height: 100,\n        },\n        handContainer: {\n            marginTop: 'auto',\n        },\n        hand: {\n            flexGrow: 0,\n            height: 100,\n        },\n        scoreboard: {\n            marginTop: 20,\n        },\n    });\n\n    return (\n        <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n            <LeaveGameButton gameId={gameId} />\n            <Text style={[styles.title, { color: colors.titleText }]}>Game Room: {gameId}</Text>\n            \n            {renderGameContent()}\n            <ConfirmDialog\n                visible={showLeaveConfirm}\n                title=\"Leave Game\"\n                message=\"Are you sure you want to leave this game? This action cannot be undone.\"\n                onConfirm={async () => {\n                    try {\n                        const response = await socketService.leaveGame(gameId);\n                        if (response.success) {\n                            navigation.reset({\n                                index: 0,\n                                routes: [{ name: 'Home' as never }],\n                            });\n                        }\n                    } catch (error) {\n                        console.error('Error leaving game:', error);\n                    }\n                    setShowLeaveConfirm(false);\n                }}\n                onCancel={() => setShowLeaveConfirm(false)}\n            />\n        </View>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\nimport { SocketService } from '../services/socket.service';\nimport { AvailableGames } from '../shared/types/game-state';\nimport { useTheme } from '../theme/ThemeContext';\n\nconst GAME_TYPES: AvailableGames[] = ['SUECA'];\n\nexport const GameCreationScreen: React.FC<{ route: any, navigation: any }> =\n    ({route, navigation}) => {\n        const { colors } = useTheme();\n        console.log('GameCreationScreen rendered');\n        console.log('Route params:', route.params);\n        const { playerName } = route.params;\n        const socketService = SocketService.getInstance();\n        const [gameType, setGameType] = useState<AvailableGames>(GAME_TYPES[0]);\n    \n        const handleCreateGame = async () => {\n            console.log('Creating game');\n            await socketService.connect(playerName);\n            console.log('Connected to socket');\n            const response = await socketService.createGame(playerName, gameType);\n            if (response.success && response.gameId) {\n                console.log('Game created successfully');\n                navigation.navigate('Game', { gameId: response.gameId, playerName });\n            }\n        };\n\n        const styles = StyleSheet.create({\n            container: {\n                flex: 1,\n                padding: 20,\n            },\n            title: {\n                fontSize: 24,\n                marginBottom: 20,\n            },\n            formGroup: {\n                marginBottom: 20,\n            },\n            label: {\n                marginBottom: 10,\n            },\n            picker: {\n                padding: 10,\n            }\n        });\n\n        return (\n            <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n                <Text style={[styles.title, { color: colors.titleText }]}>Game Creation</Text>\n                <View style={styles.formGroup}>\n                    <Text style={[styles.label, { color: colors.subtitleText }]}>\n                        Select Game Type:\n                    </Text>\n                    <Picker\n                        selectedValue={gameType}\n                        onValueChange={(itemValue: AvailableGames) => setGameType(itemValue)}\n                        style={[styles.picker, { backgroundColor: colors.pickerBackground }]}\n                    >\n                        {GAME_TYPES.map((game) => (\n                            <Picker.Item \n                                key={game} \n                                label={game.replace('_', ' ')} \n                                value={game}\n                            />\n                        ))}\n                    </Picker>\n                </View>\n                <Button \n                    title=\"Create Game\" \n                    onPress={handleCreateGame} \n                    color={colors.primaryButton}\n                />\n            </View>\n        );\n    }","import React, { useState } from 'react';\nimport { View, TextInput, Button, StyleSheet } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\n\nexport const JoinGameScreen: React.FC<{ route: any, navigation: any }> =\n    ({route, navigation}) => {\n        const { colors } = useTheme();\n        const { playerName } = route.params;\n        const socketService = SocketService.getInstance();\n        const [gameId, setGameId] = useState('');\n\n        const handleJoinGame = async () => {\n            await socketService.connect(playerName);\n            await socketService.joinGame(gameId, playerName);\n            navigation.navigate('Game', { gameId, playerName });\n        };\n\n        const styles = StyleSheet.create({\n            container: {\n                flex: 1,\n                padding: 20,\n                justifyContent: 'center',\n            },\n            input: {\n                borderWidth: 1,\n                borderColor: colors.inputBorder,\n                padding: 10,\n                marginBottom: 20,\n                borderRadius: 5,\n            },\n            buttonContainer: {\n                gap: 10,\n            },\n        });\n\n        return (\n            <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n                <TextInput\n                    style={[styles.input, { backgroundColor: colors.inputBackground }]}\n                    placeholder=\"Enter game identifier\"\n                    onChangeText={(text) => setGameId(text)}\n                    placeholderTextColor={colors.playerStatsText}\n                />\n                <Button \n                    title=\"Join Game\" \n                    onPress={handleJoinGame} \n                    color={colors.primaryButton}\n                />\n            </View>\n        );\n    }\n    ","import React from 'react';\nimport { TouchableOpacity, StyleSheet } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons'; // Make sure you have this package installed\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const ThemeToggleButton: React.FC = () => {\n  const { toggleTheme, themeType } = useTheme();\n  \n  return (\n    <TouchableOpacity \n      style={styles.button} \n      onPress={toggleTheme}\n      accessibilityLabel=\"Toggle theme\"\n      accessibilityRole=\"button\"\n    >\n      <Ionicons \n        name={themeType === 'light' ? 'moon-outline' : 'sunny-outline'} \n        size={22} \n        color={themeType === 'light' ? '#333' : '#fff'} \n      />\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    marginRight: 8,\n    padding: 8,\n  }\n}); ","import React from 'react';\nimport { Platform, View, StatusBar, StyleSheet } from 'react-native';\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { LoginScreen } from './src/screens/LoginScreen';\nimport { HomeScreen } from './src/screens/HomeScreen';\nimport { GameScreen } from './src/screens/GameScreen';\nimport { GameCreationScreen } from './src/screens/GameCreationScreen';\nimport { JoinGameScreen } from './src/screens/JoinGameScreen';\nimport { ThemeProvider, useTheme, lightColors } from './src/theme/ThemeContext';\nimport { ThemeToggleButton } from './src/components/ThemeToggleButton';\n\n// Types for navigation\ntype RootStackParamList = {\n  Login: undefined;\n  Home: undefined;\n  Game: { gameId: string; playerName: string };\n  GameCreation: { playerName: string };\n  JoinGame: { playerName: string };\n};\n\nconst WebStack = createStackNavigator<RootStackParamList>();\nconst NativeStack = createNativeStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <AppContent />\n    </ThemeProvider>\n  );\n}\n\nconst AppContent = () => {\n  const Stack = Platform.OS === 'web' ? WebStack : NativeStack;\n  const { colors, themeType } = useTheme();\n\n  // Custom navigation theme based on our colors\n  const navigationTheme = {\n    ...DefaultTheme,\n    colors: {\n      ...DefaultTheme.colors,\n      background: colors.appBackground,\n      card: colors.containerBackground,\n      text: colors.titleText,\n      border: colors.inputBorder,\n      primary: colors.primaryButton,\n    },\n  };\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.appBackground }]}>\n      <StatusBar \n        backgroundColor={colors.appBackground}\n        barStyle={themeType === 'dark' ? 'light-content' : 'dark-content'} \n      />\n      <NavigationContainer theme={navigationTheme}>\n        <Stack.Navigator \n          initialRouteName=\"Login\" \n          screenOptions={{\n            headerShown: true,\n            headerStyle: {\n              backgroundColor: colors.containerBackground,\n              borderBottomColor: colors.inputBorder,\n              borderBottomWidth: 1,\n            },\n            headerTitleStyle: {\n              color: colors.titleText,\n            },\n            headerTintColor: colors.titleText,\n            // Add the theme toggle button to all screens\n            headerRight: () => <ThemeToggleButton />\n          }}\n        >\n          <Stack.Screen \n            name=\"Login\" \n            component={LoginScreen}\n            // Show the header on the login screen\n            options={{ \n              title: 'Sign In',\n              // Disable back button on login screen\n              headerLeft: () => null \n            }}\n          />\n          <Stack.Screen \n            name=\"Home\" \n            component={HomeScreen} \n            options={{\n              title: 'Home',\n              headerLeft: () => null, // Remove back button on home screen\n            }}\n          />\n          <Stack.Screen \n            name=\"Game\" \n            component={GameScreen}\n          />\n          <Stack.Screen \n            name=\"GameCreation\" \n            component={GameCreationScreen}\n            options={{ title: 'Create Game' }}\n          />\n          <Stack.Screen \n            name=\"JoinGame\" \n            component={JoinGameScreen}\n            options={{ title: 'Join Game' }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","// extracted by mini-css-extract-plugin\nexport default {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"./\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [4], () => (__webpack_require__(6536)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["AuthActions","MainActions","GameAdminActions","GamePlayActions","BroadcastTypes","socketUrl","socketPath","SocketService","currentUser","reconnectAttempts","MAX_RECONNECT_ATTEMPTS","heartbeatInterval","HEARTBEAT_INTERVAL","eventHandlers","Map","constructor","this","socket","io","config","transports","path","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","timeout","console","log","setupSocketListeners","on","id","reason","connect","error","disconnect","attemptNumber","STATE","state","GAME_DELETED","data","gameId","NOT_IN_GAME","playerId","triggerEvent","socketId","userId","timestamp","Date","toISOString","clearHeartbeat","clearCurrentUser","getInstance","instance","playerName","Promise","resolve","reject","connected","createGame","gameType","setTimeout","Error","emit","CREATE_GAME","response","clearTimeout","joinGame","JOIN_GAME","addAgent","ADD_AGENT","startGame","START_GAME","playCard","cardIndex","PLAY_CARD","onGameState","callback","onAny","eventName","args","setupHeartbeat","clearInterval","setInterval","HEARTBEAT","success","warn","logout","hasUser","login","username","LOGIN","setCurrentUser","extraAction","actionType","actionData","EXTRA_ACTION","getCurrentUser","LOGOUT","leaveGame","LEAVE_GAME","kickPlayer","KICK_PLAYER","event","has","set","get","push","off","handlers","index","indexOf","splice","forEach","handler","lightColors","cardBackground","cardBorder","cardTextBlack","cardTextRed","dialogOverlay","dialogBackground","dialogCancelButton","dialogConfirmButton","dialogButtonText","leaveButtonBackground","leaveButtonText","playerInfoBackground","playerInfoBorder","currentPlayerText","playerStatsText","trumpInfoBackground","trumpInfoBorder","teamScoreCardBackground","teamScoreCardBorder","inputBorder","inputBackground","tableFelt","tableEdge","statusText","subtitleText","playerTeamBackground","playerTeamBorder","teamScoreText","playerTeamScoreText","welcomeText","logoutButton","primaryButton","primaryButtonText","appBackground","containerBackground","pickerBackground","titleText","darkColors","ThemeContext","createContext","themeType","colors","setThemeType","toggleTheme","ThemeProvider","children","useState","_jsx","Provider","value","prevTheme","useTheme","context","useContext","undefined","LoginScreen","navigation","setUsername","socketService","styles","StyleSheet","create","container","flex","padding","justifyContent","backgroundColor","title","fontSize","textAlign","marginBottom","color","input","borderWidth","borderColor","borderRadius","buttonContainer","marginTop","_jsxs","View","style","Text","TextInput","onChangeText","placeholder","placeholderTextColor","autoCapitalize","autoCorrect","Button","onPress","async","trim","replace","Alert","alert","HomeScreen","welcome","gap","handleCreateGame","navigate","handleJoinGame","GameManagement","onAddAgent","onStartGame","playerCount","players","isOwner","onKickPlayer","gameCharacteristics","subtitle","fontWeight","controls","flexDirection","playerListContainer","height","playerList","playerRow","paddingVertical","paddingHorizontal","borderBottomWidth","borderBottomColor","kickButton","buttonSpacer","hasEnoughPlayers","minPlayers","ScrollView","map","player","name","isAgent","_Fragment","require","CardRender","card","disabled","isRed","suit","TouchableOpacity","Object","assign","className","cursor","redText","hearts","diamonds","clubs","spades","width","margin","alignItems","opacity","defaultDesignProps","TABLE_SIZE","TABLE_MEMBERS_EXPANSION_FACTOR","CARD_RADIUS_FACTOR","PLAYER_RADIUS_FACTOR","MIN_GAME_AREA_HEIGHT","CARD_SIZE","PLAYER_INFO_MIN_WIDTH","GamePlay","gameState","onPlayCard","onExtraAction","position","alignSelf","display","headerRow","status","trickContainer","zIndex","trickTable","tableBackground","cardPositioner","trickCardContainer","handContainer","flexShrink","handWrapper","handContent","hand","flexGrow","extraActionContainer","gameArea","marginVertical","playAreaContainer","playerTable","playerInfo","minWidth","playerNameFixed","currentPlayerName","playerStats","trumpInfo","top","right","trumpTitle","trumpHolder","teamScoreContainer","teamScoreCard","playerTeamCard","teamName","teamScore","playerTeamScore","currentPlayerIndex","public","isCurrentPlayer","isResolvingTrick","gameSpecificData","private","currentTrick","canToggle","trumpCard","teams","gamePoints","playerTeamIndex","findIndex","team","includes","windowWidth","Dimensions","windowHeight","responsiveStyles","getResponsiveStyles","designProps","length","isPlayerTeam","minHeight","renderTrumpInfo","trumpHolderName","find","p","renderCurrentTrick","myPlayerIndex","numPlayers","CARD_RADIUS","getCardPosition","playerIndex","relativePos","angle","Math","PI","transform","translateX","cos","translateY","sin","rotate","cardPlayerId","renderPlayers","PLAYER_RADIUS","getPlayerPosition","playerScore","scores","score","horizontal","contentContainerStyle","isHighWins","maxHeight","maxWidth","GameEnd","gamePointsReversed","scoreList","teamRow","playerTeamRow","winnerRow","rankAndTeam","rank","marginRight","teamMembers","teamTitle","marginLeft","playerTeamText","points","sortedTeams","teamIndex","sort","a","b","isWinner","memberId","GamePhase","ConfirmDialog","visible","message","onConfirm","onCancel","Modal","transparent","animationType","onRequestClose","overlay","dialog","button","cancelButton","buttonText","confirmButton","marginHorizontal","LeaveGameButton","showConfirm","setShowConfirm","useNavigation","leaveButton","reset","routes","GameScreen","route","params","setGameState","screenState","setScreenState","mode","showLeaveConfirm","setShowLeaveConfirm","useFocusEffect","useCallback","onBackPress","BackHandler","addEventListener","setOptions","headerLeft","removeEventListener","useEffect","handleNotInGame","prev","phase","handleAddAgent","handleStartGame","handlePlayCard","handleExtraAction","handleKickPlayer","trick","scoreboard","FINISHED","owner","GAME_TYPES","GameCreationScreen","setGameType","formGroup","label","picker","Picker","selectedValue","onValueChange","itemValue","game","Item","JoinGameScreen","setGameId","text","ThemeToggleButton","accessibilityLabel","accessibilityRole","Ionicons","size","WebStack","createStackNavigator","createNativeStackNavigator","AppContent","Stack","navigationTheme","DefaultTheme","background","border","primary","StatusBar","barStyle","NavigationContainer","theme","Navigator","initialRouteName","screenOptions","headerShown","headerStyle","headerTitleStyle","headerTintColor","headerRight","Screen","component","options","registerRootComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","keys","every","key","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}