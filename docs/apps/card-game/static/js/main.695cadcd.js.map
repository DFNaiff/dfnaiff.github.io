{"version":3,"file":"static/js/main.695cadcd.js","mappings":"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","sources":["src/shared/types/actions.ts","src/config/env.ts","src/services/socket.service.ts","src/theme/ThemeContext.tsx","src/screens/LoginScreen.tsx","src/screens/HomeScreen.tsx","src/components/GameManagement.tsx","src/components/Card.tsx","src/components/GamePlay.tsx","src/components/GameEnd.tsx","src/shared/types/game-state.ts","src/components/ConfirmDialog.tsx","src/components/LeaveGameButton.tsx","src/components/ShareGameLink.tsx","src/screens/GameScreen.tsx","src/screens/GameCreationScreen.tsx","src/screens/JoinGameScreen.tsx","src/components/ThemeToggleButton.tsx","App.tsx","index.ts","webpack://web/./src/components/Card.web.css?a5d3","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { AvailableGames } from './game-state';\n\n// Authentication Actions\nexport enum AuthActions {\n    LOGIN = 'auth/login',\n    LOGOUT = 'auth/logout',\n    HEARTBEAT = 'auth:heartbeat'\n}\n\nexport type LoginPayload = {\n    username: string;\n}\n\nexport type LoginResponse = {\n    success: boolean;\n    error?: string;\n    userId?: string;\n}\n\n// Main Service Actions\nexport enum MainActions {\n    CREATE_GAME = 'main/createGame',\n    JOIN_GAME = 'main/joinGame',\n    LEAVE_GAME = 'main/leaveGame'\n}\n\nexport type CreateGamePayload = {\n    gameType: AvailableGames;\n}\n\nexport type JoinGamePayload = {\n    gameId: string;\n}\n\n// Game Administrative Actions\nexport enum GameAdminActions {\n    ADD_AGENT = 'game/admin/addAgent',\n    START_GAME = 'game/admin/startGame',\n    KICK_PLAYER = 'game/admin/kickPlayer',\n    LEAVE_GAME = 'game/admin/leaveGame',\n    REORDER_PLAYER = 'game/admin/reorderPlayer'\n}\n\nexport type KickPlayerPayload = {\n    playerId: string;\n}\n\n// Game Play Actions\nexport enum GamePlayActions {\n    PLAY_CARD = 'game/play/playCard',\n    EXTRA_ACTION = 'game/play/extraAction'\n}\n\nexport interface PlayCardPayload {\n    cardIndex: number;\n    gameId: string;\n}\n\nexport interface ExtraActionPayload {\n    actionType: string;\n    actionData: Record<string, unknown>;\n    gameId: string;\n}\n\n// Server Broadcast Types\nexport enum BroadcastTypes {\n    STATE = 'broadcast/state',\n    GAME_ERROR = 'broadcast/gameError',\n    GAME_ENDED = 'broadcast/gameEnded',\n    GAME_DELETED = 'broadcast/gameDeleted',\n    NOT_IN_GAME = 'broadcast/notInGame'\n}\n\nexport interface GameEndedPayload {\n    gameId: string;\n    winner?: string;\n}\n\nexport interface GameErrorPayload {\n    gameId: string;\n    error: string;\n}","const ENV = {\n    development: {\n      socketUrl: 'http://localhost:3000',\n      socketPath: '/socket.io/',\n    },\n    production: {\n      socketUrl: 'https://suecatatau-server-production.up.railway.app',\n      socketPath: '/socket.io/',\n    }\n  };\n  \n  // In development, the app can connect to your local server\n  // In production, it will connect to the Railway server\n  const getEnvironment = () => {\n    if (__DEV__) {\n      return ENV.development;\n    }\n    return ENV.production;\n  };\n  \n  export default getEnvironment();","import { io, Socket } from 'socket.io-client';\nimport { AvailableGames } from '../shared/types/game-state';\nimport { AuthActions, GamePlayActions, GameAdminActions, MainActions } from '../shared/types/actions';\nimport { BroadcastTypes } from '../shared/types/actions';\nimport { GameBroadcastState } from '../shared/types/game-state';\nimport config from '../config/env';\n\ninterface LoginResponse {\n    success: boolean;\n    userId?: string;\n    error?: string;\n}\n\ninterface GameResponse {\n    success: boolean;\n    gameId?: string;\n    error?: string;\n}\n\nexport class SocketService {\n    private socket: Socket;\n    private static instance: SocketService;\n    private currentUser: { username: string; userId: string } | null = null;\n    private reconnectAttempts: number = 0;\n    private readonly MAX_RECONNECT_ATTEMPTS = 5;\n    private heartbeatInterval: NodeJS.Timeout | null = null;\n    private readonly HEARTBEAT_INTERVAL = 60 * 1000; // Send heartbeat every minute\n    private eventHandlers: Map<string, Function[]> = new Map();\n\n    private constructor() {\n        this.socket = io(config.socketUrl, {\n            transports: ['websocket', 'polling'],\n            path: config.socketPath,\n            autoConnect: false,\n            reconnection: true,\n            reconnectionAttempts: this.MAX_RECONNECT_ATTEMPTS,\n            reconnectionDelay: 1000,\n            timeout: 10000\n        });\n\n        console.log('SocketService constructor called, connecting to:', config.socketUrl);\n        \n        this.setupSocketListeners();\n    }\n\n    private setupSocketListeners() {\n        this.socket.on('connect', () => {\n            console.log('Socket CONNECTED, ID:', this.socket.id);\n            this.reconnectAttempts = 0;\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Socket DISCONNECTED, was ID:', this.socket.id, 'Reason:', reason);\n            if (reason === 'io server disconnect') {\n                // the disconnection was initiated by the server, reconnect manually\n                this.socket.connect();\n            }\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('Connection error:', error);\n            this.reconnectAttempts++;\n            \n            if (this.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {\n                console.error('Max reconnection attempts reached');\n                this.socket.disconnect();\n            }\n        });\n\n        this.socket.on('reconnect', (attemptNumber) => {\n            console.log('Socket RECONNECTED, new ID:', this.socket.id, 'Attempt:', attemptNumber);\n        });\n\n        this.socket.on('reconnect_attempt', (attemptNumber) => {\n            console.log('Socket RECONNECTING, attempt:', attemptNumber);\n        });\n\n        this.socket.on(BroadcastTypes.STATE, (state: GameBroadcastState) => {\n            console.log('Received state update for socket ID:', this.socket.id);\n        });\n\n        this.socket.on(BroadcastTypes.GAME_DELETED, (data: { gameId: string }) => {\n            console.log('Received game deleted event for socket ID:', this.socket.id, 'Game ID:', data.gameId);\n        });\n\n        this.socket.on(BroadcastTypes.NOT_IN_GAME, (data: { gameId: string, playerId: string }) => {\n            console.log('Received not in game event for socket ID:', this.socket.id, 'Game ID:', data.gameId, 'Player ID:', data.playerId);\n            \n            this.triggerEvent(BroadcastTypes.NOT_IN_GAME, data);\n        });\n\n        this.socket.on('forceDisconnect', (data: { reason: string }) => {\n            console.log('[Client Force Disconnect]', {\n                socketId: this.socket.id,\n                userId: this.currentUser?.userId,\n                reason: data.reason,\n                timestamp: new Date().toISOString()\n            });\n            this.clearHeartbeat();\n            this.clearCurrentUser();\n            this.socket.disconnect();\n        });\n    }\n\n    public static getInstance(): SocketService {\n        if (!SocketService.instance) {\n            SocketService.instance = new SocketService();\n        }\n        return SocketService.instance;\n    }\n\n    public connect(playerName: string): Promise<void> {\n        console.log('Connect called, current socket ID:', this.socket.id);\n        return new Promise((resolve, reject) => {\n            if (this.socket.connected) {\n                console.log('Socket already connected with ID:', this.socket.id);\n                resolve();\n                return;\n            }\n            \n            this.socket.connect();\n            this.socket.on('connect', () => {\n                console.log('Connected to server with ID:', this.socket.id);\n                resolve();\n            });\n            \n            this.socket.on('connect_error', (error) => {\n                reject(error);\n            });\n        });\n    }\n\n    public createGame(playerName: string, gameType: AvailableGames, gameName: string): Promise<GameResponse> {\n        return new Promise<GameResponse>((resolve, reject) => {\n            console.log('Emitting createGame event with playerName:', playerName,\n                'and gameType:', gameType);\n\n            const timeout = setTimeout(() => {\n                reject(new Error('createGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.CREATE_GAME, { playerName, gameType, gameName}, (response: GameResponse) => {\n                console.log('Received response from createGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public joinGame(gameId: string, playerName: string): Promise<{ success: boolean; error?: string }> {\n        return new Promise<{ success: boolean; error?: string }>((resolve, reject) => {\n            console.log('Emitting joinGame event with gameId:', gameId, 'playerName:', playerName);\n\n            // Add timeout to detect if callback never happens\n            const timeout = setTimeout(() => {\n                reject(new Error('joinGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.JOIN_GAME, { gameId, playerName }, (response: { success: boolean }) => {\n                console.log('Received response from joinGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            // Add error handler\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public addAgent(gameId: string): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GameAdminActions.ADD_AGENT, { gameId }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public startGame(gameId: string): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GameAdminActions.START_GAME, { gameId }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public playCard(gameId: string, cardIndex: number): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GamePlayActions.PLAY_CARD, { gameId, cardIndex }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public onGameState(callback: (state: GameBroadcastState) => void) {\n\n        console.log('Setting up game state listener for socket:', {\n            socketId: this.socket.id,\n            userId: this.currentUser?.userId,\n            connected: this.socket.connected\n        });\n    \n        this.socket.onAny((eventName, ...args) => {\n            console.log('Received event:', eventName, 'Socket ID:', this.socket.id, 'Args:', args);\n        });\n    \n        this.socket.on(BroadcastTypes.STATE, (state: GameBroadcastState) => {\n            console.log('Received game state for socket:', {\n                socketId: this.socket.id,\n                userId: this.currentUser?.userId,\n                state\n            });\n            callback(state);\n        });    \n\n        this.socket.on('connect', () => {\n            console.log('Socket connected:', this.socket.id);\n        });\n\n        this.socket.on('disconnect', () => {\n            console.log('Socket disconnected');\n        });\n    }\n\n    public disconnect() {\n        this.socket.disconnect();\n    }\n\n    public setupHeartbeat() {\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n            console.log('[Client Heartbeat] Cleared existing heartbeat interval');\n        }\n\n        console.log('[Client Heartbeat] Setting up new heartbeat interval');\n        this.heartbeatInterval = setInterval(() => {\n            if (this.socket.connected && this.currentUser) {\n                console.log('[Client Heartbeat] Sending heartbeat');\n\n                // Set a timeout to detect if the heartbeat response never comes back\n                const heartbeatTimeout = setTimeout(() => {\n                    console.warn('[Client Heartbeat] Heartbeat response timeout - connection may be stale');\n                    // Force reconnection attempt\n                    this.socket.disconnect();\n                    this.reconnect().catch(error => {\n                        console.error('Failed to reconnect after heartbeat timeout:', error);\n                    });\n                }, 10000); // 10 second timeout\n\n                this.socket.emit(AuthActions.HEARTBEAT, {}, (response: { success: boolean }) => {\n                    clearTimeout(heartbeatTimeout);\n                    console.log('[Client Heartbeat] Received response:', {\n                        socketId: this.socket.id,\n                        userId: this.currentUser?.userId,\n                        success: response.success,\n                        timestamp: new Date().toISOString()\n                    });\n\n                    if (!response.success) {\n                        console.warn('[Client Heartbeat] Failed, initiating logout');\n                        this.logout();\n                    }\n                });\n            } else {\n                console.log('[Client Heartbeat] Skipped: Socket disconnected or no user', {\n                    connected: this.socket.connected,\n                    hasUser: !!this.currentUser\n                });\n            }\n        }, this.HEARTBEAT_INTERVAL);\n    }\n\n    private clearHeartbeat() {\n        if (this.heartbeatInterval) {\n            console.log('[Client Heartbeat] Clearing heartbeat interval');\n            clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = null;\n        }\n    }\n\n    public login(username: string): Promise<LoginResponse> {\n        return new Promise((resolve) => {\n            this.socket.connect();\n            console.log('Logging in with socket ID:', this.socket.id);\n            \n            this.socket.emit(AuthActions.LOGIN, { username }, (response: LoginResponse) => {\n                console.log('Login response received for socket:', {\n                    socketId: this.socket.id,\n                    response\n                });\n                if (response.success) {\n                    this.setCurrentUser(username, response.userId!);\n                    this.setupHeartbeat(); // Start heartbeat after successful login\n                } else {\n                    this.socket.disconnect();\n                }\n                resolve(response);\n            });\n        });\n    }\n\n    public extraAction(gameId: string, actionType: string, actionData: any): Promise<GameResponse> {\n        return new Promise((resolve) => {\n            this.socket.emit(GamePlayActions.EXTRA_ACTION, { \n                gameId, \n                actionType, \n                actionData \n            }, (response: GameResponse) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public setCurrentUser(username: string, userId: string) {\n        this.currentUser = { username, userId };\n    }\n\n    public getCurrentUser() {\n        return this.currentUser;\n    }\n\n    public clearCurrentUser() {\n        this.currentUser = null;\n    }\n\n    public async logout(): Promise<void> {\n        this.clearHeartbeat(); // Stop heartbeat before logout\n        if (this.currentUser) {\n            await new Promise<void>((resolve) => {\n                this.socket.emit(AuthActions.LOGOUT, {}, () => {\n                    this.clearCurrentUser();\n                    this.socket.disconnect();\n                    resolve();\n                });\n            });\n        }\n    }\n\n    public leaveGame(gameId: string): Promise<{ success: boolean }> {\n        return new Promise((resolve, reject) => {\n            console.log('Emitting leaveGame event with gameId:', gameId);\n\n            const timeout = setTimeout(() => {\n                reject(new Error('leaveGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.LEAVE_GAME, { gameId }, (response: { success: boolean }) => {\n                console.log('Received response from leaveGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public kickPlayer(gameId: string, playerId: string): void {\n        this.socket.emit(GameAdminActions.KICK_PLAYER, { gameId, playerId });\n    }\n\n    public on(event: string, callback: Function) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event)?.push(callback);\n    }\n    \n    public off(event: string, callback: Function) {\n        if (!this.eventHandlers.has(event)) return;\n        \n        const handlers = this.eventHandlers.get(event) || [];\n        const index = handlers.indexOf(callback);\n        if (index !== -1) {\n            handlers.splice(index, 1);\n        }\n    }\n    \n    private triggerEvent(event: string, ...args: any[]) {\n        const handlers = this.eventHandlers.get(event) || [];\n        handlers.forEach(handler => handler(...args));\n    }\n\n    public isConnected(): boolean {\n        return this.socket.connected;\n    }\n    \n    public reconnect(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (this.socket.connected) {\n                console.log('Socket already connected, no need to reconnect');\n                resolve();\n                return;\n            }\n            \n            console.log('Attempting to reconnect socket...');\n            \n            // Set timeout for reconnection attempt\n            const timeout = setTimeout(() => {\n                reject(new Error('Socket reconnection timeout'));\n            }, 5000);\n            \n            const onConnect = () => {\n                clearTimeout(timeout);\n                this.socket.off('connect', onConnect);\n                this.socket.off('connect_error', onError);\n                \n                // If we have a current user, reestablish authentication\n                if (this.currentUser) {\n                    this.login(this.currentUser.username)\n                        .then(response => {\n                            if (response.success) {\n                                console.log('Re-authenticated after reconnect');\n                                resolve();\n                            } else {\n                                reject(new Error('Failed to re-authenticate after reconnection'));\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n            \n            const onError = (error: any) => {\n                clearTimeout(timeout);\n                this.socket.off('connect', onConnect);\n                this.socket.off('connect_error', onError);\n                reject(error);\n            };\n            \n            this.socket.on('connect', onConnect);\n            this.socket.on('connect_error', onError);\n            \n            // Connect the socket\n            this.socket.connect();\n        });\n    }\n\n    public getSocket(): Socket {\n        return this.socket;\n    }\n\n    public reorderPlayer(gameId: string, playerId: string, direction: 'up' | 'down') {\n        this.socket.emit(GameAdminActions.REORDER_PLAYER, {\n            gameId,\n            playerId,\n            direction\n        });\n    }\n\n    public isLoggedIn(): boolean {\n        return !!this.currentUser;\n    }\n}\n","// Theme context with provider for theme switching\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\nexport type ThemeType = 'light' | 'dark';\n\n// Theme color interface containing all colors used in the app\nexport interface ThemeColors {\n  // Card colors\n  cardBackground: string;\n  cardBorder: string;\n  cardTextBlack: string;\n  cardTextRed: string;\n  \n  // Dialog colors\n  dialogOverlay: string;\n  dialogBackground: string;\n  dialogCancelButton: string;\n  dialogConfirmButton: string;\n  dialogButtonText: string;\n  \n  // Button colors\n  leaveButtonBackground: string;\n  leaveButtonText: string;\n  \n  // Game UI colors\n  playerInfoBackground: string;\n  playerInfoBorder: string;\n  currentPlayerText: string;\n  playerStatsText: string;\n  trumpInfoBackground: string;\n  trumpInfoBorder: string;\n  teamScoreCardBackground: string;\n  teamScoreCardBorder: string;\n  \n  // Input & form colors\n  inputBorder: string;\n  inputBackground: string;\n  inputText: string;\n  placeholderText: string;\n  \n  // Game table colors\n  tableFelt: string;\n  tableEdge: string;\n  \n  // Status text colors\n  statusText: string;\n  subtitleText: string;\n  \n  // Team score colors\n  playerTeamBackground: string;\n  playerTeamBorder: string;\n  teamScoreText: string;\n  playerTeamScoreText: string;\n  accent: string;\n  \n  // Home screen colors\n  welcomeText: string;\n  logoutButton: string;\n  primaryButton: string;\n  primaryButtonText: string;\n  \n  // App background colors\n  appBackground: string;\n  containerBackground: string;\n  pickerBackground: string;\n  titleText: string;\n  \n  // New colors\n  winningPlayerBackground: string;\n  winningPlayerBorder: string;\n}\n\n// Light theme (default - exactly matches current hardcoded colors)\nexport const lightColors: ThemeColors = {\n  // Card colors\n  cardBackground: 'white',\n  cardBorder: '#ddd',\n  cardTextBlack: 'black',\n  cardTextRed: 'red',\n  \n  // Dialog colors\n  dialogOverlay: 'rgba(0, 0, 0, 0.5)',\n  dialogBackground: 'white',\n  dialogCancelButton: '#666',\n  dialogConfirmButton: '#d32f2f',\n  dialogButtonText: 'white',\n  \n  // Button colors\n  leaveButtonBackground: '#d32f2f',\n  leaveButtonText: 'white',\n  \n  // Game UI colors\n  playerInfoBackground: 'rgba(255, 255, 255, 0.9)',\n  playerInfoBorder: '#ccc',\n  currentPlayerText: '#4CAF50',\n  playerStatsText: '#666',\n  trumpInfoBackground: 'rgba(255, 255, 255, 0.9)',\n  trumpInfoBorder: '#ccc',\n  teamScoreCardBackground: 'rgba(255, 255, 255, 0.6)',\n  teamScoreCardBorder: 'rgba(0, 0, 0, 0.1)',\n  \n  // Input & form colors\n  inputBorder: '#ddd',\n  inputBackground: 'white',\n  inputText: 'black',\n  placeholderText: 'gray',\n  \n  // Game table colors\n  tableFelt: '#1B5E20',\n  tableEdge: '#4A3211',\n  \n  // Status text colors\n  statusText: '#000000',\n  subtitleText: '#000000',\n  \n  // Team score colors\n  playerTeamBackground: 'rgba(220, 242, 220, 0.7)',\n  playerTeamBorder: 'rgba(76, 175, 80, 0.3)',\n  teamScoreText: '#333',\n  playerTeamScoreText: '#1B5E20',\n  accent: '#66bb6a',\n  \n  // Home screen colors\n  welcomeText: '#000000',\n  logoutButton: '#d32f2f',\n  primaryButton: '#2196f3',\n  primaryButtonText: 'white',\n  \n  // App background colors\n  appBackground: '#e8f5e9', // Light mint green background\n  containerBackground: '#e8f5e9', // Very light sage green\n  pickerBackground: '#e0f2f1', // Subtle teal tint for picker\n  titleText: '#000000', // Keeping text black as requested\n  \n  // New colors\n  winningPlayerBackground: '#4a9eff30',  // Semi-transparent blue\n  winningPlayerBorder: '#4a9eff',       // Solid blue\n};\n\n// Dark theme colors (for future use)\nexport const darkColors: ThemeColors = {\n  // Card colors\n  cardBackground: '#2c2c2c',\n  cardBorder: '#444',\n  cardTextBlack: '#e0e0e0',\n  cardTextRed: '#ff6b6b',\n  \n  // Dialog colors\n  dialogOverlay: 'rgba(0, 0, 0, 0.7)',\n  dialogBackground: '#2c2c2c',\n  dialogCancelButton: '#555',\n  dialogConfirmButton: '#b71c1c',\n  dialogButtonText: '#e0e0e0',\n  \n  // Button colors\n  leaveButtonBackground: '#b71c1c',\n  leaveButtonText: '#e0e0e0',\n  \n  // Game UI colors\n  playerInfoBackground: 'rgba(40, 40, 40, 0.9)',\n  playerInfoBorder: '#444',\n  currentPlayerText: '#66bb6a',\n  playerStatsText: '#aaa',\n  trumpInfoBackground: 'rgba(40, 40, 40, 0.9)',\n  trumpInfoBorder: '#444',\n  teamScoreCardBackground: 'rgba(40, 40, 40, 0.6)',\n  teamScoreCardBorder: 'rgba(255, 255, 255, 0.1)',\n  \n  // Input & form colors\n  inputBorder: '#444',\n  inputBackground: '#222',\n  inputText: '#e0e0e0',\n  placeholderText: '#aaa',\n  \n  // Game table colors\n  tableFelt: '#0c3912',\n  tableEdge: '#2A1901',\n  \n  // Status text colors\n  statusText: '#e0e0e0',\n  subtitleText: '#e0e0e0',\n  \n  // Team score colors\n  playerTeamBackground: 'rgba(40, 97, 40, 0.7)',\n  playerTeamBorder: 'rgba(76, 175, 80, 0.3)',\n  teamScoreText: '#e0e0e0',\n  playerTeamScoreText: '#66bb6a',\n  accent: '#66bb6a',\n  \n  // Home screen colors\n  welcomeText: '#e0e0e0',\n  logoutButton: '#b71c1c',\n  primaryButton: '#1565c0',\n  primaryButtonText: '#e0e0e0',\n  \n  // App background colors\n  appBackground: '#121212',\n  containerBackground: '#121212',\n  pickerBackground: '#333',\n  titleText: '#e0e0e0',\n  \n  // New colors\n  winningPlayerBackground: '#4a9eff30',  // Semi-transparent blue\n  winningPlayerBorder: '#4a9eff',       // Solid blue\n};\n\n// Define the shape of our theme context\ninterface ThemeContextType {\n  themeType: ThemeType;\n  colors: ThemeColors;\n  setThemeType: (type: ThemeType) => void;\n  toggleTheme: () => void;\n}\n\n// Create the context with default values\nconst ThemeContext = createContext<ThemeContextType>({\n  themeType: 'light',\n  colors: lightColors,\n  setThemeType: () => {},\n  toggleTheme: () => {},\n});\n\n// Theme provider component\nexport const ThemeProvider: React.FC<{children: ReactNode}> = ({ children }) => {\n  const [themeType, setThemeType] = useState<ThemeType>('light');\n  \n  // Get the colors based on the current theme type\n  const colors = themeType === 'light' ? lightColors : darkColors;\n  \n  // Function to toggle between light and dark themes\n  const toggleTheme = () => {\n    setThemeType(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ themeType, colors, setThemeType, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Custom hook to use the theme\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// For backward compatibility - export the light colors as the default\n// This ensures existing code that uses `import { colors } from '../theme/ThemeContext'` won't break\nexport const colors = lightColors;","import React, { useState, useEffect } from 'react';\nimport { View, TextInput, Button, StyleSheet, Text, Alert } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const LoginScreen = ({ navigation, route }: { navigation: any, route: any }) => {\n    const [username, setUsername] = useState('');\n    const socketService = SocketService.getInstance();\n    const { colors } = useTheme();\n    \n    // Extract gameId from route params if it exists\n    const gameId = route.params?.gameId;\n\n    useEffect(() => {\n        if (gameId) {\n            console.log('LoginScreen received gameId:', gameId);\n        }\n    }, [gameId]);\n\n    const handleLogin = async () => {\n        if (!username.trim()) {\n            Alert.alert('Error', 'Please enter a username');\n            return;\n        }\n\n        try {\n            console.log('Logging in with username:', username);\n            const response = await socketService.login(username);\n            \n            if (response.success) {\n                // Store the username globally in the SocketService\n                socketService.setCurrentUser(username, response.userId!);\n                console.log('Login successful.');\n                \n                // If we have a gameId from deep link, join game directly\n                if (gameId) {\n                    console.log('Joining game directly with ID:', gameId);\n                    try {\n                        await socketService.connect(username);\n                        const joinResponse = await socketService.joinGame(gameId, username);\n                        \n                        if (joinResponse.success) {\n                            navigation.replace('Game', { gameId, playerName: username });\n                        } else {\n                            // Show specific error message based on the error\n                            const errorMessage = joinResponse.error === 'Game not found or cannot join' \n                                ? 'The game you tried to join does not exist or is no longer available.'\n                                : 'Could not join the game. You will be redirected to the home screen.';\n                            \n                            Alert.alert(\n                                'Game Join Failed', \n                                errorMessage,\n                                [{ text: 'OK', onPress: () => navigation.replace('Home') }]\n                            );\n                        }\n                    } catch (error) {\n                        console.error('Error joining game:', error);\n                        Alert.alert(\n                            'Connection Error', \n                            'Failed to connect to the game server. Please try again later.',\n                            [{ text: 'OK', onPress: () => navigation.replace('Home') }]\n                        );\n                    }\n                } else {\n                    // Normal login flow\n                    navigation.replace('Home');\n                }\n            } else {\n                console.log('Login failed:', response.error || 'Username already taken');\n                // Show more helpful error message\n                const errorMessage = response.error || 'This username is already in use. Please choose a different one.';\n                Alert.alert('Login Failed', errorMessage);\n            }\n        } catch (error) {\n            console.error('Server connection error:', error);\n            Alert.alert(\n                'Connection Error', \n                'Could not connect to the server. Please check your internet connection and try again.'\n            );\n        }\n    };\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            justifyContent: 'center',\n            backgroundColor: colors.containerBackground,\n        },\n        title: {\n            fontSize: 24,\n            textAlign: 'center',\n            marginBottom: 30,\n            color: colors.titleText,\n        },\n        input: {\n            borderWidth: 1,\n            borderColor: colors.inputBorder,\n            backgroundColor: colors.inputBackground,\n            padding: 10,\n            marginBottom: 20,\n            borderRadius: 5,\n            color: colors.titleText,\n        },\n        buttonContainer: {\n            marginTop: 10,\n        },\n        subtitle: {\n            fontSize: 16,\n            marginBottom: 10,\n        }\n    });\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>\n                {gameId ? 'Enter Your Username to Join Game' : 'Enter Your Username'}\n            </Text>\n            {gameId && (\n                <Text style={[styles.subtitle, { color: colors.subtitleText }]}>\n                    You're joining game: {gameId}\n                </Text>\n            )}\n            <TextInput\n                style={styles.input}\n                onChangeText={setUsername}\n                value={username}\n                placeholder=\"Username\"\n                placeholderTextColor={colors.playerStatsText}\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n            />\n            <View style={styles.buttonContainer}>\n                <Button \n                    title={gameId ? \"Login & Join Game\" : \"Login\"} \n                    onPress={handleLogin} \n                    color={colors.primaryButton}\n                />\n            </View>\n        </View>\n    );\n}; ","import React from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const HomeScreen: React.FC<{ navigation: any }> = ({ navigation }) => {\n    const { colors, toggleTheme, themeType } = useTheme();\n\n    const socketService = SocketService.getInstance();\n    const username = socketService.getCurrentUser()?.username;\n\n    const handleCreateGame = () => {\n        console.log('Creating game');\n        navigation.navigate('GameCreation', { playerName: username });\n    };\n\n    const handleJoinGame = () => {\n        console.log('Joining game');\n        navigation.navigate('JoinGame', { playerName: username });\n    };\n\n    const handleLogout = async () => {\n        await socketService.logout();\n        console.log('Logging out');\n        navigation.replace('Login');\n    };\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            justifyContent: 'center',\n        },\n        welcome: {\n            fontSize: 24,\n            textAlign: 'center',\n            marginBottom: 30,\n            color: colors.welcomeText,\n        },\n        buttonContainer: {\n            gap: 10,\n        },\n    });\n    \n    return (\n        <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n            <Text style={styles.welcome}>Welcome, {username}!</Text>\n            <View style={styles.buttonContainer}>\n                <Button \n                    title=\"Create Game\" \n                    onPress={handleCreateGame}\n                    color={colors.primaryButton}\n                />\n                <Button \n                    title=\"Join Game\" \n                    onPress={handleJoinGame}\n                    color={colors.primaryButton}\n                />\n                <Button \n                    title=\"Logout\" \n                    onPress={handleLogout} \n                    color={colors.logoutButton}\n                />\n            </View>\n        </View>\n    );\n};\n","import React from 'react';\nimport { View, Text, Button, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport interface GameManagementProps {\n    gameId: string;\n    onAddAgent: () => void;\n    onStartGame: () => void;\n    playerCount: number;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n        isOwner?: boolean;\n    }>;\n    isOwner: boolean;\n    onKickPlayer: (playerId: string) => void;\n    onReorderPlayer: (playerId: string, direction: 'up' | 'down') => void;\n    gameCharacteristics: {\n        minPlayers: number;\n        maxPlayers: number;\n        playerGroupSize: number;\n        extraActions: string[];\n        gamePointsReversed: boolean;\n    };\n}\n\nexport const GameManagement: React.FC<GameManagementProps> = ({\n    gameId,\n    onAddAgent,\n    onStartGame,\n    playerCount,\n    players,\n    isOwner,\n    onKickPlayer,\n    onReorderPlayer,\n    gameCharacteristics\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 10,\n        },\n        controls: {\n            flexDirection: 'column',\n            justifyContent: 'space-around',\n            marginTop: 20,\n        },\n        playerListContainer: {\n            marginTop: 10,\n            marginBottom: 10,\n            height: 160,\n            borderWidth: 1,\n            borderColor: '#ddd',\n            borderRadius: 5,\n        },\n        playerList: {\n            flex: 1,\n        },\n        playerRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            paddingVertical: 8,\n            paddingHorizontal: 10,\n            borderBottomWidth: 1,\n            borderBottomColor: '#eee',\n            alignItems: 'center',\n        },\n        playerName: {\n            fontSize: 16,\n            flex: 1,\n        },\n        playerActions: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'flex-end',\n        },\n        actionButton: {\n            paddingHorizontal: 2,\n        },\n        kickButton: {\n            color: 'red',\n            fontSize: 18,\n            fontWeight: 'bold',\n        },\n        moveButton: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            width: 18,\n            textAlign: 'center',\n        },\n        upButton: {\n            color: 'green',\n        },\n        downButton: {\n            color: 'blue',\n        },\n        buttonSpacer: {\n            marginTop: 10,\n        }\n    });\n\n    const hasCorrectNumberOfPlayers = playerCount >= (gameCharacteristics?.minPlayers || 2) && \n                                      playerCount <= (gameCharacteristics?.maxPlayers || Infinity) && \n                                      (playerCount % (gameCharacteristics?.playerGroupSize || 1) === 0);\n    \n    return (\n        <View style={styles.container}>\n            <Text style={[styles.subtitle, { color: colors.titleText }]}>Game Setup</Text>\n            <Text style={{ color: colors.statusText }}>Players: {playerCount} (Min: {gameCharacteristics?.minPlayers || 2})</Text>\n            \n            <View style={styles.playerListContainer}>\n                <ScrollView style={styles.playerList}>\n                    {players.map((player, index) => (\n                        <View key={player.id} style={styles.playerRow}>\n                            <Text style={[styles.playerName, { color: colors.statusText }]}>\n                                {player.name} {player.isAgent ? '(AI)' : ''} {player.isOwner ? '(Owner)' : ''}\n                            </Text>\n                            {isOwner && !player.isOwner && (\n                                <View style={styles.playerActions}>\n                                    <TouchableOpacity\n                                        onPress={() => onReorderPlayer(player.id, 'up')}\n                                        style={styles.actionButton}\n                                    >\n                                        <Text style={[styles.moveButton, styles.upButton]}>↑</Text>\n                                    </TouchableOpacity>\n                                    <TouchableOpacity\n                                        onPress={() => onReorderPlayer(player.id, 'down')}\n                                        style={styles.actionButton}\n                                    >\n                                        <Text style={[styles.moveButton, styles.downButton]}>↓</Text>\n                                    </TouchableOpacity>\n                                    <TouchableOpacity \n                                        onPress={() => onKickPlayer(player.id)}\n                                        style={styles.actionButton}\n                                    >\n                                        <Text style={styles.kickButton}>✕</Text>\n                                    </TouchableOpacity>\n                                </View>\n                            )}\n                        </View>\n                    ))}\n                </ScrollView>\n            </View>\n            \n            <View style={styles.controls}>\n                {isOwner && (\n                    <>\n                        <Button title=\"Add AI Player\" onPress={onAddAgent} />\n                        {hasCorrectNumberOfPlayers && (\n                            <View style={styles.buttonSpacer}>\n                                <Button title=\"Start Game\" onPress={onStartGame} />\n                            </View>\n                        )}\n                    </>\n                )}\n            </View>\n        </View>\n    );\n};","import React from 'react';\nimport { TouchableOpacity, Text, StyleSheet, Platform } from 'react-native';\nimport { Card } from '../shared/types/game-state';\nimport { colors } from '../theme/ThemeContext';\n\nif (Platform.OS === 'web') {\n    require('./Card.web.css');\n}\n\ninterface CardProps {\n    card: Card;\n    onPress?: () => void;\n    disabled?: boolean;\n}\n\nexport const CardRender: React.FC<CardProps> = ({ card, onPress, disabled }) => {\n    const suitSymbols = {\n        hearts: '♥',\n        diamonds: '♦',\n        clubs: '♣',\n        spades: '♠'\n    };\n\n    const valueMap: { [key: number]: string } = {\n        11: 'J',\n        12: 'Q',\n        13: 'K',\n        14: 'A'\n    };\n\n    const isRed = card.suit === 'hearts' || card.suit === 'diamonds';\n\n    return (\n        <TouchableOpacity\n            style={[styles.card, disabled && styles.disabled]}\n            // @ts-ignore\n            className={Platform.OS === 'web' ? 'card-hover' : undefined}\n            onPress={onPress}\n            disabled={disabled}\n            // @ts-ignore\n            {...(Platform.OS === 'web' && {\n                style: [\n                    styles.card,\n                    disabled && styles.disabled,\n                    { cursor: 'pointer' }\n                ]\n            })}\n        >\n            <Text style={[styles.value, isRed && styles.redText]}>\n                {valueMap[card.value] || card.value}\n            </Text>\n            <Text style={[styles.suit, isRed && styles.redText]}>\n                {suitSymbols[card.suit]}\n            </Text>\n        </TouchableOpacity>\n    );\n};\n\nconst styles = StyleSheet.create({\n    card: {\n        width: 60,\n        height: 90,\n        backgroundColor: colors.cardBackground,\n        borderRadius: 8,\n        borderWidth: 1,\n        borderColor: colors.cardBorder,\n        padding: 5,\n        margin: 2,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    disabled: {\n        opacity: 0.5,\n    },\n    value: {\n        fontSize: 24,\n        color: colors.cardTextBlack,\n    },\n    suit: {\n        fontSize: 32,\n        color: colors.cardTextBlack,\n    },\n    redText: {\n        color: colors.cardTextRed,\n    },\n});","import React from 'react';\nimport { View, Button, Text, ScrollView, StyleSheet, ViewStyle, Dimensions } from 'react-native';\nimport { CardRender } from './Card';\nimport { GameBroadcastState } from '../shared/types/game-state';\nimport { Card } from '../shared/types/game-state';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface GamePlayProps {\n    gameState: GameBroadcastState;\n    playerName: string;\n    playerId: string;\n    onPlayCard: (index: number) => void;\n    onExtraAction: (actionType: string, actionData: any) => void;\n}\n\n// Game design properties to control layout\ninterface GameDesignProps {\n    TABLE_SIZE: number;                  // Size of the table in px\n    TABLE_MEMBERS_EXPANSION_FACTOR: number; // Expansion factor for spacing elements\n    CARD_RADIUS_FACTOR: number;          // Position factor for cards from center\n    PLAYER_RADIUS_FACTOR: number;        // Position factor for players from center  \n    MIN_GAME_AREA_HEIGHT: number;        // Minimum height for game area\n    CARD_SIZE: {width: number, height: number}; // Size of cards\n    PLAYER_INFO_MIN_WIDTH: number;       // Minimum width for player info boxes\n}\n\n// Default design properties\nconst defaultDesignProps: GameDesignProps = {\n    TABLE_SIZE: 280,\n    TABLE_MEMBERS_EXPANSION_FACTOR: 2.5, // 200% expansion as requested\n    CARD_RADIUS_FACTOR: 0.5,           // Cards at 25% of table radius\n    PLAYER_RADIUS_FACTOR: 0.5,          // Players at 70% of table radius * expansion factor\n    MIN_GAME_AREA_HEIGHT: 350,\n    CARD_SIZE: {width: 60, height: 85},\n    PLAYER_INFO_MIN_WIDTH: 80\n};\n\nexport const GamePlay: React.FC<GamePlayProps> = ({\n    gameState,\n    playerName,\n    playerId,\n    onPlayCard,\n    onExtraAction\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            position: 'relative',\n            padding: 10,\n            width: '100%',\n            alignSelf: 'center',\n            display: 'flex',\n            flexDirection: 'column',\n        },\n        headerRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: 10,\n        },\n        status: {\n            fontSize: 16,\n            flex: 1,\n            color: colors.statusText,\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 5,\n            color: colors.subtitleText,\n        },\n        trickContainer: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 1,\n        },\n        trickTable: {\n            position: 'relative',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        tableBackground: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            borderRadius: 1000,\n            backgroundColor: colors.tableFelt,\n            borderWidth: 4,\n            borderColor: colors.tableEdge,\n        },\n        cardPositioner: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        trickCardContainer: {\n            position: 'absolute',\n            alignItems: 'center',\n        },\n        handContainer: {\n            width: '100%',\n            marginTop: 5,\n            marginBottom: 10,\n            flexShrink: 0,\n        },\n        handWrapper: {\n            width: '100%',\n            height: 100,  // Fixed height\n        },\n        handContent: {\n            alignItems: 'center',\n            paddingHorizontal: 5,\n        },\n        hand: {\n            flexGrow: 0,\n        },\n        extraActionContainer: {\n            marginTop: 10,\n            marginBottom: 10,\n        },\n        gameArea: {\n            flex: 1,\n            position: 'relative',\n            marginVertical: 10,\n        },\n        playAreaContainer: {\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        playerTable: {\n            position: 'absolute',\n            width: 0,  // Set to 0 to ensure proper centering\n            height: 0,  // Set to 0 to ensure proper centering\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 2,\n        },\n        playerInfo: {\n            position: 'absolute',\n            alignItems: 'center',\n            backgroundColor: colors.playerInfoBackground,\n            padding: 8,\n            borderRadius: 8,\n            minWidth: 80,\n            borderWidth: 1,\n            borderColor: colors.playerInfoBorder,\n        },\n        winningPlayerInfo: {\n            backgroundColor: colors.winningPlayerBackground || '#4a9eff30', // fallback color if theme doesn't define it\n            borderColor: colors.winningPlayerBorder || '#4a9eff',\n        },\n        playerNameFixed: {\n            fontSize: 12, // Smaller font\n            fontWeight: 'bold',\n            marginBottom: 2,\n        },\n        currentPlayerName: {\n            color: colors.currentPlayerText,\n            fontWeight: 'bold',\n        },\n        playerStats: {\n            fontSize: 10, // Smaller font\n            color: colors.playerStatsText,\n        },\n        trumpInfo: {\n            position: 'absolute',\n            top: 5,\n            right: 5,\n            alignItems: 'center',\n            backgroundColor: colors.trumpInfoBackground,\n            padding: 5, // Reduced padding\n            borderRadius: 6,\n            borderWidth: 1,\n            borderColor: colors.trumpInfoBorder,\n            zIndex: 10,\n        },\n        trumpTitle: {\n            fontSize: 14,\n            fontWeight: 'bold',\n            marginBottom: 4,\n        },\n        trumpHolder: {\n            fontSize: 12,\n            color: colors.playerStatsText,\n            marginTop: 4,\n        },\n        teamScoreContainer: {\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n            gap: 5, // Reduced gap\n        },\n        teamScoreCard: {\n            backgroundColor: colors.teamScoreCardBackground,\n            borderRadius: 4,\n            paddingVertical: 3,\n            paddingHorizontal: 6,\n            minWidth: 50,\n            alignItems: 'center',\n            borderWidth: 1,\n            borderColor: colors.teamScoreCardBorder,\n        },\n        playerTeamCard: {\n            backgroundColor: colors.playerTeamBackground,\n            borderColor: colors.playerTeamBorder,\n        },\n        teamName: {\n            fontSize: 12,\n            fontWeight: '500',\n            textAlign: 'center',\n        },\n        teamScore: {\n            fontSize: 14,\n            fontWeight: 'bold',\n            color: colors.teamScoreText,\n        },\n        playerTeamScore: {\n            color: colors.playerTeamScoreText,\n        },\n    });\n\n    const currentPlayerIndex = gameState.public.currentPlayerIndex;\n    const currentPlayerId = gameState.public.players[currentPlayerIndex].id;\n    const isCurrentPlayer = currentPlayerId === playerId;\n    const isResolvingTrick = gameState.public.gameSpecificData?.isResolvingTrick;\n    const isResolvingTurnEnd = gameState.public.isResolvingTurnEnd;\n    const isResolvingGameEnd = gameState.public.isResolvingGameEnd;\n    const hand = gameState.private?.hand || [];\n    const currentTrick = gameState.public.gameSpecificData?.currentTrick || [];\n    const scores = gameState.public.gameSpecificData?.scores || [];\n    const canToggle = gameState.public.gameSpecificData?.canToggle;\n    const trumpCard = gameState.public.gameSpecificData?.trumpCard;\n    const trumpHolder = gameState.public.gameSpecificData?.trumpHolder;\n    const teams = gameState.public.gameSpecificData?.teams || [];\n    const gamePoints = gameState.public.gameSpecificData?.gamePoints || [];\n    \n    // Find which team the player belongs to\n    const playerTeamIndex = teams.findIndex((team: string[]) => team.includes(playerId));\n\n    // Near the top of your component, after the props destructuring\n    const windowWidth = Dimensions.get('window').width;\n    const windowHeight = Dimensions.get('window').height;\n    const responsiveStyles = getResponsiveStyles(windowWidth, windowHeight);\n    \n    // Use the design props, can be adjusted dynamically if needed\n    const designProps = defaultDesignProps;\n\n    // Render cards in hand\n    const renderHand = () => (\n        <View style={styles.handWrapper}>\n            <ScrollView horizontal contentContainerStyle={styles.handContent}>\n                {hand.map((card: any, index: number) => (\n                    <CardRender\n                        key={index}\n                        card={card}\n                        onPress={() => isCurrentPlayer && onPlayCard(index)}\n                    />\n                ))}\n            </ScrollView>\n        </View>\n    );\n\n    // Render current trick\n    const renderCurrentTrick = () => {\n        const myPlayerIndex = gameState.public.players.findIndex(p => p.id === playerId);\n        const numPlayers = gameState.public.players.length;\n        \n        // Calculate card radius based on design props\n        const tableRadius = designProps.TABLE_SIZE / 2;\n        const CARD_RADIUS = tableRadius * designProps.CARD_RADIUS_FACTOR;\n\n        const getCardPosition = (playerIndex: number): ViewStyle => {\n            const relativePos = (playerIndex - myPlayerIndex + numPlayers) % numPlayers;\n            const angle = -Math.PI/2 - (relativePos * 2 * Math.PI / numPlayers);\n            // The minus is a hack\n            const x = - CARD_RADIUS * Math.cos(angle);\n            const y = - CARD_RADIUS * Math.sin(angle);\n\n            return {\n                position: 'absolute',\n                transform: [\n                    { translateX: x },\n                    { translateY: y },\n                    { rotate: `${angle + Math.PI/2}rad` }\n                ] as any[]\n            };\n        };\n\n        return (\n            <View style={styles.trickContainer}>\n                <View style={[styles.trickTable, {\n                    width: designProps.TABLE_SIZE, \n                    height: designProps.TABLE_SIZE\n                }]}>\n                    <View style={styles.tableBackground} />                    \n                    <View style={styles.cardPositioner}>\n                        {/* Render cards if they exist */}\n                        {currentTrick?.map(({playerId: cardPlayerId, card}: {playerId: string, card: Card}) => {\n                            const playerIndex = gameState.public.players.findIndex(p => p.id === cardPlayerId);\n                            return (\n                                <View \n                                    key={cardPlayerId} \n                                    style={[\n                                        styles.trickCardContainer, \n                                        getCardPosition(playerIndex),\n                                        {\n                                            width: designProps.CARD_SIZE.width, \n                                            height: designProps.CARD_SIZE.height\n                                        }\n                                    ]}\n                                >\n                                    <CardRender card={card} />\n                                </View>\n                            );\n                        })}\n                    </View>\n                </View>\n            </View>\n        );\n    };\n\n    // Render players\n    const renderPlayers = () => {\n        const myPlayerIndex = gameState.public.players.findIndex(p => p.id === playerId);\n        const numPlayers = gameState.public.players.length;\n        \n        // Calculate player radius based on design props\n        const tableRadius = designProps.TABLE_SIZE / 2;\n        const PLAYER_RADIUS = tableRadius * designProps.PLAYER_RADIUS_FACTOR * \n                             designProps.TABLE_MEMBERS_EXPANSION_FACTOR;\n\n        // Add this function to determine winning teams\n        const getWinningTeams = () => {\n            if (!isResolvingTurnEnd || !teams || !scores) return [];\n            \n            // Calculate team scores for this turn\n            const teamScores = teams.map((team: string[]) => {\n                return team.reduce((sum: number, playerId: string) => {\n                    const playerScore = scores.find((s: {playerId: string, score: number}) => s.playerId === playerId)?.score || 0;\n                    return sum + playerScore;\n                }, 0);\n            });\n\n            // Find highest score\n            const maxScore = Math.max(...teamScores);\n            \n            // Return indices of teams with the highest score\n            return teamScores\n                .map((score: number, index: number) => score === maxScore ? index : -1)\n                .filter((index: number) => index !== -1);\n        };\n\n        const winningTeams = getWinningTeams();\n\n        const getPlayerPosition = (playerIndex: number): ViewStyle => {\n            const relativePos = (playerIndex - myPlayerIndex + numPlayers) % numPlayers;\n            const angle = -Math.PI/2 - (relativePos * 2 * Math.PI / numPlayers);\n            const x = - PLAYER_RADIUS * Math.cos(angle);\n            const y = - PLAYER_RADIUS * Math.sin(angle);\n\n            return {\n                position: 'absolute',\n                transform: [\n                    { translateX: x },\n                    { translateY: y }\n                ] as any[]\n            };\n        };\n\n        return (\n            <View style={styles.playerTable}>\n                {gameState.public.players.map((player, index) => {\n                    const playerScore = gameState.public.gameSpecificData?.scores?.find(\n                        (score: {playerId: string, score: number}) => score.playerId === player.id\n                    )?.score || 0;\n\n                    // Find which team this player belongs to\n                    const playerTeamIndex = teams.findIndex((team: string[]) => \n                        team.includes(player.id)\n                    );\n\n                    // Check if player is on a winning team\n                    const isWinningPlayer = winningTeams.includes(playerTeamIndex);\n\n                    return (\n                        <View \n                            key={player.id}\n                            style={[\n                                styles.playerInfo, \n                                getPlayerPosition(index),\n                                { minWidth: designProps.PLAYER_INFO_MIN_WIDTH },\n                                isWinningPlayer && isResolvingTurnEnd && styles.winningPlayerInfo\n                            ]}\n                        >\n                            <Text style={[\n                                styles.playerNameFixed,\n                                player.id === playerId && styles.currentPlayerName\n                            ]}>\n                                {player.name}\n                            </Text>\n                            {(isResolvingTurnEnd || gameState.public.isResolvingGameEnd) && (\n                                <Text style={styles.playerStats}>\n                                    Points: {playerScore}\n                                </Text>\n                            )}\n                        </View>\n                    );\n                })}\n            </View>\n        );\n    };\n\n    // Render extra action button if available\n    const renderExtraAction = () => {\n        if (!isCurrentPlayer || !canToggle || !onExtraAction) return null;\n        return (\n            <View style={styles.extraActionContainer}>\n                <Button\n                    title={`Toggle ${gameState.public.gameSpecificData?.isHighWins ? 'High' : 'Low'} Wins`}\n                    onPress={() => onExtraAction('TOGGLE_WIN_CONDITION', {})}\n                />\n            </View>\n        );\n    };\n\n    // Add new function to render trump info\n    const renderTrumpInfo = () => {\n        if (!trumpCard || !trumpHolder) return null;\n        \n        const trumpHolderName = gameState.public.players.find(p => p.id === trumpHolder)?.name;\n        \n        return (\n            <View style={styles.trumpInfo}>\n                <Text style={styles.trumpTitle}>Trump Card:</Text>\n                <CardRender card={trumpCard} />\n                <Text style={styles.trumpHolder}>Held by: {trumpHolderName}</Text>\n            </View>\n        );\n    };\n\n    // Render team scores more discreetly\n    const renderTeamScores = () => {\n        if (!teams || teams.length === 0 || !gamePoints) return null;\n        \n        return (\n            <View style={styles.teamScoreContainer}>\n                {teams.map((team: string[], index: number) => {\n                    const teamScore = gamePoints[index] || 0;\n                    const isPlayerTeam = index === playerTeamIndex;\n                    \n                    return (\n                        <View \n                            key={`team-${index}`} \n                            style={[\n                                styles.teamScoreCard, \n                                isPlayerTeam && styles.playerTeamCard\n                            ]}\n                        >\n                            <Text style={styles.teamName}>\n                                Team {index + 1}\n                                {isPlayerTeam ? ' ★' : ''}\n                            </Text>\n                            <Text style={[\n                                styles.teamScore,\n                                isPlayerTeam && styles.playerTeamScore\n                            ]}>\n                                {teamScore}\n                            </Text>\n                        </View>\n                    );\n                })}\n            </View>\n        );\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.headerRow}>\n                <Text style={styles.status}>\n                    {(() => {\n                        if (isResolvingGameEnd) {\n                            return \"Game ending...\";\n                        } else if (isResolvingTurnEnd) {\n                            return \"Round ending...\";\n                        } else if (isResolvingTrick) {\n                            return \"Resolving trick...\";\n                        } else if (isCurrentPlayer) {\n                            return \"Your turn!\";\n                        } else {\n                            return `Waiting for ${gameState.public.players[currentPlayerIndex].name}`;\n                        }\n                    })()}\n                </Text>\n                {renderTeamScores()}\n            </View>\n            <View style={[\n                styles.gameArea, \n                responsiveStyles.gameArea,\n                { minHeight: designProps.MIN_GAME_AREA_HEIGHT }\n            ]}>\n                <View style={styles.playAreaContainer}>\n                    {renderTrumpInfo()}\n                    {renderCurrentTrick()}\n                    {renderPlayers()}\n                </View>\n            </View>\n            <View style={styles.handContainer}>\n                <Text style={styles.subtitle}>Your Hand:</Text>\n                {renderHand()}\n                {renderExtraAction()}\n            </View>\n        </View>\n    );\n};\n\n// getResponsiveStyles stays outside\nconst getResponsiveStyles = (width: number, height: number) => ({\n    gameArea: {\n        maxHeight: height * 0.6,\n    },\n    playerTable: width <= 768 ? {\n        maxWidth: 350,\n        maxHeight: 350,\n    } : {\n        maxWidth: 450,\n        maxHeight: 450,\n    }\n}); ","import React from 'react';\nimport { View, Text, StyleSheet, ScrollView } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface GameEndProps {\n    teams: Array<string[]>;\n    gamePoints: Array<number>;\n    playerId: string;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n    }>;\n    gamePointsReversed: boolean;\n}\n\nexport const GameEnd: React.FC<GameEndProps> = ({\n    teams,\n    gamePoints,\n    playerId,\n    players,\n    gamePointsReversed\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n        },\n        title: {\n            fontSize: 24,\n            fontWeight: 'bold',\n            textAlign: 'center',\n            marginBottom: 10,\n        },\n        subtitle: {\n            fontSize: 18,\n            textAlign: 'center',\n            marginBottom: 20,\n        },\n        scoreList: {\n            flex: 1,\n        },\n        teamRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            padding: 15,\n            backgroundColor: colors.teamScoreCardBackground,\n            borderRadius: 8,\n            marginBottom: 10,\n            borderWidth: 1,\n            borderColor: colors.teamScoreCardBorder,\n        },\n        playerTeamRow: {\n            backgroundColor: colors.playerTeamBackground,\n            borderColor: colors.playerTeamBorder,\n        },\n        winnerRow: {\n            borderWidth: 2,\n            borderColor: 'gold',\n        },\n        rankAndTeam: {\n            flexDirection: 'row',\n            flex: 1,\n            alignItems: 'flex-start',\n        },\n        rank: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginRight: 10,\n            width: 25,\n        },\n        teamMembers: {\n            flex: 1,\n        },\n        teamTitle: {\n            fontSize: 16,\n            fontWeight: 'bold',\n            marginBottom: 5,\n        },\n        playerName: {\n            fontSize: 14,\n            marginLeft: 10,\n            color: colors.statusText,\n        },\n        currentPlayerName: {\n            fontWeight: 'bold',\n            color: colors.currentPlayerText,\n        },\n        playerTeamText: {\n            color: colors.playerTeamScoreText,\n        },\n        points: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            color: colors.teamScoreText,\n        },\n    });\n\n    // Find which team the player belongs to\n    const playerTeamIndex = teams.findIndex(team => team.includes(playerId));\n    \n    // Combine teams and points for sorting\n    const teamsWithPoints = teams.map((team, index) => ({\n        teamIndex: index,\n        teamMembers: team,\n        points: gamePoints[index] || 0,\n        isPlayerTeam: index === playerTeamIndex\n    }));\n    \n    // Sort teams by points (higher points first, unless reversed)\n    const sortedTeams = [...teamsWithPoints].sort((a, b) => {\n        if (gamePointsReversed) {\n            return a.points - b.points; // Lower points win if reversed\n        }\n        return b.points - a.points; // Higher points win normally\n    });\n\n    return (\n        <View style={styles.container}>\n            <Text style={[styles.title, { color: colors.titleText }]}>Game Finished</Text>\n            <Text style={[styles.subtitle, { color: colors.subtitleText }]}>Final Scores</Text>\n            \n            <ScrollView style={styles.scoreList}>\n                {sortedTeams.map((team, index) => {\n                    const isWinner = index === 0;\n                    return (\n                        <View \n                            key={`team-${team.teamIndex}`} \n                            style={[\n                                styles.teamRow, \n                                team.isPlayerTeam && styles.playerTeamRow,\n                                isWinner && styles.winnerRow\n                            ]}\n                        >\n                            <View style={styles.rankAndTeam}>\n                                <Text style={[\n                                    styles.rank, \n                                    team.isPlayerTeam && styles.playerTeamText\n                                ]}>\n                                    {index + 1}.\n                                </Text>\n                                <View style={styles.teamMembers}>\n                                    <Text style={[\n                                        styles.teamTitle, \n                                        team.isPlayerTeam && styles.playerTeamText\n                                    ]}>\n                                        Team {team.teamIndex + 1} {team.isPlayerTeam && '(Your Team)'}\n                                        {isWinner && ' 🏆'}\n                                    </Text>\n                                    {team.teamMembers.map(memberId => {\n                                        const player = players.find(p => p.id === memberId);\n                                        return (\n                                            <Text \n                                                key={memberId} \n                                                style={[\n                                                    styles.playerName,\n                                                    memberId === playerId && styles.currentPlayerName,\n                                                    team.isPlayerTeam && styles.playerTeamText\n                                                ]}\n                                            >\n                                                {player?.name || 'Unknown'} {memberId === playerId && '(You)'}\n                                                {player?.isAgent && ' (AI)'}\n                                            </Text>\n                                        );\n                                    })}\n                                </View>\n                            </View>\n                            <Text style={[\n                                styles.points, \n                                team.isPlayerTeam && styles.playerTeamText\n                            ]}>\n                                {team.points} pts\n                            </Text>\n                        </View>\n                    );\n                })}\n            </ScrollView>\n        </View>\n    );\n}; ","export type AvailableGames = 'SUECA'\n\nexport interface Card {\n    suit: 'hearts' | 'diamonds' | 'clubs' | 'spades';\n    value: number;  // 2-14 (14 being Ace)\n}\n\nexport interface PublicGameState {\n    id: string;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n    }>;\n    currentPlayerIndex: number;\n    phase: GamePhase;\n    owner?: string;\n    gameSpecificData: any;\n    isResolvingTrick: boolean;\n    isResolvingTurnEnd: boolean;\n    isResolvingGameEnd: boolean;\n    gameCharacteristics: GameCharacteristics;\n}\n\nexport interface PrivatePlayerState {\n    hand: Card[];\n    gameSpecificData?: any;\n}\n\nexport interface GameCharacteristics {\n    minPlayers: number;\n    maxPlayers: number;\n    playerGroupSize: number;\n    extraActions: string[];\n    gamePointsReversed: boolean;\n}\n\nexport interface GameBroadcastState {\n    public: PublicGameState;\n    private?: PrivatePlayerState;\n}\n\n// Base interface for game-specific data\nexport interface BaseGameSpecificData {\n    currentTrick?: Array<{playerId: string; card: Card}>;\n    scores?: Array<{playerId: string; score: number}>;\n    gamePoints?: Array<number>;\n    teams?: Array<string[]>;\n}\n\n// Game-specific data interfaces\nexport interface HighLowGameData extends BaseGameSpecificData {\n    isHighWins: boolean;\n    canToggle: boolean;\n}\n\nexport enum GamePhase {\n    WAITING = 'WAITING',\n    PLAYING = 'PLAYING',\n    FINISHED = 'FINISHED'\n}\n\nexport interface GameAction {\n    type: 'PLAY_CARD' | 'JOIN_GAME' | 'START_GAME';\n    playerId?: string;\n    cardIndex?: number;\n    gameId?: string;\n}\n","import React from 'react';\nimport { View, Text, Modal, TouchableOpacity, StyleSheet } from 'react-native';\nimport { colors } from '../theme/ThemeContext';\n\ninterface ConfirmDialogProps {\n    visible: boolean;\n    title: string;\n    message: string;\n    onConfirm: () => void;\n    onCancel: () => void;\n}\n\nexport const ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n    visible,\n    title,\n    message,\n    onConfirm,\n    onCancel\n}) => {\n    return (\n        <Modal\n            transparent\n            visible={visible}\n            animationType=\"fade\"\n            onRequestClose={onCancel}\n        >\n            <View style={styles.overlay}>\n                <View style={styles.dialog}>\n                    <Text style={styles.title}>{title}</Text>\n                    <Text style={styles.message}>{message}</Text>\n                    <View style={styles.buttonContainer}>\n                        <TouchableOpacity \n                            style={[styles.button, styles.cancelButton]} \n                            onPress={onCancel}\n                        >\n                            <Text style={styles.buttonText}>Cancel</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity \n                            style={[styles.button, styles.confirmButton]} \n                            onPress={onConfirm}\n                        >\n                            <Text style={styles.buttonText}>Leave Game</Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </View>\n        </Modal>\n    );\n};\n\nconst styles = StyleSheet.create({\n    overlay: {\n        flex: 1,\n        backgroundColor: colors.dialogOverlay,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    dialog: {\n        backgroundColor: colors.dialogBackground,\n        borderRadius: 10,\n        padding: 20,\n        width: '80%',\n        maxWidth: 400,\n    },\n    title: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        marginBottom: 10,\n        textAlign: 'center',\n    },\n    message: {\n        fontSize: 16,\n        marginBottom: 20,\n        textAlign: 'center',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n    },\n    button: {\n        flex: 1,\n        padding: 10,\n        borderRadius: 5,\n        marginHorizontal: 5,\n    },\n    cancelButton: {\n        backgroundColor: colors.dialogCancelButton,\n    },\n    confirmButton: {\n        backgroundColor: colors.dialogConfirmButton,\n    },\n    buttonText: {\n        color: colors.dialogButtonText,\n        textAlign: 'center',\n        fontSize: 16,\n    },\n}); ","import React, { useState } from 'react';\nimport { TouchableOpacity, Text, StyleSheet } from 'react-native';\nimport { ConfirmDialog } from './ConfirmDialog';\nimport { SocketService } from '../services/socket.service';\nimport { useNavigation } from '@react-navigation/native';\n\ninterface LeaveGameButtonProps {\n    gameId: string;\n    style?: any;\n}\n\nexport const LeaveGameButton: React.FC<LeaveGameButtonProps> = ({ gameId, style }) => {\n    const [showConfirm, setShowConfirm] = useState(false);\n    const navigation = useNavigation();\n    const socketService = SocketService.getInstance();\n\n    const handleLeaveGame = async () => {\n        try {\n            const response = await socketService.leaveGame(gameId);\n            if (response.success) {\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: 'Home' as never }],\n                });\n            } else {\n                console.error('Failed to leave game');\n            }\n        } catch (error) {\n            console.error('Error leaving game:', error);\n        }\n        setShowConfirm(false);\n    };\n\n    return (\n        <>\n            <TouchableOpacity \n                style={[styles.leaveButton, style]} \n                onPress={() => setShowConfirm(true)}\n            >\n                <Text style={styles.leaveButtonText}>Leave Game</Text>\n            </TouchableOpacity>\n\n            <ConfirmDialog\n                visible={showConfirm}\n                title=\"Leave Game\"\n                message=\"Are you sure you want to leave this game? This action cannot be undone.\"\n                onConfirm={handleLeaveGame}\n                onCancel={() => setShowConfirm(false)}\n            />\n        </>\n    );\n};\n\nconst styles = StyleSheet.create({\n    leaveButton: {\n        backgroundColor: '#d32f2f',\n        padding: 10,\n        borderRadius: 5,\n        position: 'absolute',\n        top: 10,\n        right: 10,\n    },\n    leaveButtonText: {\n        color: 'white',\n        fontSize: 16,\n        fontWeight: 'bold',\n    },\n}); ","import React from 'react';\nimport { TouchableOpacity, Text, StyleSheet, Share, Platform } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface ShareGameLinkProps {\n    gameId: string;\n    style?: any;\n    isOwner: boolean;\n}\n\nexport const ShareGameLink: React.FC<ShareGameLinkProps> = ({ gameId, style, isOwner }) => {\n    const { colors } = useTheme();\n    \n    // If not the owner, don't render the button\n    if (!isOwner) return null;\n\n    const handleShare = async () => {\n        // Create deep link for the game\n        const gameDeepLink = `cardgame://game/${gameId}`;\n        \n        // For web, create a URL - with special handling for GitHub Pages\n        let webUrl;\n        if (Platform.OS === 'web') {\n            // Get the current pathname\n            const pathname = window.location.pathname;\n            \n            // Extract the base path\n            const basePath = pathname.endsWith('/') \n                ? pathname \n                : pathname.substring(0, pathname.lastIndexOf('/') + 1);\n            \n            // Check if we're on GitHub Pages by looking for github.io in the hostname\n            const isGitHubPages = window.location.hostname.includes('github.io');\n            \n            if (isGitHubPages) {\n                // For GitHub Pages, use query parameters\n                webUrl = `${window.location.origin}${basePath}?gameId=${gameId}`;\n            } else {\n                // For all other web hosts, use the path-based approach\n                webUrl = `${window.location.origin}${basePath}game/${gameId}`;\n            }\n            \n            console.log('Generated share URL:', webUrl);\n        }\n        \n        const url = Platform.OS === 'web' ? webUrl : gameDeepLink;\n        \n        try {\n            if (Platform.OS === 'web') {\n                // On web, use clipboard API\n                navigator.clipboard.writeText(url || '')\n                    .then(() => {\n                        alert('Game link copied to clipboard! Share it with your friends.');\n                    })\n                    .catch(err => {\n                        console.error('Could not copy text: ', err);\n                        alert('Failed to copy the game link.');\n                    });\n            } else {\n                // On native, use Share API\n                const result = await Share.share({\n                    message: `Join my card game! ${url}`,\n                    url: url,\n                    title: 'Join my card game'\n                });\n                \n                if (result.action === Share.sharedAction) {\n                    if (result.activityType) {\n                        console.log(`Shared via ${result.activityType}`);\n                    } else {\n                        console.log('Shared successfully');\n                    }\n                } else if (result.action === Share.dismissedAction) {\n                    console.log('Share dismissed');\n                }\n            }\n        } catch (error) {\n            console.error('Error sharing:', error);\n            alert('Could not share the game link');\n        }\n    };\n\n    return (\n        <TouchableOpacity \n            style={[styles.shareButton, style]} \n            onPress={handleShare}\n        >\n            <Text style={styles.shareButtonText}>Share Game Link</Text>\n        </TouchableOpacity>\n    );\n};\n\nconst styles = StyleSheet.create({\n    shareButton: {\n        backgroundColor: '#4CAF50',\n        padding: 10,\n        borderRadius: 5,\n        // No absolute positioning here, will be positioned by parent\n    },\n    shareButtonText: {\n        color: 'white',\n        fontSize: 16,\n        fontWeight: 'bold',\n    },\n}); ","import React, { useEffect, useState, useCallback } from 'react';\nimport { View, Text, Button, ScrollView, StyleSheet, Alert, BackHandler, AppState } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { GameScreenState } from '../types/game-ui';\nimport { GameManagement } from '../components/GameManagement';\nimport { GamePlay } from '../components/GamePlay';\nimport { GameEnd } from '../components/GameEnd';\nimport { GameBroadcastState, GamePhase } from '../shared/types/game-state';\nimport { LeaveGameButton } from '../components/LeaveGameButton';\nimport { useTheme } from '../theme/ThemeContext';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { BroadcastTypes } from '../shared/types/actions';\nimport { ConfirmDialog } from '../components/ConfirmDialog';\nimport { ShareGameLink } from '../components/ShareGameLink';\n\ninterface GameScreenProps {\n    route: any;\n}\n\nexport const GameScreen: React.FC<GameScreenProps> = ({ route }) => {\n    const { gameId, playerName } = route.params;\n    const [gameState, setGameState] = useState<GameBroadcastState | null>(null);\n    const [screenState, setScreenState] = useState<GameScreenState>({\n        mode: 'management',\n        isCurrentPlayer: false\n    });\n    const [showLeaveConfirm, setShowLeaveConfirm] = useState(false);\n    const [appState, setAppState] = useState(AppState.currentState);\n    const socketService = SocketService.getInstance();\n    const { colors } = useTheme();\n    const navigation = useNavigation();\n\n    console.log('GameScreen mounted with gameId:', gameId, 'and playerName:', playerName);\n\n    // Handle hardware back button (Android)\n    useFocusEffect(\n        useCallback(() => {\n            const onBackPress = () => {\n                // Show leave game confirmation\n                setShowLeaveConfirm(true);\n                return true; // Prevent default back behavior\n            };\n\n            BackHandler.addEventListener('hardwareBackPress', onBackPress);\n            \n            // Set up navigation options for the header back button\n            navigation.setOptions({\n                headerLeft: () => null, // Remove the default back button\n                // If you want a custom back button, you can add it here\n            });\n\n            return () => BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n        }, [navigation])\n    );\n\n    // Handle app state changes (foreground/background)\n    useEffect(() => {\n        const subscription = AppState.addEventListener('change', nextAppState => {\n            console.log('App state changed from', appState, 'to', nextAppState);\n            \n            // App has come back to foreground\n            if (appState.match(/inactive|background/) && nextAppState === 'active') {\n                console.log('App has come back to the foreground!');\n                \n                // Check socket connection status\n                if (!socketService.isConnected()) {\n                    console.log('Socket disconnected while app was in background, attempting to reconnect...');\n                    \n                    // Try to reconnect\n                    socketService.reconnect().catch(error => {\n                        console.error('Failed to reconnect socket:', error);\n                        \n                        // Navigation to login screen if reconnection fails\n                        Alert.alert(\n                            \"Connection Lost\",\n                            \"Your connection to the game was lost. Please log in again.\",\n                            [\n                                { \n                                    text: \"OK\", \n                                    onPress: () => navigation.reset({\n                                        index: 0,\n                                        routes: [{ name: 'Login' as never }],\n                                    })\n                                }\n                            ]\n                        );\n                    });\n                }\n            }\n            \n            setAppState(nextAppState);\n        });\n        \n        return () => {\n            subscription.remove();\n        };\n    }, [appState, navigation]);\n\n    useEffect(() => {\n        console.log('useEffect called');\n        \n        const handleNotInGame = (data: { gameId: string, playerId: string }) => {\n            console.log('handleNotInGame called with data:', data);\n            console.log('currentGameId:', gameId);\n            console.log('currentUserId:', socketService.getCurrentUser()?.userId);\n            \n            if (data.gameId === gameId && data.playerId === socketService.getCurrentUser()?.userId) {\n                console.log('Navigating to Home screen due to NOT_IN_GAME event');\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: 'Home' as never }],\n                });\n            }\n        };\n        \n        socketService.on(BroadcastTypes.NOT_IN_GAME, handleNotInGame);\n        \n        socketService.onGameState((state: GameBroadcastState) => {\n            console.log('Game state received:', state);\n            setGameState(state);\n            \n            setScreenState(prev => ({\n                ...prev,\n                mode: state.public.phase === 'PLAYING' ? 'playing' : 'management',\n                isCurrentPlayer: state.public.players[state.public.currentPlayerIndex]?.name === playerName\n            }));\n        });\n\n        return () => {\n            socketService.off(BroadcastTypes.NOT_IN_GAME, handleNotInGame);\n        };\n    }, [gameId, navigation]);\n\n    const handleAddAgent = () => {\n        socketService.addAgent(gameId);\n    };\n\n    const handleStartGame = () => {\n        socketService.startGame(gameId);\n    };\n\n    const handlePlayCard = (cardIndex: number) => {\n        socketService.playCard(gameId, cardIndex);\n    };\n\n    const handleExtraAction = (actionType: string, actionData: any) => {\n        socketService.extraAction(gameId, actionType, actionData);\n    };\n\n    const handleKickPlayer = (playerId: string) => {\n        socketService.kickPlayer(gameId, playerId);\n    };\n\n    const handleReorderPlayer = (playerId: string, direction: 'up' | 'down') => {\n        socketService.reorderPlayer(gameId, playerId, direction);\n    };\n\n    if (!gameState) {\n        return <Text>Loading...</Text>;\n    }\n\n    const renderGameContent = () => {\n        if (gameState.public.phase === GamePhase.FINISHED) {\n            return (\n                <GameEnd \n                    teams={gameState.public.gameSpecificData?.teams || []}\n                    gamePoints={gameState.public.gameSpecificData?.gamePoints || []}\n                    playerId={socketService.getCurrentUser()?.userId || ''}\n                    players={gameState.public.players}\n                    gamePointsReversed={gameState.public.gameCharacteristics.gamePointsReversed}\n                />\n            );\n        } else if (screenState.mode === 'management') {\n            return (\n                <GameManagement\n                    gameId={gameId}\n                    onAddAgent={handleAddAgent}\n                    onStartGame={handleStartGame}\n                    playerCount={gameState.public.players.length}\n                    players={gameState.public.players.map(p => ({\n                        ...p,\n                        isOwner: p.id === gameState.public.owner\n                    }))}\n                    isOwner={gameState.public.owner === socketService.getCurrentUser()?.userId}\n                    onKickPlayer={handleKickPlayer}\n                    onReorderPlayer={handleReorderPlayer}\n                    gameCharacteristics={gameState.public.gameCharacteristics}\n                />\n            );\n        } else {\n            return (\n                <GamePlay\n                    gameState={gameState}\n                    playerName={playerName}\n                    playerId={socketService.getCurrentUser()?.userId || ''}\n                    onPlayCard={handlePlayCard}\n                    onExtraAction={handleExtraAction}\n                />\n            );\n        }\n    };\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            position: 'relative',\n        },\n        headerButtons: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            width: '100%',\n            padding: 10,\n            marginBottom: 10,\n        },\n        title: {\n            fontSize: 24,\n            fontWeight: 'bold',\n            marginTop: 10,\n            textAlign: 'center'\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 10,\n        },\n        controls: {\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 20,\n        },\n        status: {\n            fontSize: 16,\n            marginBottom: 20,\n        },\n        trickContainer: {\n            marginBottom: 20,\n        },\n        trick: {\n            flexGrow: 0,\n            height: 100,\n        },\n        handContainer: {\n            marginTop: 'auto',\n        },\n        hand: {\n            flexGrow: 0,\n            height: 100,\n        },\n        scoreboard: {\n            marginTop: 20,\n        },\n    });\n\n    return (\n        <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n            <View style={styles.headerButtons}>\n                <ShareGameLink \n                    gameId={gameId} \n                    isOwner={gameState?.public?.owner === socketService.getCurrentUser()?.userId} \n                />\n                <LeaveGameButton gameId={gameId} />\n            </View>\n            \n            <Text style={[styles.title, { color: colors.titleText }]}>{gameId}</Text>\n            \n            {renderGameContent()}\n            <ConfirmDialog\n                visible={showLeaveConfirm}\n                title=\"Leave Game\"\n                message=\"Are you sure you want to leave this game? This action cannot be undone.\"\n                onConfirm={async () => {\n                    try {\n                        const response = await socketService.leaveGame(gameId);\n                        if (response.success) {\n                            navigation.reset({\n                                index: 0,\n                                routes: [{ name: 'Home' as never }],\n                            });\n                        }\n                    } catch (error) {\n                        console.error('Error leaving game:', error);\n                    }\n                    setShowLeaveConfirm(false);\n                }}\n                onCancel={() => setShowLeaveConfirm(false)}\n            />\n        </View>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { View, Text, Button, StyleSheet, TextInput } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\nimport { SocketService } from '../services/socket.service';\nimport { AvailableGames } from '../shared/types/game-state';\nimport { useTheme } from '../theme/ThemeContext';\n\nconst GAME_TYPES: AvailableGames[] = ['SUECA'];\n\n// Function to generate a random 8 character hexadecimal string\nconst generateRandomGameName = (): string => {\n    return Math.random().toString(16).substring(2, 10);\n};\n\nexport const GameCreationScreen: React.FC<{ route: any, navigation: any }> =\n    ({route, navigation}) => {\n        const { colors } = useTheme();\n        console.log('GameCreationScreen rendered');\n        console.log('Route params:', route.params);\n        const { playerName } = route.params;\n        const socketService = SocketService.getInstance();\n        const [gameType, setGameType] = useState<AvailableGames>(GAME_TYPES[0]);\n        const [gameName, setGameName] = useState<string>('');\n    \n        const handleCreateGame = async () => {\n            console.log('Creating game');\n            await socketService.connect(playerName);\n            console.log('Connected to socket');\n            // Use the provided game name or generate a random one if empty\n            const finalGameName = gameName.trim() || generateRandomGameName();\n            const response = await socketService.createGame(playerName, gameType, finalGameName);\n            if (response.success && response.gameId) {\n                console.log('Game created successfully');\n                navigation.navigate('Game', { gameId: response.gameId, playerName });\n            }\n        };\n\n        const styles = StyleSheet.create({\n            container: {\n                flex: 1,\n                padding: 20,\n            },\n            title: {\n                fontSize: 24,\n                marginBottom: 20,\n            },\n            formGroup: {\n                marginBottom: 20,\n            },\n            label: {\n                marginBottom: 10,\n            },\n            picker: {\n                padding: 10,\n            },\n            input: {\n                borderWidth: 1,\n                borderColor: colors.inputBorder,\n                borderRadius: 5,\n                padding: 10,\n                color: colors.inputText,\n                backgroundColor: colors.inputBackground,\n            }\n        });\n\n        return (\n            <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n                <Text style={[styles.title, { color: colors.titleText }]}>Game Creation</Text>\n                <View style={styles.formGroup}>\n                    <Text style={[styles.label, { color: colors.subtitleText }]}>\n                        Select Game Type:\n                    </Text>\n                    <Picker\n                        selectedValue={gameType}\n                        onValueChange={(itemValue: AvailableGames) => setGameType(itemValue)}\n                        style={[styles.picker, { backgroundColor: colors.pickerBackground }]}\n                    >\n                        {GAME_TYPES.map((game) => (\n                            <Picker.Item \n                                key={game} \n                                label={game.replace('_', ' ')} \n                                value={game}\n                            />\n                        ))}\n                    </Picker>\n                </View>\n                <View style={styles.formGroup}>\n                    <Text style={[styles.label, { color: colors.subtitleText }]}>\n                        Game Name (optional):\n                    </Text>\n                    <TextInput\n                        style={styles.input}\n                        value={gameName}\n                        onChangeText={setGameName}\n                        placeholder=\"Enter game name or leave blank for random\"\n                        placeholderTextColor={colors.placeholderText}\n                    />\n                </View>\n                <Button \n                    title=\"Create Game\" \n                    onPress={handleCreateGame} \n                    color={colors.primaryButton}\n                />\n            </View>\n        );\n    }","import React, { useState } from 'react';\nimport { View, TextInput, Button, StyleSheet } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\n\nexport const JoinGameScreen: React.FC<{ route: any, navigation: any }> =\n    ({route, navigation}) => {\n        const { colors } = useTheme();\n        const { playerName } = route.params;\n        const socketService = SocketService.getInstance();\n        const [gameId, setGameId] = useState('');\n\n        const handleJoinGame = async () => {\n            await socketService.connect(playerName);\n            await socketService.joinGame(gameId, playerName);\n            navigation.navigate('Game', { gameId, playerName });\n        };\n\n        const styles = StyleSheet.create({\n            container: {\n                flex: 1,\n                padding: 20,\n                justifyContent: 'center',\n            },\n            input: {\n                borderWidth: 1,\n                borderColor: colors.inputBorder,\n                padding: 10,\n                marginBottom: 20,\n                borderRadius: 5,\n            },\n            buttonContainer: {\n                gap: 10,\n            },\n        });\n\n        return (\n            <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n                <TextInput\n                    style={[styles.input, { backgroundColor: colors.inputBackground }]}\n                    placeholder=\"Enter game name\"\n                    onChangeText={(text) => setGameId(text)}\n                    placeholderTextColor={colors.playerStatsText}\n                />\n                <Button \n                    title=\"Join Game\" \n                    onPress={handleJoinGame} \n                    color={colors.primaryButton}\n                />\n            </View>\n        );\n    }\n    ","import React from 'react';\nimport { TouchableOpacity, StyleSheet } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons'; // Make sure you have this package installed\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const ThemeToggleButton: React.FC = () => {\n  const { toggleTheme, themeType } = useTheme();\n  \n  return (\n    <TouchableOpacity \n      style={styles.button} \n      onPress={toggleTheme}\n      accessibilityLabel=\"Toggle theme\"\n      accessibilityRole=\"button\"\n    >\n      <Ionicons \n        name={themeType === 'light' ? 'moon-outline' : 'sunny-outline'} \n        size={22} \n        color={themeType === 'light' ? '#333' : '#fff'} \n      />\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    marginRight: 8,\n    padding: 8,\n  }\n}); ","import React, { useEffect, useRef, useState } from 'react';\nimport { Platform, View, StatusBar, StyleSheet, Linking, Alert } from 'react-native';\nimport { NavigationContainer, DefaultTheme, NavigationContainerRef } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { LoginScreen } from './src/screens/LoginScreen';\nimport { HomeScreen } from './src/screens/HomeScreen';\nimport { GameScreen } from './src/screens/GameScreen';\nimport { GameCreationScreen } from './src/screens/GameCreationScreen';\nimport { JoinGameScreen } from './src/screens/JoinGameScreen';\nimport { ThemeProvider, useTheme } from './src/theme/ThemeContext';\nimport { ThemeToggleButton } from './src/components/ThemeToggleButton';\nimport { SocketService } from './src/services/socket.service';\n\n// Types for navigation\ntype RootStackParamList = {\n  Login: { gameId?: string }; // Add gameId parameter to Login\n  Home: undefined;\n  Game: { gameId: string; playerName: string };\n  GameCreation: { playerName: string };\n  JoinGame: { playerName: string };\n};\n\nconst WebStack = createStackNavigator<RootStackParamList>();\nconst NativeStack = createNativeStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <AppContent />\n    </ThemeProvider>\n  );\n}\n\nconst AppContent = () => {\n  const Stack = Platform.OS === 'web' ? WebStack : NativeStack;\n  const { colors, themeType } = useTheme();\n  const navigationRef = useRef<NavigationContainerRef<RootStackParamList>>(null);\n  const [initialRoute, setInitialRoute] = useState<{name: keyof RootStackParamList; params: any}>({ \n    name: 'Login', \n    params: {} \n  });\n  const [isReady, setIsReady] = useState(false);\n\n  // Custom navigation theme based on our colors\n  const navigationTheme = {\n    ...DefaultTheme,\n    colors: {\n      ...DefaultTheme.colors,\n      background: colors.appBackground,\n      card: colors.containerBackground,\n      text: colors.titleText,\n      border: colors.inputBorder,\n      primary: colors.primaryButton,\n    },\n  };\n\n  // Handle deep links\n  const handleDeepLink = async (url: string) => {\n    if (!url) return;\n    \n    console.log('Received deep link:', url);\n    \n    // Parse the URL to get the game ID - handle both native deep links and web URLs\n    let gameId;\n    \n    // Native deep link pattern\n    const nativeMatch = url.match(/cardgame:\\/\\/game\\/([^\\/]+)/);\n    if (nativeMatch) {\n      gameId = nativeMatch[1];\n    } \n    \n    // Web URL pattern - updated to match even with subdirectories\n    const webMatch = url.match(/\\/game\\/([^\\/]+)(?:\\/|$)/);\n    if (webMatch) {\n      gameId = webMatch[1];\n    }\n    \n    if (gameId) {\n      console.log('Deep link contains game ID:', gameId);\n      \n      const socketService = SocketService.getInstance();\n      if (socketService.isLoggedIn()) {\n        // If already logged in, navigate to the game directly\n        const navigation = navigationRef.current;\n        if (navigation) {\n          // First connect to ensure socket is ready\n          try {\n            await socketService.connect(socketService.getCurrentUser()?.username || '');\n            const joinResponse = await socketService.joinGame(gameId, socketService.getCurrentUser()?.username || '');\n            \n            if (joinResponse.success) {\n              navigation.reset({\n                index: 0,\n                routes: [\n                  { name: 'Game', params: { \n                    gameId, \n                    playerName: socketService.getCurrentUser()?.username \n                  }}\n                ],\n              });\n            } else {\n              // Show an alert with the specific error\n              Alert.alert(\n                'Game Join Failed',\n                joinResponse.error === 'Game not found or cannot join'\n                  ? 'The game you tried to join does not exist or is no longer available.'\n                  : 'Could not join the game.',\n                [{ \n                  text: 'OK', \n                  onPress: () => navigation.reset({ index: 0, routes: [{ name: 'Home' }] }) \n                }]\n              );\n            }\n          } catch (error) {\n            console.error('Error joining game:', error);\n            Alert.alert(\n              'Connection Error',\n              'Failed to connect to the game server. Please try again later.',\n              [{ \n                text: 'OK', \n                onPress: () => navigation.reset({ index: 0, routes: [{ name: 'Home' }] }) \n              }]\n            );\n          }\n        }\n      } else {\n        // If not logged in, set initial route to Login with gameId\n        setInitialRoute({ name: 'Login' as keyof RootStackParamList, params: { gameId } });\n      }\n    }\n  };\n\n  // Set up link listeners\n  useEffect(() => {\n    // For web, check multiple sources for game ID\n    if (Platform.OS === 'web') {\n      let gameId = null;\n      \n      // First check URL query parameters\n      const urlParams = new URLSearchParams(window.location.search);\n      gameId = urlParams.get('gameId');\n      \n      // If not found in URL params, check sessionStorage (for GitHub Pages)\n      if (!gameId && typeof sessionStorage !== 'undefined') {\n        gameId = sessionStorage.getItem('gameId');\n        // Clear from sessionStorage after reading\n        if (gameId) {\n          console.log('Found game ID in sessionStorage:', gameId);\n          sessionStorage.removeItem('gameId');\n        }\n      }\n      \n      // If still not found, check path\n      if (!gameId) {\n        const path = window.location.pathname;\n        const webMatch = path.match(/\\/game\\/([^\\/]+)(?:\\/|$)/);\n        if (webMatch) {\n          gameId = webMatch[1];\n        }\n      }\n      \n      // Process the gameId if found\n      if (gameId) {\n        console.log('Found game ID:', gameId);\n        handleDeepLink(gameId);\n        \n        // Clean URL if needed\n        if (window.history && window.history.replaceState) {\n          const cleanUrl = window.location.pathname;\n          window.history.replaceState({}, document.title, cleanUrl);\n        }\n      }\n    }\n\n    // Regular deep link handling for all platforms\n    const subscription = Linking.addEventListener('url', ({ url }) => {\n      handleDeepLink(url);\n    });\n\n    // Handle the case where the app is opened from a link\n    Linking.getInitialURL().then(url => {\n      if (url) handleDeepLink(url);\n      setIsReady(true);\n    }).catch(err => {\n      console.error('Error getting initial URL:', err);\n      setIsReady(true);\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  useEffect(() => {\n    const socketService = SocketService.getInstance();\n    const socket = socketService.getSocket();\n   \n    // Set up global socket state listener\n    const onDisconnect = (reason: any) => {\n        console.log('Socket disconnected:', reason);\n        if (reason === \"io server disconnect\" || reason === \"transport close\") {\n            // Server forced disconnect or transport closed - try to reconnect\n            setTimeout(() => {\n                socketService.reconnect().catch(error => {\n                    console.error('Failed to reconnect socket after disconnect:', error);\n                });\n            }, 1000);\n        }\n    };\n    \n    socket.on('disconnect', onDisconnect);\n    \n    return () => {\n        socket.off('disconnect', onDisconnect);\n    };\n  }, []);\n\n  if (!isReady) {\n    return null; // or a loading indicator\n  }\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.appBackground }]}>\n      <StatusBar \n        backgroundColor={colors.appBackground}\n        barStyle={themeType === 'dark' ? 'light-content' : 'dark-content'} \n      />\n      <NavigationContainer \n        theme={navigationTheme}\n        ref={navigationRef}\n        initialState={{\n          routes: [initialRoute]\n        }}\n      >\n        <Stack.Navigator \n          initialRouteName={initialRoute.name} \n          screenOptions={{\n            headerShown: true,\n            headerStyle: {\n              backgroundColor: colors.containerBackground,\n              borderBottomColor: colors.inputBorder,\n              borderBottomWidth: 1,\n            },\n            headerTitleStyle: {\n              color: colors.titleText,\n            },\n            headerTintColor: colors.titleText,\n            headerRight: () => <ThemeToggleButton />\n          }}\n        >\n          <Stack.Screen \n            name=\"Login\" \n            component={LoginScreen}\n            options={{ \n              title: 'Sign In',\n              headerLeft: () => null \n            }}\n          />\n          <Stack.Screen \n            name=\"Home\" \n            component={HomeScreen} \n            options={{\n              title: 'Home',\n              headerLeft: () => null,\n            }}\n          />\n          <Stack.Screen \n            name=\"Game\" \n            component={GameScreen}\n          />\n          <Stack.Screen \n            name=\"GameCreation\" \n            component={GameCreationScreen}\n            options={{ title: 'Create Game' }}\n          />\n          <Stack.Screen \n            name=\"JoinGame\" \n            component={JoinGameScreen}\n            options={{ title: 'Join Game' }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","// extracted by mini-css-extract-plugin\nexport default {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"./\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [708], () => (__webpack_require__(8914)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["AuthActions","MainActions","GameAdminActions","GamePlayActions","BroadcastTypes","socketUrl","socketPath","SocketService","currentUser","reconnectAttempts","MAX_RECONNECT_ATTEMPTS","heartbeatInterval","HEARTBEAT_INTERVAL","eventHandlers","Map","constructor","this","socket","io","config","transports","path","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","timeout","console","log","setupSocketListeners","on","id","reason","connect","error","disconnect","attemptNumber","STATE","state","GAME_DELETED","data","gameId","NOT_IN_GAME","playerId","triggerEvent","socketId","userId","timestamp","Date","toISOString","clearHeartbeat","clearCurrentUser","getInstance","instance","playerName","Promise","resolve","reject","connected","createGame","gameType","gameName","setTimeout","Error","emit","CREATE_GAME","response","clearTimeout","joinGame","JOIN_GAME","addAgent","ADD_AGENT","startGame","START_GAME","playCard","cardIndex","PLAY_CARD","onGameState","callback","onAny","eventName","args","setupHeartbeat","clearInterval","setInterval","heartbeatTimeout","warn","reconnect","catch","HEARTBEAT","success","logout","hasUser","login","username","LOGIN","setCurrentUser","extraAction","actionType","actionData","EXTRA_ACTION","getCurrentUser","LOGOUT","leaveGame","LEAVE_GAME","kickPlayer","KICK_PLAYER","event","has","set","get","push","off","handlers","index","indexOf","splice","forEach","handler","isConnected","onConnect","onError","then","getSocket","reorderPlayer","direction","REORDER_PLAYER","isLoggedIn","lightColors","cardBackground","cardBorder","cardTextBlack","cardTextRed","dialogOverlay","dialogBackground","dialogCancelButton","dialogConfirmButton","dialogButtonText","leaveButtonBackground","leaveButtonText","playerInfoBackground","playerInfoBorder","currentPlayerText","playerStatsText","trumpInfoBackground","trumpInfoBorder","teamScoreCardBackground","teamScoreCardBorder","inputBorder","inputBackground","inputText","placeholderText","tableFelt","tableEdge","statusText","subtitleText","playerTeamBackground","playerTeamBorder","teamScoreText","playerTeamScoreText","accent","welcomeText","logoutButton","primaryButton","primaryButtonText","appBackground","containerBackground","pickerBackground","titleText","winningPlayerBackground","winningPlayerBorder","darkColors","ThemeContext","createContext","themeType","colors","setThemeType","toggleTheme","ThemeProvider","children","useState","_jsx","Provider","value","prevTheme","useTheme","context","useContext","undefined","LoginScreen","navigation","route","setUsername","socketService","params","useEffect","styles","StyleSheet","create","container","flex","padding","justifyContent","backgroundColor","title","fontSize","textAlign","marginBottom","color","input","borderWidth","borderColor","borderRadius","buttonContainer","marginTop","subtitle","_jsxs","View","style","Text","TextInput","onChangeText","placeholder","placeholderTextColor","autoCapitalize","autoCorrect","Button","onPress","async","trim","joinResponse","replace","errorMessage","Alert","alert","text","HomeScreen","welcome","gap","handleCreateGame","navigate","handleJoinGame","GameManagement","onAddAgent","onStartGame","playerCount","players","isOwner","onKickPlayer","onReorderPlayer","gameCharacteristics","fontWeight","controls","flexDirection","playerListContainer","height","playerList","playerRow","paddingVertical","paddingHorizontal","borderBottomWidth","borderBottomColor","alignItems","playerActions","actionButton","kickButton","moveButton","width","upButton","downButton","buttonSpacer","hasCorrectNumberOfPlayers","minPlayers","maxPlayers","Infinity","playerGroupSize","ScrollView","map","player","name","isAgent","TouchableOpacity","_Fragment","require","CardRender","card","disabled","isRed","suit","Object","assign","className","cursor","redText","hearts","diamonds","clubs","spades","margin","opacity","defaultDesignProps","TABLE_SIZE","TABLE_MEMBERS_EXPANSION_FACTOR","CARD_RADIUS_FACTOR","PLAYER_RADIUS_FACTOR","MIN_GAME_AREA_HEIGHT","CARD_SIZE","PLAYER_INFO_MIN_WIDTH","GamePlay","gameState","onPlayCard","onExtraAction","position","alignSelf","display","headerRow","status","trickContainer","zIndex","trickTable","tableBackground","cardPositioner","trickCardContainer","handContainer","flexShrink","handWrapper","handContent","hand","flexGrow","extraActionContainer","gameArea","marginVertical","playAreaContainer","playerTable","playerInfo","minWidth","winningPlayerInfo","playerNameFixed","currentPlayerName","playerStats","trumpInfo","top","right","trumpTitle","trumpHolder","teamScoreContainer","teamScoreCard","playerTeamCard","teamName","teamScore","playerTeamScore","currentPlayerIndex","public","isCurrentPlayer","isResolvingTrick","gameSpecificData","isResolvingTurnEnd","isResolvingGameEnd","private","currentTrick","scores","canToggle","trumpCard","teams","gamePoints","playerTeamIndex","findIndex","team","includes","windowWidth","Dimensions","windowHeight","responsiveStyles","getResponsiveStyles","designProps","length","isPlayerTeam","minHeight","renderTrumpInfo","trumpHolderName","find","p","renderCurrentTrick","myPlayerIndex","numPlayers","CARD_RADIUS","getCardPosition","playerIndex","relativePos","angle","Math","PI","transform","translateX","cos","translateY","sin","rotate","cardPlayerId","renderPlayers","PLAYER_RADIUS","winningTeams","getWinningTeams","teamScores","reduce","sum","s","score","maxScore","max","filter","getPlayerPosition","playerScore","isWinningPlayer","horizontal","contentContainerStyle","isHighWins","maxHeight","maxWidth","GameEnd","gamePointsReversed","scoreList","teamRow","playerTeamRow","winnerRow","rankAndTeam","rank","marginRight","teamMembers","teamTitle","marginLeft","playerTeamText","points","sortedTeams","teamIndex","sort","a","b","isWinner","memberId","GamePhase","ConfirmDialog","visible","message","onConfirm","onCancel","Modal","transparent","animationType","onRequestClose","overlay","dialog","button","cancelButton","buttonText","confirmButton","marginHorizontal","LeaveGameButton","showConfirm","setShowConfirm","useNavigation","leaveButton","reset","routes","ShareGameLink","shareButton","webUrl","pathname","window","location","basePath","endsWith","substring","lastIndexOf","hostname","origin","url","navigator","clipboard","writeText","err","shareButtonText","GameScreen","setGameState","screenState","setScreenState","mode","showLeaveConfirm","setShowLeaveConfirm","appState","setAppState","AppState","currentState","useFocusEffect","useCallback","onBackPress","BackHandler","addEventListener","setOptions","headerLeft","removeEventListener","subscription","nextAppState","match","remove","handleNotInGame","prev","phase","handleAddAgent","handleStartGame","handlePlayCard","handleExtraAction","handleKickPlayer","handleReorderPlayer","headerButtons","trick","scoreboard","owner","FINISHED","GAME_TYPES","GameCreationScreen","setGameType","setGameName","formGroup","label","picker","Picker","selectedValue","onValueChange","itemValue","game","Item","finalGameName","random","toString","JoinGameScreen","setGameId","ThemeToggleButton","accessibilityLabel","accessibilityRole","Ionicons","size","WebStack","createStackNavigator","createNativeStackNavigator","AppContent","Stack","navigationRef","useRef","initialRoute","setInitialRoute","isReady","setIsReady","navigationTheme","DefaultTheme","background","border","primary","handleDeepLink","nativeMatch","webMatch","current","URLSearchParams","search","sessionStorage","getItem","removeItem","history","replaceState","cleanUrl","document","Linking","getInitialURL","onDisconnect","StatusBar","barStyle","NavigationContainer","theme","ref","initialState","Navigator","initialRouteName","screenOptions","headerShown","headerStyle","headerTitleStyle","headerTintColor","headerRight","Screen","component","options","registerRootComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","i","fulfilled","j","keys","every","key","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","g","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}