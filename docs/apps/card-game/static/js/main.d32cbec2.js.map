{"version":3,"file":"static/js/main.d32cbec2.js","mappings":"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","sources":["src/shared/types/actions.ts","src/config/env.ts","src/services/socket.service.ts","src/theme/ThemeContext.tsx","src/screens/LoginScreen.tsx","src/screens/HomeScreen.tsx","src/components/GameManagement.tsx","src/components/Card.tsx","src/components/GamePlay.tsx","src/components/GameEnd.tsx","src/shared/types/game-state.ts","src/components/ConfirmDialog.tsx","src/components/LeaveGameButton.tsx","src/components/ShareGameLink.tsx","src/screens/GameScreen.tsx","src/screens/GameCreationScreen.tsx","src/screens/JoinGameScreen.tsx","src/components/ThemeToggleButton.tsx","App.tsx","index.ts","webpack://web/./src/components/Card.web.css?a5d3","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { AvailableGames } from './game-state';\n\n// Authentication Actions\nexport enum AuthActions {\n    LOGIN = 'auth/login',\n    LOGOUT = 'auth/logout',\n    HEARTBEAT = 'auth:heartbeat'\n}\n\nexport type LoginPayload = {\n    username: string;\n}\n\nexport type LoginResponse = {\n    success: boolean;\n    error?: string;\n    userId?: string;\n}\n\n// Main Service Actions\nexport enum MainActions {\n    CREATE_GAME = 'main/createGame',\n    JOIN_GAME = 'main/joinGame',\n    LEAVE_GAME = 'main/leaveGame'\n}\n\nexport type CreateGamePayload = {\n    gameType: AvailableGames;\n}\n\nexport type JoinGamePayload = {\n    gameId: string;\n}\n\n// Game Administrative Actions\nexport enum GameAdminActions {\n    ADD_AGENT = 'game/admin/addAgent',\n    START_GAME = 'game/admin/startGame',\n    KICK_PLAYER = 'game/admin/kickPlayer',\n    LEAVE_GAME = 'game/admin/leaveGame',\n    REORDER_PLAYER = 'game/admin/reorderPlayer'\n}\n\nexport type KickPlayerPayload = {\n    playerId: string;\n}\n\n// Game Play Actions\nexport enum GamePlayActions {\n    PLAY_CARD = 'game/play/playCard',\n    EXTRA_ACTION = 'game/play/extraAction'\n}\n\nexport interface PlayCardPayload {\n    cardIndex: number;\n    gameId: string;\n}\n\nexport interface ExtraActionPayload {\n    actionType: string;\n    actionData: Record<string, unknown>;\n    gameId: string;\n}\n\n// Server Broadcast Types\nexport enum BroadcastTypes {\n    STATE = 'broadcast/state',\n    GAME_ERROR = 'broadcast/gameError',\n    GAME_ENDED = 'broadcast/gameEnded',\n    GAME_DELETED = 'broadcast/gameDeleted',\n    NOT_IN_GAME = 'broadcast/notInGame'\n}\n\nexport interface GameEndedPayload {\n    gameId: string;\n    winner?: string;\n}\n\nexport interface GameErrorPayload {\n    gameId: string;\n    error: string;\n}","const ENV = {\n    development: {\n      socketUrl: 'http://localhost:3000',\n      socketPath: '/socket.io/',\n    },\n    production: {\n      socketUrl: 'https://suecatatau-server-production.up.railway.app',\n      socketPath: '/socket.io/',\n    }\n  };\n  \n  // In development, the app can connect to your local server\n  // In production, it will connect to the Railway server\n  const getEnvironment = () => {\n    if (__DEV__) {\n      return ENV.development;\n    }\n    return ENV.production;\n  };\n  \n  export default getEnvironment();","import { io, Socket } from 'socket.io-client';\nimport { AvailableGames } from '../shared/types/game-state';\nimport { AuthActions, GamePlayActions, GameAdminActions, MainActions } from '../shared/types/actions';\nimport { BroadcastTypes } from '../shared/types/actions';\nimport { GameBroadcastState } from '../shared/types/game-state';\nimport config from '../config/env';\n\ninterface LoginResponse {\n    success: boolean;\n    userId?: string;\n    error?: string;\n}\n\ninterface GameResponse {\n    success: boolean;\n    gameId?: string;\n    error?: string;\n}\n\nexport class SocketService {\n    private socket: Socket;\n    private static instance: SocketService;\n    private currentUser: { username: string; userId: string } | null = null;\n    private reconnectAttempts: number = 0;\n    private readonly MAX_RECONNECT_ATTEMPTS = 5;\n    private heartbeatInterval: NodeJS.Timeout | null = null;\n    private readonly HEARTBEAT_INTERVAL = 60 * 1000; // Send heartbeat every minute\n    private eventHandlers: Map<string, Function[]> = new Map();\n\n    private constructor() {\n        this.socket = io(config.socketUrl, {\n            transports: ['websocket', 'polling'],\n            path: config.socketPath,\n            autoConnect: false,\n            reconnection: true,\n            reconnectionAttempts: this.MAX_RECONNECT_ATTEMPTS,\n            reconnectionDelay: 1000,\n            timeout: 10000\n        });\n\n        console.log('SocketService constructor called, connecting to:', config.socketUrl);\n        \n        this.setupSocketListeners();\n    }\n\n    private setupSocketListeners() {\n        this.socket.on('connect', () => {\n            console.log('Socket CONNECTED, ID:', this.socket.id);\n            this.reconnectAttempts = 0;\n        });\n\n        this.socket.on('disconnect', (reason) => {\n            console.log('Socket DISCONNECTED, was ID:', this.socket.id, 'Reason:', reason);\n            if (reason === 'io server disconnect') {\n                // the disconnection was initiated by the server, reconnect manually\n                this.socket.connect();\n            }\n        });\n\n        this.socket.on('connect_error', (error) => {\n            console.error('Connection error:', error);\n            this.reconnectAttempts++;\n            \n            if (this.reconnectAttempts >= this.MAX_RECONNECT_ATTEMPTS) {\n                console.error('Max reconnection attempts reached');\n                this.socket.disconnect();\n            }\n        });\n\n        this.socket.on('reconnect', (attemptNumber) => {\n            console.log('Socket RECONNECTED, new ID:', this.socket.id, 'Attempt:', attemptNumber);\n        });\n\n        this.socket.on('reconnect_attempt', (attemptNumber) => {\n            console.log('Socket RECONNECTING, attempt:', attemptNumber);\n        });\n\n        this.socket.on(BroadcastTypes.STATE, (state: GameBroadcastState) => {\n            console.log('Received state update for socket ID:', this.socket.id);\n        });\n\n        this.socket.on(BroadcastTypes.GAME_DELETED, (data: { gameId: string }) => {\n            console.log('Received game deleted event for socket ID:', this.socket.id, 'Game ID:', data.gameId);\n        });\n\n        this.socket.on(BroadcastTypes.NOT_IN_GAME, (data: { gameId: string, playerId: string }) => {\n            console.log('Received not in game event for socket ID:', this.socket.id, 'Game ID:', data.gameId, 'Player ID:', data.playerId);\n            \n            this.triggerEvent(BroadcastTypes.NOT_IN_GAME, data);\n        });\n\n        this.socket.on('forceDisconnect', (data: { reason: string }) => {\n            console.log('[Client Force Disconnect]', {\n                socketId: this.socket.id,\n                userId: this.currentUser?.userId,\n                reason: data.reason,\n                timestamp: new Date().toISOString()\n            });\n            this.clearHeartbeat();\n            this.clearCurrentUser();\n            this.socket.disconnect();\n        });\n    }\n\n    public static getInstance(): SocketService {\n        if (!SocketService.instance) {\n            SocketService.instance = new SocketService();\n        }\n        return SocketService.instance;\n    }\n\n    public connect(playerName: string): Promise<void> {\n        console.log('Connect called, current socket ID:', this.socket.id);\n        return new Promise((resolve, reject) => {\n            if (this.socket.connected) {\n                console.log('Socket already connected with ID:', this.socket.id);\n                resolve();\n                return;\n            }\n            \n            this.socket.connect();\n            this.socket.on('connect', () => {\n                console.log('Connected to server with ID:', this.socket.id);\n                resolve();\n            });\n            \n            this.socket.on('connect_error', (error) => {\n                reject(error);\n            });\n        });\n    }\n\n    public createGame(playerName: string, gameType: AvailableGames, gameName: string): Promise<GameResponse> {\n        return new Promise<GameResponse>((resolve, reject) => {\n            console.log('Emitting createGame event with playerName:', playerName,\n                'and gameType:', gameType);\n\n            const timeout = setTimeout(() => {\n                reject(new Error('createGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.CREATE_GAME, { playerName, gameType, gameName}, (response: GameResponse) => {\n                console.log('Received response from createGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public joinGame(gameId: string, playerName: string): Promise<{ success: boolean }> {\n        return new Promise<{ success: boolean }>((resolve, reject) => {\n            console.log('Emitting joinGame event with gameId:', gameId, 'playerName:', playerName);\n\n            // Add timeout to detect if callback never happens\n            const timeout = setTimeout(() => {\n                reject(new Error('joinGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.JOIN_GAME, { gameId, playerName }, (response: { success: boolean }) => {\n                console.log('Received response from joinGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            // Add error handler\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public addAgent(gameId: string): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GameAdminActions.ADD_AGENT, { gameId }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public startGame(gameId: string): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GameAdminActions.START_GAME, { gameId }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public playCard(gameId: string, cardIndex: number): Promise<{ success: boolean }> {\n        return new Promise((resolve) => {\n            this.socket.emit(GamePlayActions.PLAY_CARD, { gameId, cardIndex }, (response: { success: boolean }) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public onGameState(callback: (state: GameBroadcastState) => void) {\n\n        console.log('Setting up game state listener for socket:', {\n            socketId: this.socket.id,\n            userId: this.currentUser?.userId,\n            connected: this.socket.connected\n        });\n    \n        this.socket.onAny((eventName, ...args) => {\n            console.log('Received event:', eventName, 'Socket ID:', this.socket.id, 'Args:', args);\n        });\n    \n        this.socket.on(BroadcastTypes.STATE, (state: GameBroadcastState) => {\n            console.log('Received game state for socket:', {\n                socketId: this.socket.id,\n                userId: this.currentUser?.userId,\n                state\n            });\n            callback(state);\n        });    \n\n        this.socket.on('connect', () => {\n            console.log('Socket connected:', this.socket.id);\n        });\n\n        this.socket.on('disconnect', () => {\n            console.log('Socket disconnected');\n        });\n    }\n\n    public disconnect() {\n        this.socket.disconnect();\n    }\n\n    public setupHeartbeat() {\n        if (this.heartbeatInterval) {\n            clearInterval(this.heartbeatInterval);\n            console.log('[Client Heartbeat] Cleared existing heartbeat interval');\n        }\n\n        console.log('[Client Heartbeat] Setting up new heartbeat interval');\n        this.heartbeatInterval = setInterval(() => {\n            if (this.socket.connected && this.currentUser) {\n                console.log('[Client Heartbeat] Sending heartbeat');\n\n                // Set a timeout to detect if the heartbeat response never comes back\n                const heartbeatTimeout = setTimeout(() => {\n                    console.warn('[Client Heartbeat] Heartbeat response timeout - connection may be stale');\n                    // Force reconnection attempt\n                    this.socket.disconnect();\n                    this.reconnect().catch(error => {\n                        console.error('Failed to reconnect after heartbeat timeout:', error);\n                    });\n                }, 10000); // 10 second timeout\n\n                this.socket.emit(AuthActions.HEARTBEAT, {}, (response: { success: boolean }) => {\n                    clearTimeout(heartbeatTimeout);\n                    console.log('[Client Heartbeat] Received response:', {\n                        socketId: this.socket.id,\n                        userId: this.currentUser?.userId,\n                        success: response.success,\n                        timestamp: new Date().toISOString()\n                    });\n\n                    if (!response.success) {\n                        console.warn('[Client Heartbeat] Failed, initiating logout');\n                        this.logout();\n                    }\n                });\n            } else {\n                console.log('[Client Heartbeat] Skipped: Socket disconnected or no user', {\n                    connected: this.socket.connected,\n                    hasUser: !!this.currentUser\n                });\n            }\n        }, this.HEARTBEAT_INTERVAL);\n    }\n\n    private clearHeartbeat() {\n        if (this.heartbeatInterval) {\n            console.log('[Client Heartbeat] Clearing heartbeat interval');\n            clearInterval(this.heartbeatInterval);\n            this.heartbeatInterval = null;\n        }\n    }\n\n    public login(username: string): Promise<LoginResponse> {\n        return new Promise((resolve) => {\n            this.socket.connect();\n            console.log('Logging in with socket ID:', this.socket.id);\n            \n            this.socket.emit(AuthActions.LOGIN, { username }, (response: LoginResponse) => {\n                console.log('Login response received for socket:', {\n                    socketId: this.socket.id,\n                    response\n                });\n                if (response.success) {\n                    this.setCurrentUser(username, response.userId!);\n                    this.setupHeartbeat(); // Start heartbeat after successful login\n                } else {\n                    this.socket.disconnect();\n                }\n                resolve(response);\n            });\n        });\n    }\n\n    public extraAction(gameId: string, actionType: string, actionData: any): Promise<GameResponse> {\n        return new Promise((resolve) => {\n            this.socket.emit(GamePlayActions.EXTRA_ACTION, { \n                gameId, \n                actionType, \n                actionData \n            }, (response: GameResponse) => {\n                resolve(response);\n            });\n        });\n    }\n\n    public setCurrentUser(username: string, userId: string) {\n        this.currentUser = { username, userId };\n    }\n\n    public getCurrentUser() {\n        return this.currentUser;\n    }\n\n    public clearCurrentUser() {\n        this.currentUser = null;\n    }\n\n    public async logout(): Promise<void> {\n        this.clearHeartbeat(); // Stop heartbeat before logout\n        if (this.currentUser) {\n            await new Promise<void>((resolve) => {\n                this.socket.emit(AuthActions.LOGOUT, {}, () => {\n                    this.clearCurrentUser();\n                    this.socket.disconnect();\n                    resolve();\n                });\n            });\n        }\n    }\n\n    public leaveGame(gameId: string): Promise<{ success: boolean; error?: string }> {\n        return new Promise((resolve, reject) => {\n            console.log('Emitting leaveGame event with gameId:', gameId);\n\n            const timeout = setTimeout(() => {\n                reject(new Error('leaveGame timeout'));\n            }, 5000);\n\n            this.socket.emit(MainActions.LEAVE_GAME, { gameId }, (response: { success: boolean; error?: string }) => {\n                console.log('Received response from leaveGame:', response);\n                clearTimeout(timeout);\n                resolve(response);\n            });\n\n            this.socket.on('error', (error) => {\n                console.error('Socket error:', error);\n                reject(error);\n            });\n        });\n    }\n\n    public kickPlayer(gameId: string, playerId: string): void {\n        this.socket.emit(GameAdminActions.KICK_PLAYER, { gameId, playerId });\n    }\n\n    public on(event: string, callback: Function) {\n        if (!this.eventHandlers.has(event)) {\n            this.eventHandlers.set(event, []);\n        }\n        this.eventHandlers.get(event)?.push(callback);\n    }\n    \n    public off(event: string, callback: Function) {\n        if (!this.eventHandlers.has(event)) return;\n        \n        const handlers = this.eventHandlers.get(event) || [];\n        const index = handlers.indexOf(callback);\n        if (index !== -1) {\n            handlers.splice(index, 1);\n        }\n    }\n    \n    private triggerEvent(event: string, ...args: any[]) {\n        const handlers = this.eventHandlers.get(event) || [];\n        handlers.forEach(handler => handler(...args));\n    }\n\n    public isConnected(): boolean {\n        return this.socket.connected;\n    }\n    \n    public reconnect(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (this.socket.connected) {\n                console.log('Socket already connected, no need to reconnect');\n                resolve();\n                return;\n            }\n            \n            console.log('Attempting to reconnect socket...');\n            \n            // Set timeout for reconnection attempt\n            const timeout = setTimeout(() => {\n                reject(new Error('Socket reconnection timeout'));\n            }, 5000);\n            \n            const onConnect = () => {\n                clearTimeout(timeout);\n                this.socket.off('connect', onConnect);\n                this.socket.off('connect_error', onError);\n                \n                // If we have a current user, reestablish authentication\n                if (this.currentUser) {\n                    this.login(this.currentUser.username)\n                        .then(response => {\n                            if (response.success) {\n                                console.log('Re-authenticated after reconnect');\n                                resolve();\n                            } else {\n                                reject(new Error('Failed to re-authenticate after reconnection'));\n                            }\n                        })\n                        .catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n            \n            const onError = (error: any) => {\n                clearTimeout(timeout);\n                this.socket.off('connect', onConnect);\n                this.socket.off('connect_error', onError);\n                reject(error);\n            };\n            \n            this.socket.on('connect', onConnect);\n            this.socket.on('connect_error', onError);\n            \n            // Connect the socket\n            this.socket.connect();\n        });\n    }\n\n    public getSocket(): Socket {\n        return this.socket;\n    }\n\n    public reorderPlayer(gameId: string, playerId: string, direction: 'up' | 'down') {\n        this.socket.emit(GameAdminActions.REORDER_PLAYER, {\n            gameId,\n            playerId,\n            direction\n        });\n    }\n\n    public isLoggedIn(): boolean {\n        return !!this.currentUser;\n    }\n}\n","// Theme context with provider for theme switching\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\nexport type ThemeType = 'light' | 'dark';\n\n// Theme color interface containing all colors used in the app\nexport interface ThemeColors {\n  // Card colors\n  cardBackground: string;\n  cardBorder: string;\n  cardTextBlack: string;\n  cardTextRed: string;\n  \n  // Dialog colors\n  dialogOverlay: string;\n  dialogBackground: string;\n  dialogCancelButton: string;\n  dialogConfirmButton: string;\n  dialogButtonText: string;\n  \n  // Button colors\n  leaveButtonBackground: string;\n  leaveButtonText: string;\n  \n  // Game UI colors\n  playerInfoBackground: string;\n  playerInfoBorder: string;\n  currentPlayerText: string;\n  playerStatsText: string;\n  trumpInfoBackground: string;\n  trumpInfoBorder: string;\n  teamScoreCardBackground: string;\n  teamScoreCardBorder: string;\n  \n  // Input & form colors\n  inputBorder: string;\n  inputBackground: string;\n  inputText: string;\n  placeholderText: string;\n  \n  // Game table colors\n  tableFelt: string;\n  tableEdge: string;\n  \n  // Status text colors\n  statusText: string;\n  subtitleText: string;\n  \n  // Team score colors\n  playerTeamBackground: string;\n  playerTeamBorder: string;\n  teamScoreText: string;\n  playerTeamScoreText: string;\n  accent: string;\n  \n  // Home screen colors\n  welcomeText: string;\n  logoutButton: string;\n  primaryButton: string;\n  primaryButtonText: string;\n  \n  // App background colors\n  appBackground: string;\n  containerBackground: string;\n  pickerBackground: string;\n  titleText: string;\n  \n  // New colors\n  winningPlayerBackground: string;\n  winningPlayerBorder: string;\n\n  // Share button colors\n  shareButtonBackground: string;\n  shareButtonText: string;\n}\n\n// Light theme (default - exactly matches current hardcoded colors)\nexport const lightColors: ThemeColors = {\n  // Card colors\n  cardBackground: 'white',\n  cardBorder: '#ddd',\n  cardTextBlack: 'black',\n  cardTextRed: 'red',\n  \n  // Dialog colors\n  dialogOverlay: 'rgba(0, 0, 0, 0.5)',\n  dialogBackground: 'white',\n  dialogCancelButton: '#666',\n  dialogConfirmButton: '#d32f2f',\n  dialogButtonText: 'white',\n  \n  // Button colors\n  leaveButtonBackground: '#d32f2f',\n  leaveButtonText: 'white',\n  \n  // Game UI colors\n  playerInfoBackground: 'rgba(255, 255, 255, 0.9)',\n  playerInfoBorder: '#ccc',\n  currentPlayerText: '#4CAF50',\n  playerStatsText: '#666',\n  trumpInfoBackground: 'rgba(255, 255, 255, 0.9)',\n  trumpInfoBorder: '#ccc',\n  teamScoreCardBackground: 'rgba(255, 255, 255, 0.6)',\n  teamScoreCardBorder: 'rgba(0, 0, 0, 0.1)',\n  \n  // Input & form colors\n  inputBorder: '#ddd',\n  inputBackground: 'white',\n  inputText: 'black',\n  placeholderText: 'gray',\n  \n  // Game table colors\n  tableFelt: '#1B5E20',\n  tableEdge: '#4A3211',\n  \n  // Status text colors\n  statusText: '#000000',\n  subtitleText: '#000000',\n  \n  // Team score colors\n  playerTeamBackground: 'rgba(220, 242, 220, 0.7)',\n  playerTeamBorder: 'rgba(76, 175, 80, 0.3)',\n  teamScoreText: '#333',\n  playerTeamScoreText: '#1B5E20',\n  accent: '#66bb6a',\n  \n  // Home screen colors\n  welcomeText: '#000000',\n  logoutButton: '#d32f2f',\n  primaryButton: '#2196f3',\n  primaryButtonText: 'white',\n  \n  // App background colors\n  appBackground: '#e8f5e9', // Light mint green background\n  containerBackground: '#e8f5e9', // Very light sage green\n  pickerBackground: '#e0f2f1', // Subtle teal tint for picker\n  titleText: '#000000', // Keeping text black as requested\n  \n  // New colors\n  winningPlayerBackground: '#4a9eff30',  // Semi-transparent blue\n  winningPlayerBorder: '#4a9eff',       // Solid blue\n\n  // Share button colors\n  shareButtonBackground: '#4CAF50',\n  shareButtonText: 'white',\n};\n\n// Dark theme colors (for future use)\nexport const darkColors: ThemeColors = {\n  // Card colors\n  cardBackground: '#2c2c2c',\n  cardBorder: '#444',\n  cardTextBlack: '#e0e0e0',\n  cardTextRed: '#ff6b6b',\n  \n  // Dialog colors\n  dialogOverlay: 'rgba(0, 0, 0, 0.7)',\n  dialogBackground: '#2c2c2c',\n  dialogCancelButton: '#555',\n  dialogConfirmButton: '#b71c1c',\n  dialogButtonText: '#e0e0e0',\n  \n  // Button colors\n  leaveButtonBackground: '#b71c1c',\n  leaveButtonText: '#e0e0e0',\n  \n  // Game UI colors\n  playerInfoBackground: 'rgba(40, 40, 40, 0.9)',\n  playerInfoBorder: '#444',\n  currentPlayerText: '#66bb6a',\n  playerStatsText: '#aaa',\n  trumpInfoBackground: 'rgba(40, 40, 40, 0.9)',\n  trumpInfoBorder: '#444',\n  teamScoreCardBackground: 'rgba(40, 40, 40, 0.6)',\n  teamScoreCardBorder: 'rgba(255, 255, 255, 0.1)',\n  \n  // Input & form colors\n  inputBorder: '#444',\n  inputBackground: '#222',\n  inputText: '#e0e0e0',\n  placeholderText: '#aaa',\n  \n  // Game table colors\n  tableFelt: '#0c3912',\n  tableEdge: '#2A1901',\n  \n  // Status text colors\n  statusText: '#e0e0e0',\n  subtitleText: '#e0e0e0',\n  \n  // Team score colors\n  playerTeamBackground: 'rgba(40, 97, 40, 0.7)',\n  playerTeamBorder: 'rgba(76, 175, 80, 0.3)',\n  teamScoreText: '#e0e0e0',\n  playerTeamScoreText: '#66bb6a',\n  accent: '#66bb6a',\n  \n  // Home screen colors\n  welcomeText: '#e0e0e0',\n  logoutButton: '#b71c1c',\n  primaryButton: '#1565c0',\n  primaryButtonText: '#e0e0e0',\n  \n  // App background colors\n  appBackground: '#121212',\n  containerBackground: '#121212',\n  pickerBackground: '#333',\n  titleText: '#e0e0e0',\n  \n  // New colors\n  winningPlayerBackground: '#4a9eff30',  // Semi-transparent blue\n  winningPlayerBorder: '#4a9eff',       // Solid blue\n\n  // Share button colors\n  shareButtonBackground: '#4CAF50',\n  shareButtonText: 'white',\n};\n\n// Define the shape of our theme context\ninterface ThemeContextType {\n  themeType: ThemeType;\n  colors: ThemeColors;\n  setThemeType: (type: ThemeType) => void;\n  toggleTheme: () => void;\n}\n\n// Create the context with default values\nconst ThemeContext = createContext<ThemeContextType>({\n  themeType: 'light',\n  colors: lightColors,\n  setThemeType: () => {},\n  toggleTheme: () => {},\n});\n\n// Theme provider component\nexport const ThemeProvider: React.FC<{children: ReactNode}> = ({ children }) => {\n  const [themeType, setThemeType] = useState<ThemeType>('dark');\n  \n  // Get the colors based on the current theme type\n  const colors = themeType === 'light' ? lightColors : darkColors;\n  \n  // Function to toggle between light and dark themes\n  const toggleTheme = () => {\n    setThemeType(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ themeType, colors, setThemeType, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// Custom hook to use the theme\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// For backward compatibility - export the light colors as the default\n// This ensures existing code that uses `import { colors } from '../theme/ThemeContext'` won't break\n// export const colors = lightColors;","import React, { useState, useEffect } from 'react';\nimport { View, TextInput, StyleSheet, Text, Alert, TouchableOpacity } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const LoginScreen = ({ navigation, route }: { navigation: any, route: any }) => {\n    const [username, setUsername] = useState('');\n    const socketService = SocketService.getInstance();\n    const { colors } = useTheme();\n    \n    // Extract gameId from route params if it exists\n    const gameId = route.params?.gameId;\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            justifyContent: 'center',\n            backgroundColor: colors.containerBackground,\n        },\n        title: {\n            fontSize: 24,\n            textAlign: 'center',\n            marginBottom: 30,\n            color: colors.titleText,\n        },\n        input: {\n            borderWidth: 1,\n            borderColor: colors.inputBorder,\n            backgroundColor: colors.inputBackground,\n            padding: 10,\n            marginBottom: 20,\n            borderRadius: 5,\n            color: colors.titleText,\n        },\n        buttonContainer: {\n            marginTop: 10,\n        },\n        button: {\n            backgroundColor: colors.primaryButton,\n            padding: 12,\n            borderRadius: 5,\n            alignItems: 'center',\n        },\n        buttonText: {\n            color: colors.primaryButtonText,\n            fontSize: 16,\n            fontWeight: 'bold',\n        },\n        subtitle: {\n            fontSize: 16,\n            marginBottom: 10,\n        }\n    });\n\n    useEffect(() => {\n        if (gameId) {\n            console.log('LoginScreen received gameId:', gameId);\n        }\n    }, [gameId]);\n\n    const handleLogin = async () => {\n        if (!username.trim()) {\n            Alert.alert('Error', 'Please enter a username');\n            return;\n        }\n\n        try {\n            console.log('Logging in with username:', username);\n            const response = await socketService.login(username);\n            \n            if (response.success) {\n                // Store the username globally in the SocketService\n                socketService.setCurrentUser(username, response.userId!);\n                console.log('Login successful.');\n                \n                // If we have a gameId from deep link, join game directly\n                if (gameId) {\n                    console.log('Joining game directly with ID:', gameId);\n                    try {\n                        await socketService.connect(username);\n                        const joinResponse = await socketService.joinGame(gameId, username) as { success: boolean; error?: string };\n                        \n                        if (joinResponse.success) {\n                            navigation.replace('Game', { gameId, playerName: username });\n                        } else {\n                            // Show specific error message based on the error\n                            const errorMessage = joinResponse.error || 'Could not join the game. You will be redirected to the home screen.';\n                            \n                            Alert.alert(\n                                'Game Join Failed', \n                                errorMessage,\n                                [{ text: 'OK', onPress: () => navigation.replace('Home') }]\n                            );\n                        }\n                    } catch (error) {\n                        console.error('Error joining game:', error);\n                        Alert.alert(\n                            'Connection Error', \n                            'Failed to connect to the game server. Please try again later.',\n                            [{ text: 'OK', onPress: () => navigation.replace('Home') }]\n                        );\n                    }\n                } else {\n                    // Normal login flow\n                    navigation.replace('Home');\n                }\n            } else {\n                console.log('Login failed:', response.error || 'Username already taken');\n                // Show more helpful error message\n                const errorMessage = response.error || 'This username is already in use. Please choose a different one.';\n                Alert.alert('Login Failed', errorMessage);\n            }\n        } catch (error) {\n            console.error('Server connection error:', error);\n            Alert.alert(\n                'Connection Error', \n                'Could not connect to the server. Please check your internet connection and try again.'\n            );\n        }\n    };\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>\n                {gameId ? 'Enter Your Username to Join Game' : 'Enter Your Username'}\n            </Text>\n            {gameId && (\n                <Text style={[styles.subtitle, { color: colors.subtitleText }]}>\n                    You're joining game: {gameId}\n                </Text>\n            )}\n            <TextInput\n                style={styles.input}\n                onChangeText={setUsername}\n                value={username}\n                placeholder=\"Username\"\n                placeholderTextColor={colors.playerStatsText}\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n            />\n            <View style={styles.buttonContainer}>\n                <TouchableOpacity \n                    style={styles.button}\n                    onPress={handleLogin}\n                >\n                    <Text style={styles.buttonText}>\n                        {gameId ? \"Login & Join Game\" : \"Login\"}\n                    </Text>\n                </TouchableOpacity>\n            </View>\n        </View>\n    );\n}; ","import React from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const HomeScreen: React.FC<{ navigation: any }> = ({ navigation }) => {\n    const { colors, toggleTheme, themeType } = useTheme();\n\n    const socketService = SocketService.getInstance();\n    const username = socketService.getCurrentUser()?.username;\n\n    const handleCreateGame = () => {\n        console.log('Creating game');\n        navigation.navigate('GameCreation', { playerName: username });\n    };\n\n    const handleJoinGame = () => {\n        console.log('Joining game');\n        navigation.navigate('JoinGame', { playerName: username });\n    };\n\n    const handleLogout = async () => {\n        await socketService.logout();\n        console.log('Logging out');\n        navigation.replace('Login');\n    };\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            justifyContent: 'center',\n        },\n        welcome: {\n            fontSize: 24,\n            textAlign: 'center',\n            marginBottom: 30,\n            color: colors.welcomeText,\n        },\n        buttonContainer: {\n            gap: 10,\n        },\n    });\n    \n    return (\n        <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n            <Text style={styles.welcome}>Welcome, {username}!</Text>\n            <View style={styles.buttonContainer}>\n                <Button \n                    title=\"Create Game\" \n                    onPress={handleCreateGame}\n                    color={colors.primaryButton}\n                />\n                <Button \n                    title=\"Join Game\" \n                    onPress={handleJoinGame}\n                    color={colors.primaryButton}\n                />\n                <Button \n                    title=\"Logout\" \n                    onPress={handleLogout} \n                    color={colors.logoutButton}\n                />\n            </View>\n        </View>\n    );\n};\n","import React from 'react';\nimport { View, Text, Button, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\n\nexport interface GameManagementProps {\n    gameId: string;\n    onAddAgent: () => void;\n    onStartGame: () => void;\n    playerCount: number;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n        isOwner?: boolean;\n    }>;\n    isOwner: boolean;\n    onKickPlayer: (playerId: string) => void;\n    onReorderPlayer: (playerId: string, direction: 'up' | 'down') => void;\n    gameCharacteristics: {\n        minPlayers: number;\n        maxPlayers: number;\n        playerGroupSize: number;\n        extraActions: string[];\n        gamePointsReversed: boolean;\n    };\n}\n\nexport const GameManagement: React.FC<GameManagementProps> = ({\n    gameId,\n    onAddAgent,\n    onStartGame,\n    playerCount,\n    players,\n    isOwner,\n    onKickPlayer,\n    onReorderPlayer,\n    gameCharacteristics\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 10,\n        },\n        controls: {\n            flexDirection: 'column',\n            justifyContent: 'space-around',\n            marginTop: 20,\n        },\n        playerListContainer: {\n            marginTop: 10,\n            marginBottom: 10,\n            height: 160,\n            borderWidth: 1,\n            borderColor: '#ddd',\n            borderRadius: 5,\n        },\n        playerList: {\n            flex: 1,\n        },\n        playerRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            paddingVertical: 8,\n            paddingHorizontal: 10,\n            borderBottomWidth: 1,\n            borderBottomColor: '#eee',\n            alignItems: 'center',\n        },\n        playerName: {\n            fontSize: 16,\n            flex: 1,\n        },\n        playerActions: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'flex-end',\n        },\n        actionButton: {\n            paddingHorizontal: 2,\n        },\n        kickButton: {\n            color: 'red',\n            fontSize: 18,\n            fontWeight: 'bold',\n        },\n        moveButton: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            width: 18,\n            textAlign: 'center',\n        },\n        upButton: {\n            color: 'green',\n        },\n        downButton: {\n            color: 'blue',\n        },\n        buttonSpacer: {\n            marginTop: 10,\n        }\n    });\n\n    const hasCorrectNumberOfPlayers = playerCount >= (gameCharacteristics?.minPlayers || 2) && \n                                      playerCount <= (gameCharacteristics?.maxPlayers || Infinity) && \n                                      (playerCount % (gameCharacteristics?.playerGroupSize || 1) === 0);\n    \n    return (\n        <View style={styles.container}>\n            <Text style={[styles.subtitle, { color: colors.titleText }]}>Game Setup</Text>\n            <Text style={{ color: colors.statusText }}>Players: {playerCount} (Min: {gameCharacteristics?.minPlayers || 2})</Text>\n            \n            <View style={styles.playerListContainer}>\n                <ScrollView style={styles.playerList}>\n                    {players.map((player, index) => (\n                        <View key={player.id} style={styles.playerRow}>\n                            <Text style={[styles.playerName, { color: colors.statusText }]}>\n                                {player.name} {player.isAgent ? '(AI)' : ''} {player.isOwner ? '(Owner)' : ''}\n                            </Text>\n                            {isOwner && !player.isOwner && (\n                                <View style={styles.playerActions}>\n                                    <TouchableOpacity\n                                        onPress={() => onReorderPlayer(player.id, 'up')}\n                                        style={styles.actionButton}\n                                    >\n                                        <Text style={[styles.moveButton, styles.upButton]}>↑</Text>\n                                    </TouchableOpacity>\n                                    <TouchableOpacity\n                                        onPress={() => onReorderPlayer(player.id, 'down')}\n                                        style={styles.actionButton}\n                                    >\n                                        <Text style={[styles.moveButton, styles.downButton]}>↓</Text>\n                                    </TouchableOpacity>\n                                    <TouchableOpacity \n                                        onPress={() => onKickPlayer(player.id)}\n                                        style={styles.actionButton}\n                                    >\n                                        <Text style={styles.kickButton}>✕</Text>\n                                    </TouchableOpacity>\n                                </View>\n                            )}\n                        </View>\n                    ))}\n                </ScrollView>\n            </View>\n            \n            <View style={styles.controls}>\n                {isOwner && (\n                    <>\n                        <Button title=\"Add AI Player\" onPress={onAddAgent} />\n                        {hasCorrectNumberOfPlayers && (\n                            <View style={styles.buttonSpacer}>\n                                <Button title=\"Start Game\" onPress={onStartGame} />\n                            </View>\n                        )}\n                    </>\n                )}\n            </View>\n        </View>\n    );\n};","import React from 'react';\nimport { TouchableOpacity, Text, StyleSheet, Platform } from 'react-native';\nimport { Card } from '../shared/types/game-state';\nimport { useTheme } from '../theme/ThemeContext';\n\nif (Platform.OS === 'web') {\n    require('./Card.web.css');\n}\n\ninterface CardProps {\n    card: Card;\n    onPress?: () => void;\n    disabled?: boolean;\n}\n\nexport const CardRender: React.FC<CardProps> = ({ card, onPress, disabled }) => {\n    const suitSymbols = {\n        hearts: '♥',\n        diamonds: '♦',\n        clubs: '♣',\n        spades: '♠'\n    };\n\n    const { colors } = useTheme();\n\n    const styles = StyleSheet.create({\n        card: {\n            width: 60,\n            height: 90,\n            backgroundColor: colors.cardBackground,\n            borderRadius: 8,\n            borderWidth: 1,\n            borderColor: colors.cardBorder,\n            padding: 5,\n            margin: 2,\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        disabled: {\n            opacity: 0.5,\n        },\n        value: {\n            fontSize: 24,\n            color: colors.cardTextBlack,\n        },\n        suit: {\n            fontSize: 32,\n            color: colors.cardTextBlack,\n        },\n        redText: {\n            color: colors.cardTextRed,\n        },\n    });\n\n    const valueMap: { [key: number]: string } = {\n        11: 'J',\n        12: 'Q',\n        13: 'K',\n        14: 'A'\n    };\n\n    const isRed = card.suit === 'hearts' || card.suit === 'diamonds';\n\n    return (\n        <TouchableOpacity\n            style={[styles.card, disabled && styles.disabled]}\n            // @ts-ignore\n            className={Platform.OS === 'web' ? 'card-hover' : undefined}\n            onPress={onPress}\n            disabled={disabled}\n            // @ts-ignore\n            {...(Platform.OS === 'web' && {\n                style: [\n                    styles.card,\n                    disabled && styles.disabled,\n                    { cursor: 'pointer' }\n                ]\n            })}\n        >\n            <Text style={[styles.value, isRed && styles.redText]}>\n                {valueMap[card.value] || card.value}\n            </Text>\n            <Text style={[styles.suit, isRed && styles.redText]}>\n                {suitSymbols[card.suit]}\n            </Text>\n        </TouchableOpacity>\n    );\n};\n","import React from 'react';\nimport { View, Button, Text, ScrollView, StyleSheet, ViewStyle, Dimensions } from 'react-native';\nimport { CardRender } from './Card';\nimport { GameBroadcastState } from '../shared/types/game-state';\nimport { Card } from '../shared/types/game-state';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface GamePlayProps {\n    gameState: GameBroadcastState;\n    playerName: string;\n    playerId: string;\n    onPlayCard: (index: number) => void;\n    onExtraAction: (actionType: string, actionData: any) => void;\n}\n\n// Game design properties to control layout\ninterface GameDesignProps {\n    TABLE_SIZE: number;                  // Size of the table in px\n    TABLE_MEMBERS_EXPANSION_FACTOR: number; // Expansion factor for spacing elements\n    CARD_RADIUS_FACTOR: number;          // Position factor for cards from center\n    PLAYER_RADIUS_FACTOR: number;        // Position factor for players from center  \n    MIN_GAME_AREA_HEIGHT: number;        // Minimum height for game area\n    CARD_SIZE: {width: number, height: number}; // Size of cards\n    PLAYER_INFO_MIN_WIDTH: number;       // Minimum width for player info boxes\n}\n\n// Default design properties\nconst defaultDesignProps: GameDesignProps = {\n    TABLE_SIZE: 280,\n    TABLE_MEMBERS_EXPANSION_FACTOR: 2.5, // 200% expansion as requested\n    CARD_RADIUS_FACTOR: 0.5,           // Cards at 25% of table radius\n    PLAYER_RADIUS_FACTOR: 0.5,          // Players at 70% of table radius * expansion factor\n    MIN_GAME_AREA_HEIGHT: 350,\n    CARD_SIZE: {width: 60, height: 85},\n    PLAYER_INFO_MIN_WIDTH: 80\n};\n\nexport const GamePlay: React.FC<GamePlayProps> = ({\n    gameState,\n    playerName,\n    playerId,\n    onPlayCard,\n    onExtraAction\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            position: 'relative',\n            padding: 10,\n            width: '100%',\n            alignSelf: 'center',\n            display: 'flex',\n            flexDirection: 'column',\n        },\n        headerRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: 10,\n        },\n        status: {\n            fontSize: 16,\n            flex: 1,\n            color: colors.statusText,\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 5,\n            color: colors.subtitleText,\n        },\n        trickContainer: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 1,\n        },\n        trickTable: {\n            position: 'relative',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        tableBackground: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%',\n            borderRadius: 1000,\n            backgroundColor: colors.tableFelt,\n            borderWidth: 4,\n            borderColor: colors.tableEdge,\n        },\n        cardPositioner: {\n            position: 'absolute',\n            width: 0,\n            height: 0,\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        trickCardContainer: {\n            position: 'absolute',\n            alignItems: 'center',\n        },\n        handContainer: {\n            width: '100%',\n            marginTop: 5,\n            marginBottom: 10,\n            flexShrink: 0,\n        },\n        handWrapper: {\n            width: '100%',\n            height: 100,  // Fixed height\n        },\n        handContent: {\n            alignItems: 'center',\n            paddingHorizontal: 5,\n        },\n        hand: {\n            flexGrow: 0,\n        },\n        extraActionContainer: {\n            marginTop: 10,\n            marginBottom: 10,\n        },\n        gameArea: {\n            flex: 1,\n            position: 'relative',\n            marginVertical: 10,\n        },\n        playAreaContainer: {\n            width: '100%',\n            height: '100%',\n            position: 'relative',\n            alignItems: 'center',\n            justifyContent: 'center',\n        },\n        playerTable: {\n            position: 'absolute',\n            width: 0,  // Set to 0 to ensure proper centering\n            height: 0,  // Set to 0 to ensure proper centering\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 2,\n        },\n        playerInfo: {\n            position: 'absolute',\n            alignItems: 'center',\n            backgroundColor: colors.playerInfoBackground,\n            padding: 8,\n            borderRadius: 8,\n            minWidth: 80,\n            borderWidth: 1,\n            borderColor: colors.playerInfoBorder,\n        },\n        winningPlayerInfo: {\n            backgroundColor: colors.winningPlayerBackground || '#4a9eff30', // fallback color if theme doesn't define it\n            borderColor: colors.winningPlayerBorder || '#4a9eff',\n        },\n        playerNameFixed: {\n            fontSize: 12, // Smaller font\n            fontWeight: 'bold',\n            marginBottom: 2,\n        },\n        currentPlayerName: {\n            color: colors.currentPlayerText,\n            fontWeight: 'bold',\n        },\n        playerStats: {\n            fontSize: 10, // Smaller font\n            color: colors.playerStatsText,\n        },\n        trumpInfo: {\n            position: 'absolute',\n            top: 5,\n            right: 5,\n            alignItems: 'center',\n            backgroundColor: colors.trumpInfoBackground,\n            padding: 5, // Reduced padding\n            borderRadius: 6,\n            borderWidth: 1,\n            borderColor: colors.trumpInfoBorder,\n            zIndex: 10,\n        },\n        trumpTitle: {\n            fontSize: 14,\n            fontWeight: 'bold',\n            marginBottom: 4,\n        },\n        trumpHolder: {\n            fontSize: 12,\n            color: colors.playerStatsText,\n            marginTop: 4,\n        },\n        teamScoreContainer: {\n            flexDirection: 'row',\n            justifyContent: 'flex-end',\n            gap: 5, // Reduced gap\n        },\n        teamScoreCard: {\n            backgroundColor: colors.teamScoreCardBackground,\n            borderRadius: 4,\n            paddingVertical: 3,\n            paddingHorizontal: 6,\n            minWidth: 50,\n            alignItems: 'center',\n            borderWidth: 1,\n            borderColor: colors.teamScoreCardBorder,\n        },\n        playerTeamCard: {\n            backgroundColor: colors.playerTeamBackground,\n            borderColor: colors.playerTeamBorder,\n        },\n        teamName: {\n            fontSize: 12,\n            fontWeight: '500',\n            textAlign: 'center',\n        },\n        teamScore: {\n            fontSize: 14,\n            fontWeight: 'bold',\n            color: colors.teamScoreText,\n        },\n        playerTeamScore: {\n            color: colors.playerTeamScoreText,\n        },\n    });\n\n    const currentPlayerIndex = gameState.public.currentPlayerIndex;\n    const currentPlayerId = gameState.public.players[currentPlayerIndex].id;\n    const isCurrentPlayer = currentPlayerId === playerId;\n    const isResolvingTrick = gameState.public.gameSpecificData?.isResolvingTrick;\n    const isResolvingTurnEnd = gameState.public.isResolvingTurnEnd;\n    const isResolvingGameEnd = gameState.public.isResolvingGameEnd;\n    const hand = gameState.private?.hand || [];\n    const currentTrick = gameState.public.gameSpecificData?.currentTrick || [];\n    const scores = gameState.public.gameSpecificData?.scores || [];\n    const canToggle = gameState.public.gameSpecificData?.canToggle;\n    const trumpCard = gameState.public.gameSpecificData?.trumpCard;\n    const trumpHolder = gameState.public.gameSpecificData?.trumpHolder;\n    const teams = gameState.public.gameSpecificData?.teams || [];\n    const gamePoints = gameState.public.gameSpecificData?.gamePoints || [];\n    \n    // Find which team the player belongs to\n    const playerTeamIndex = teams.findIndex((team: string[]) => team.includes(playerId));\n\n    // Near the top of your component, after the props destructuring\n    const windowWidth = Dimensions.get('window').width;\n    const windowHeight = Dimensions.get('window').height;\n    const responsiveStyles = getResponsiveStyles(windowWidth, windowHeight);\n    \n    // Use the design props, can be adjusted dynamically if needed\n    const designProps = defaultDesignProps;\n\n    // Render cards in hand\n    const renderHand = () => (\n        <View style={styles.handWrapper}>\n            <ScrollView horizontal contentContainerStyle={styles.handContent}>\n                {hand.map((card: any, index: number) => (\n                    <CardRender\n                        key={index}\n                        card={card}\n                        onPress={() => isCurrentPlayer && onPlayCard(index)}\n                    />\n                ))}\n            </ScrollView>\n        </View>\n    );\n\n    // Render current trick\n    const renderCurrentTrick = () => {\n        const myPlayerIndex = gameState.public.players.findIndex(p => p.id === playerId);\n        const numPlayers = gameState.public.players.length;\n        \n        // Calculate card radius based on design props\n        const tableRadius = designProps.TABLE_SIZE / 2;\n        const CARD_RADIUS = tableRadius * designProps.CARD_RADIUS_FACTOR;\n\n        const getCardPosition = (playerIndex: number): ViewStyle => {\n            const relativePos = (playerIndex - myPlayerIndex + numPlayers) % numPlayers;\n            const angle = -Math.PI/2 - (relativePos * 2 * Math.PI / numPlayers);\n            // The minus is a hack\n            const x = - CARD_RADIUS * Math.cos(angle);\n            const y = - CARD_RADIUS * Math.sin(angle);\n\n            return {\n                position: 'absolute',\n                transform: [\n                    { translateX: x },\n                    { translateY: y },\n                    { rotate: `${angle + Math.PI/2}rad` }\n                ] as any[]\n            };\n        };\n\n        return (\n            <View style={styles.trickContainer}>\n                <View style={[styles.trickTable, {\n                    width: designProps.TABLE_SIZE, \n                    height: designProps.TABLE_SIZE\n                }]}>\n                    <View style={styles.tableBackground} />                    \n                    <View style={styles.cardPositioner}>\n                        {/* Render cards if they exist */}\n                        {currentTrick?.map(({playerId: cardPlayerId, card}: {playerId: string, card: Card}) => {\n                            const playerIndex = gameState.public.players.findIndex(p => p.id === cardPlayerId);\n                            return (\n                                <View \n                                    key={cardPlayerId} \n                                    style={[\n                                        styles.trickCardContainer, \n                                        getCardPosition(playerIndex),\n                                        {\n                                            width: designProps.CARD_SIZE.width, \n                                            height: designProps.CARD_SIZE.height\n                                        }\n                                    ]}\n                                >\n                                    <CardRender card={card} />\n                                </View>\n                            );\n                        })}\n                    </View>\n                </View>\n            </View>\n        );\n    };\n\n    // Render players\n    const renderPlayers = () => {\n        const myPlayerIndex = gameState.public.players.findIndex(p => p.id === playerId);\n        const numPlayers = gameState.public.players.length;\n        \n        // Calculate player radius based on design props\n        const tableRadius = designProps.TABLE_SIZE / 2;\n        const PLAYER_RADIUS = tableRadius * designProps.PLAYER_RADIUS_FACTOR * \n                             designProps.TABLE_MEMBERS_EXPANSION_FACTOR;\n\n        // Add this function to determine winning teams\n        const getWinningTeams = () => {\n            if (!isResolvingTurnEnd || !teams || !scores) return [];\n            \n            // Calculate team scores for this turn\n            const teamScores = teams.map((team: string[]) => {\n                return team.reduce((sum: number, playerId: string) => {\n                    const playerScore = scores.find((s: {playerId: string, score: number}) => s.playerId === playerId)?.score || 0;\n                    return sum + playerScore;\n                }, 0);\n            });\n\n            // Find highest score\n            const maxScore = Math.max(...teamScores);\n            \n            // Return indices of teams with the highest score\n            return teamScores\n                .map((score: number, index: number) => score === maxScore ? index : -1)\n                .filter((index: number) => index !== -1);\n        };\n\n        const winningTeams = getWinningTeams();\n\n        const getPlayerPosition = (playerIndex: number): ViewStyle => {\n            const relativePos = (playerIndex - myPlayerIndex + numPlayers) % numPlayers;\n            const angle = -Math.PI/2 - (relativePos * 2 * Math.PI / numPlayers);\n            const x = - PLAYER_RADIUS * Math.cos(angle);\n            const y = - PLAYER_RADIUS * Math.sin(angle);\n\n            return {\n                position: 'absolute',\n                transform: [\n                    { translateX: x },\n                    { translateY: y }\n                ] as any[]\n            };\n        };\n\n        return (\n            <View style={styles.playerTable}>\n                {gameState.public.players.map((player, index) => {\n                    const playerScore = gameState.public.gameSpecificData?.scores?.find(\n                        (score: {playerId: string, score: number}) => score.playerId === player.id\n                    )?.score || 0;\n\n                    // Find which team this player belongs to\n                    const playerTeamIndex = teams.findIndex((team: string[]) => \n                        team.includes(player.id)\n                    );\n\n                    // Check if player is on a winning team\n                    const isWinningPlayer = winningTeams.includes(playerTeamIndex);\n\n                    return (\n                        <View \n                            key={player.id}\n                            style={[\n                                styles.playerInfo, \n                                getPlayerPosition(index),\n                                { minWidth: designProps.PLAYER_INFO_MIN_WIDTH },\n                                isWinningPlayer && isResolvingTurnEnd && styles.winningPlayerInfo\n                            ]}\n                        >\n                            <Text style={[\n                                styles.playerNameFixed,\n                                player.id === playerId && styles.currentPlayerName\n                            ]}>\n                                {player.name}\n                            </Text>\n                            {(isResolvingTurnEnd || gameState.public.isResolvingGameEnd) && (\n                                <Text style={styles.playerStats}>\n                                    Points: {playerScore}\n                                </Text>\n                            )}\n                        </View>\n                    );\n                })}\n            </View>\n        );\n    };\n\n    // Render extra action button if available\n    const renderExtraAction = () => {\n        if (!isCurrentPlayer || !canToggle || !onExtraAction) return null;\n        return (\n            <View style={styles.extraActionContainer}>\n                <Button\n                    title={`Toggle ${gameState.public.gameSpecificData?.isHighWins ? 'High' : 'Low'} Wins`}\n                    onPress={() => onExtraAction('TOGGLE_WIN_CONDITION', {})}\n                />\n            </View>\n        );\n    };\n\n    // Add new function to render trump info\n    const renderTrumpInfo = () => {\n        if (!trumpCard || !trumpHolder) return null;\n        \n        const trumpHolderName = gameState.public.players.find(p => p.id === trumpHolder)?.name;\n        \n        return (\n            <View style={styles.trumpInfo}>\n                <Text style={styles.trumpTitle}>Trump Card:</Text>\n                <CardRender card={trumpCard} />\n                <Text style={styles.trumpHolder}>Held by: {trumpHolderName}</Text>\n            </View>\n        );\n    };\n\n    // Render team scores more discreetly\n    const renderTeamScores = () => {\n        if (!teams || teams.length === 0 || !gamePoints) return null;\n        \n        return (\n            <View style={styles.teamScoreContainer}>\n                {teams.map((team: string[], index: number) => {\n                    const teamScore = gamePoints[index] || 0;\n                    const isPlayerTeam = index === playerTeamIndex;\n                    \n                    return (\n                        <View \n                            key={`team-${index}`} \n                            style={[\n                                styles.teamScoreCard, \n                                isPlayerTeam && styles.playerTeamCard\n                            ]}\n                        >\n                            <Text style={styles.teamName}>\n                                Team {index + 1}\n                                {isPlayerTeam ? ' ★' : ''}\n                            </Text>\n                            <Text style={[\n                                styles.teamScore,\n                                isPlayerTeam && styles.playerTeamScore\n                            ]}>\n                                {teamScore}\n                            </Text>\n                        </View>\n                    );\n                })}\n            </View>\n        );\n    };\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.headerRow}>\n                <Text style={styles.status}>\n                    {(() => {\n                        if (isResolvingGameEnd) {\n                            return \"Game ending...\";\n                        } else if (isResolvingTurnEnd) {\n                            return \"Round ending...\";\n                        } else if (isResolvingTrick) {\n                            return \"Resolving trick...\";\n                        } else if (isCurrentPlayer) {\n                            return \"Your turn!\";\n                        } else {\n                            return `Waiting for ${gameState.public.players[currentPlayerIndex].name}`;\n                        }\n                    })()}\n                </Text>\n                {renderTeamScores()}\n            </View>\n            <View style={[\n                styles.gameArea, \n                responsiveStyles.gameArea,\n                { minHeight: designProps.MIN_GAME_AREA_HEIGHT }\n            ]}>\n                <View style={styles.playAreaContainer}>\n                    {renderTrumpInfo()}\n                    {renderCurrentTrick()}\n                    {renderPlayers()}\n                </View>\n            </View>\n            <View style={styles.handContainer}>\n                <Text style={styles.subtitle}>Your Hand:</Text>\n                {renderHand()}\n                {renderExtraAction()}\n            </View>\n        </View>\n    );\n};\n\n// getResponsiveStyles stays outside\nconst getResponsiveStyles = (width: number, height: number) => ({\n    gameArea: {\n        maxHeight: height * 0.6,\n    },\n    playerTable: width <= 768 ? {\n        maxWidth: 350,\n        maxHeight: 350,\n    } : {\n        maxWidth: 450,\n        maxHeight: 450,\n    }\n}); ","import React from 'react';\nimport { View, Text, StyleSheet, ScrollView } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface GameEndProps {\n    teams: Array<string[]>;\n    gamePoints: Array<number>;\n    playerId: string;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n    }>;\n    gamePointsReversed: boolean;\n}\n\nexport const GameEnd: React.FC<GameEndProps> = ({\n    teams,\n    gamePoints,\n    playerId,\n    players,\n    gamePointsReversed\n}) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n        },\n        title: {\n            fontSize: 24,\n            fontWeight: 'bold',\n            textAlign: 'center',\n            marginBottom: 10,\n        },\n        subtitle: {\n            fontSize: 18,\n            textAlign: 'center',\n            marginBottom: 20,\n        },\n        scoreList: {\n            flex: 1,\n        },\n        teamRow: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            padding: 15,\n            backgroundColor: colors.teamScoreCardBackground,\n            borderRadius: 8,\n            marginBottom: 10,\n            borderWidth: 1,\n            borderColor: colors.teamScoreCardBorder,\n        },\n        playerTeamRow: {\n            backgroundColor: colors.playerTeamBackground,\n            borderColor: colors.playerTeamBorder,\n        },\n        winnerRow: {\n            borderWidth: 2,\n            borderColor: 'gold',\n        },\n        rankAndTeam: {\n            flexDirection: 'row',\n            flex: 1,\n            alignItems: 'flex-start',\n        },\n        rank: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginRight: 10,\n            width: 25,\n        },\n        teamMembers: {\n            flex: 1,\n        },\n        teamTitle: {\n            fontSize: 16,\n            fontWeight: 'bold',\n            marginBottom: 5,\n        },\n        playerName: {\n            fontSize: 14,\n            marginLeft: 10,\n            color: colors.statusText,\n        },\n        currentPlayerName: {\n            fontWeight: 'bold',\n            color: colors.currentPlayerText,\n        },\n        playerTeamText: {\n            color: colors.playerTeamScoreText,\n        },\n        points: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            color: colors.teamScoreText,\n        },\n    });\n\n    // Find which team the player belongs to\n    const playerTeamIndex = teams.findIndex(team => team.includes(playerId));\n    \n    // Combine teams and points for sorting\n    const teamsWithPoints = teams.map((team, index) => ({\n        teamIndex: index,\n        teamMembers: team,\n        points: gamePoints[index] || 0,\n        isPlayerTeam: index === playerTeamIndex\n    }));\n    \n    // Sort teams by points (higher points first, unless reversed)\n    const sortedTeams = [...teamsWithPoints].sort((a, b) => {\n        if (gamePointsReversed) {\n            return a.points - b.points; // Lower points win if reversed\n        }\n        return b.points - a.points; // Higher points win normally\n    });\n\n    return (\n        <View style={styles.container}>\n            <Text style={[styles.title, { color: colors.titleText }]}>Game Finished</Text>\n            <Text style={[styles.subtitle, { color: colors.subtitleText }]}>Final Scores</Text>\n            \n            <ScrollView style={styles.scoreList}>\n                {sortedTeams.map((team, index) => {\n                    const isWinner = index === 0;\n                    return (\n                        <View \n                            key={`team-${team.teamIndex}`} \n                            style={[\n                                styles.teamRow, \n                                team.isPlayerTeam && styles.playerTeamRow,\n                                isWinner && styles.winnerRow\n                            ]}\n                        >\n                            <View style={styles.rankAndTeam}>\n                                <Text style={[\n                                    styles.rank, \n                                    team.isPlayerTeam && styles.playerTeamText\n                                ]}>\n                                    {index + 1}.\n                                </Text>\n                                <View style={styles.teamMembers}>\n                                    <Text style={[\n                                        styles.teamTitle, \n                                        team.isPlayerTeam && styles.playerTeamText\n                                    ]}>\n                                        Team {team.teamIndex + 1} {team.isPlayerTeam && '(Your Team)'}\n                                        {isWinner && ' 🏆'}\n                                    </Text>\n                                    {team.teamMembers.map(memberId => {\n                                        const player = players.find(p => p.id === memberId);\n                                        return (\n                                            <Text \n                                                key={memberId} \n                                                style={[\n                                                    styles.playerName,\n                                                    memberId === playerId && styles.currentPlayerName,\n                                                    team.isPlayerTeam && styles.playerTeamText\n                                                ]}\n                                            >\n                                                {player?.name || 'Unknown'} {memberId === playerId && '(You)'}\n                                                {player?.isAgent && ' (AI)'}\n                                            </Text>\n                                        );\n                                    })}\n                                </View>\n                            </View>\n                            <Text style={[\n                                styles.points, \n                                team.isPlayerTeam && styles.playerTeamText\n                            ]}>\n                                {team.points} pts\n                            </Text>\n                        </View>\n                    );\n                })}\n            </ScrollView>\n        </View>\n    );\n}; ","export type AvailableGames = 'SUECA'\n\nexport interface Card {\n    suit: 'hearts' | 'diamonds' | 'clubs' | 'spades';\n    value: number;  // 2-14 (14 being Ace)\n}\n\nexport interface PublicGameState {\n    id: string;\n    players: Array<{\n        id: string;\n        name: string;\n        isAgent: boolean;\n    }>;\n    currentPlayerIndex: number;\n    phase: GamePhase;\n    owner?: string;\n    gameSpecificData: any;\n    isResolvingTrick: boolean;\n    isResolvingTurnEnd: boolean;\n    isResolvingGameEnd: boolean;\n    gameCharacteristics: GameCharacteristics;\n}\n\nexport interface PrivatePlayerState {\n    hand: Card[];\n    gameSpecificData?: any;\n}\n\nexport interface GameCharacteristics {\n    minPlayers: number;\n    maxPlayers: number;\n    playerGroupSize: number;\n    extraActions: string[];\n    gamePointsReversed: boolean;\n}\n\nexport interface GameBroadcastState {\n    public: PublicGameState;\n    private?: PrivatePlayerState;\n}\n\n// Base interface for game-specific data\nexport interface BaseGameSpecificData {\n    currentTrick?: Array<{playerId: string; card: Card}>;\n    scores?: Array<{playerId: string; score: number}>;\n    gamePoints?: Array<number>;\n    teams?: Array<string[]>;\n}\n\n// Game-specific data interfaces\nexport interface HighLowGameData extends BaseGameSpecificData {\n    isHighWins: boolean;\n    canToggle: boolean;\n}\n\nexport enum GamePhase {\n    WAITING = 'WAITING',\n    PLAYING = 'PLAYING',\n    FINISHED = 'FINISHED'\n}\n\nexport interface GameAction {\n    type: 'PLAY_CARD' | 'JOIN_GAME' | 'START_GAME';\n    playerId?: string;\n    cardIndex?: number;\n    gameId?: string;\n}\n","import React from 'react';\nimport { View, Text, Modal, TouchableOpacity, StyleSheet } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\ninterface ConfirmDialogProps {\n    visible: boolean;\n    title: string;\n    message: string;\n    onConfirm: () => void;\n    onCancel: () => void;\n}\n\nexport const ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n    visible,\n    title,\n    message,\n    onConfirm,\n    onCancel\n}) => {\n    const { colors } = useTheme();\n\n    const styles = StyleSheet.create({\n        overlay: {\n            flex: 1,\n            backgroundColor: colors.dialogOverlay,\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        dialog: {\n            backgroundColor: colors.dialogBackground,\n            borderRadius: 10,\n            padding: 20,\n            width: '80%',\n            maxWidth: 400,\n        },\n        title: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 10,\n            textAlign: 'center',\n        },\n        message: {\n            fontSize: 16,\n            marginBottom: 20,\n            textAlign: 'center',\n        },\n        buttonContainer: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n        },\n        button: {\n            flex: 1,\n            padding: 10,\n            borderRadius: 5,\n            marginHorizontal: 5,\n        },\n        cancelButton: {\n            backgroundColor: colors.dialogCancelButton,\n        },\n        confirmButton: {\n            backgroundColor: colors.dialogConfirmButton,\n        },\n        buttonText: {\n            color: colors.dialogButtonText,\n            textAlign: 'center',\n            fontSize: 16,\n        },\n    });\n\n    return (\n        <Modal\n            transparent\n            visible={visible}\n            animationType=\"fade\"\n            onRequestClose={onCancel}\n        >\n            <View style={styles.overlay}>\n                <View style={styles.dialog}>\n                    <Text style={styles.title}>{title}</Text>\n                    <Text style={styles.message}>{message}</Text>\n                    <View style={styles.buttonContainer}>\n                        <TouchableOpacity \n                            style={[styles.button, styles.cancelButton]} \n                            onPress={onCancel}\n                        >\n                            <Text style={styles.buttonText}>Cancel</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity \n                            style={[styles.button, styles.confirmButton]} \n                            onPress={onConfirm}\n                        >\n                            <Text style={styles.buttonText}>Leave Game</Text>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n            </View>\n        </Modal>\n    );\n};\n","import React, { useState } from 'react';\nimport { TouchableOpacity, Text, StyleSheet } from 'react-native';\nimport { ConfirmDialog } from './ConfirmDialog';\nimport { SocketService } from '../services/socket.service';\nimport { useNavigation } from '@react-navigation/native';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface LeaveGameButtonProps {\n    gameId: string;\n    style?: any;\n}\n\nexport const LeaveGameButton: React.FC<LeaveGameButtonProps> = ({ gameId, style }) => {\n    const [showConfirm, setShowConfirm] = useState(false);\n    const navigation = useNavigation();\n    const socketService = SocketService.getInstance();\n    const { colors } = useTheme();\n\n    const styles = StyleSheet.create({\n        leaveButton: {\n            backgroundColor: colors.leaveButtonBackground,\n            padding: 10,\n            borderRadius: 5,\n            position: 'absolute',\n            top: 10,\n            right: 10,\n        },\n        leaveButtonText: {\n            color: colors.leaveButtonText,\n            fontSize: 16,\n            fontWeight: 'bold',\n        },\n    }); \n\n    const handleLeaveGame = async () => {\n        try {\n            const response = await socketService.leaveGame(gameId);\n            if (response.success) {\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: 'Home' as never }],\n                });\n            } else {\n                console.error('Failed to leave game');\n            }\n        } catch (error) {\n            console.error('Error leaving game:', error);\n        }\n        setShowConfirm(false);\n    };\n\n    return (\n        <>\n            <TouchableOpacity \n                style={[styles.leaveButton, style]} \n                onPress={() => setShowConfirm(true)}\n            >\n                <Text style={styles.leaveButtonText}>Leave Game</Text>\n            </TouchableOpacity>\n\n            <ConfirmDialog\n                visible={showConfirm}\n                title=\"Leave Game\"\n                message=\"Are you sure you want to leave this game? This action cannot be undone.\"\n                onConfirm={handleLeaveGame}\n                onCancel={() => setShowConfirm(false)}\n            />\n        </>\n    );\n};\n","import React from 'react';\nimport { TouchableOpacity, Text, StyleSheet, Share, Platform } from 'react-native';\nimport { useTheme } from '../theme/ThemeContext';\n\ninterface ShareGameLinkProps {\n    gameId: string;\n    style?: any;\n    isOwner: boolean;\n}\n\nexport const ShareGameLink: React.FC<ShareGameLinkProps> = ({ gameId, style, isOwner }) => {\n    const { colors } = useTheme();\n    \n    const styles = StyleSheet.create({\n        shareButton: {\n            backgroundColor: colors.shareButtonBackground,\n            padding: 10,\n            borderRadius: 5,\n            // No absolute positioning here, will be positioned by parent\n        },\n        shareButtonText: {\n            color: colors.shareButtonText,\n            fontSize: 16,\n            fontWeight: 'bold',\n        },\n    }); \n\n    // If not the owner, don't render the button\n    if (!isOwner) return null;\n\n    const handleShare = async () => {\n        // Create deep link for the game\n        const gameDeepLink = `cardgame://game/${gameId}`;\n        \n        // For web, create a URL - with special handling for GitHub Pages\n        let webUrl;\n        if (Platform.OS === 'web') {\n            // Get the current pathname\n            const pathname = window.location.pathname;\n            \n            // Extract the base path\n            const basePath = pathname.endsWith('/') \n                ? pathname \n                : pathname.substring(0, pathname.lastIndexOf('/') + 1);\n            \n            // Check if we're on GitHub Pages by looking for github.io in the hostname\n            const isGitHubPages = window.location.hostname.includes('github.io');\n            \n            if (isGitHubPages) {\n                // For GitHub Pages, use query parameters\n                webUrl = `${window.location.origin}${basePath}?gameId=${gameId}`;\n            } else {\n                // For all other web hosts, use the path-based approach\n                webUrl = `${window.location.origin}${basePath}game/${gameId}`;\n            }\n            \n            console.log('Generated share URL:', webUrl);\n        }\n        \n        const url = Platform.OS === 'web' ? webUrl : gameDeepLink;\n        \n        try {\n            if (Platform.OS === 'web') {\n                // On web, use clipboard API\n                navigator.clipboard.writeText(url || '')\n                    .then(() => {\n                        alert('Game link copied to clipboard! Share it with your friends.');\n                    })\n                    .catch(err => {\n                        console.error('Could not copy text: ', err);\n                        alert('Failed to copy the game link.');\n                    });\n            } else {\n                // On native, use Share API\n                const result = await Share.share({\n                    message: `Join my card game! ${url}`,\n                    url: url,\n                    title: 'Join my card game'\n                });\n                \n                if (result.action === Share.sharedAction) {\n                    if (result.activityType) {\n                        console.log(`Shared via ${result.activityType}`);\n                    } else {\n                        console.log('Shared successfully');\n                    }\n                } else if (result.action === Share.dismissedAction) {\n                    console.log('Share dismissed');\n                }\n            }\n        } catch (error) {\n            console.error('Error sharing:', error);\n            alert('Could not share the game link');\n        }\n    };\n\n    return (\n        <TouchableOpacity \n            style={[styles.shareButton, style]} \n            onPress={handleShare}\n        >\n            <Text style={styles.shareButtonText}>Share Game Link</Text>\n        </TouchableOpacity>\n    );\n};\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { View, Text, Button, ScrollView, StyleSheet, Alert, BackHandler, AppState } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { GameScreenState } from '../types/game-ui';\nimport { GameManagement } from '../components/GameManagement';\nimport { GamePlay } from '../components/GamePlay';\nimport { GameEnd } from '../components/GameEnd';\nimport { GameBroadcastState, GamePhase } from '../shared/types/game-state';\nimport { LeaveGameButton } from '../components/LeaveGameButton';\nimport { useTheme } from '../theme/ThemeContext';\nimport { useNavigation, useFocusEffect } from '@react-navigation/native';\nimport { BroadcastTypes } from '../shared/types/actions';\nimport { ConfirmDialog } from '../components/ConfirmDialog';\nimport { ShareGameLink } from '../components/ShareGameLink';\n\ninterface GameScreenProps {\n    route: any;\n}\n\nexport const GameScreen: React.FC<GameScreenProps> = ({ route }) => {\n    const { gameId, playerName } = route.params;\n    const [gameState, setGameState] = useState<GameBroadcastState | null>(null);\n    const [screenState, setScreenState] = useState<GameScreenState>({\n        mode: 'management',\n        isCurrentPlayer: false\n    });\n    const [showLeaveConfirm, setShowLeaveConfirm] = useState(false);\n    const [appState, setAppState] = useState(AppState.currentState);\n    const socketService = SocketService.getInstance();\n    const { colors } = useTheme();\n    const navigation = useNavigation();\n\n    console.log('GameScreen mounted with gameId:', gameId, 'and playerName:', playerName);\n\n    // Handle hardware back button (Android)\n    useFocusEffect(\n        useCallback(() => {\n            const onBackPress = () => {\n                // Show leave game confirmation\n                setShowLeaveConfirm(true);\n                return true; // Prevent default back behavior\n            };\n\n            BackHandler.addEventListener('hardwareBackPress', onBackPress);\n            \n            // Set up navigation options for the header back button\n            navigation.setOptions({\n                headerLeft: () => null, // Remove the default back button\n                // If you want a custom back button, you can add it here\n            });\n\n            return () => BackHandler.removeEventListener('hardwareBackPress', onBackPress);\n        }, [navigation])\n    );\n\n    // Handle app state changes (foreground/background)\n    useEffect(() => {\n        const subscription = AppState.addEventListener('change', nextAppState => {\n            console.log('App state changed from', appState, 'to', nextAppState);\n            \n            // App has come back to foreground\n            if (appState.match(/inactive|background/) && nextAppState === 'active') {\n                console.log('App has come back to the foreground!');\n                \n                // Check socket connection status\n                if (!socketService.isConnected()) {\n                    console.log('Socket disconnected while app was in background, attempting to reconnect...');\n                    \n                    // Try to reconnect\n                    socketService.reconnect().catch(error => {\n                        console.error('Failed to reconnect socket:', error);\n                        \n                        // Navigation to login screen if reconnection fails\n                        Alert.alert(\n                            \"Connection Lost\",\n                            \"Your connection to the game was lost. Please log in again.\",\n                            [\n                                { \n                                    text: \"OK\", \n                                    onPress: () => navigation.reset({\n                                        index: 0,\n                                        routes: [{ name: 'Login' as never }],\n                                    })\n                                }\n                            ]\n                        );\n                    });\n                }\n            }\n            \n            setAppState(nextAppState);\n        });\n        \n        return () => {\n            subscription.remove();\n        };\n    }, [appState, navigation]);\n\n    useEffect(() => {\n        console.log('useEffect called');\n        \n        const handleNotInGame = (data: { gameId: string, playerId: string }) => {\n            console.log('handleNotInGame called with data:', data);\n            console.log('currentGameId:', gameId);\n            console.log('currentUserId:', socketService.getCurrentUser()?.userId);\n            \n            if (data.gameId === gameId && data.playerId === socketService.getCurrentUser()?.userId) {\n                console.log('Navigating to Home screen due to NOT_IN_GAME event');\n                navigation.reset({\n                    index: 0,\n                    routes: [{ name: 'Home' as never }],\n                });\n            }\n        };\n        \n        socketService.on(BroadcastTypes.NOT_IN_GAME, handleNotInGame);\n        \n        socketService.onGameState((state: GameBroadcastState) => {\n            console.log('Game state received:', state);\n            setGameState(state);\n            \n            setScreenState(prev => ({\n                ...prev,\n                mode: state.public.phase === 'PLAYING' ? 'playing' : 'management',\n                isCurrentPlayer: state.public.players[state.public.currentPlayerIndex]?.name === playerName\n            }));\n        });\n\n        return () => {\n            socketService.off(BroadcastTypes.NOT_IN_GAME, handleNotInGame);\n        };\n    }, [gameId, navigation]);\n\n    const handleAddAgent = () => {\n        socketService.addAgent(gameId);\n    };\n\n    const handleStartGame = () => {\n        socketService.startGame(gameId);\n    };\n\n    const handlePlayCard = (cardIndex: number) => {\n        socketService.playCard(gameId, cardIndex);\n    };\n\n    const handleExtraAction = (actionType: string, actionData: any) => {\n        socketService.extraAction(gameId, actionType, actionData);\n    };\n\n    const handleKickPlayer = (playerId: string) => {\n        socketService.kickPlayer(gameId, playerId);\n    };\n\n    const handleReorderPlayer = (playerId: string, direction: 'up' | 'down') => {\n        socketService.reorderPlayer(gameId, playerId, direction);\n    };\n\n    if (!gameState) {\n        return <Text>Loading...</Text>;\n    }\n\n    const renderGameContent = () => {\n        if (gameState.public.phase === GamePhase.FINISHED) {\n            return (\n                <GameEnd \n                    teams={gameState.public.gameSpecificData?.teams || []}\n                    gamePoints={gameState.public.gameSpecificData?.gamePoints || []}\n                    playerId={socketService.getCurrentUser()?.userId || ''}\n                    players={gameState.public.players}\n                    gamePointsReversed={gameState.public.gameCharacteristics.gamePointsReversed}\n                />\n            );\n        } else if (screenState.mode === 'management') {\n            return (\n                <GameManagement\n                    gameId={gameId}\n                    onAddAgent={handleAddAgent}\n                    onStartGame={handleStartGame}\n                    playerCount={gameState.public.players.length}\n                    players={gameState.public.players.map(p => ({\n                        ...p,\n                        isOwner: p.id === gameState.public.owner\n                    }))}\n                    isOwner={gameState.public.owner === socketService.getCurrentUser()?.userId}\n                    onKickPlayer={handleKickPlayer}\n                    onReorderPlayer={handleReorderPlayer}\n                    gameCharacteristics={gameState.public.gameCharacteristics}\n                />\n            );\n        } else {\n            return (\n                <GamePlay\n                    gameState={gameState}\n                    playerName={playerName}\n                    playerId={socketService.getCurrentUser()?.userId || ''}\n                    onPlayCard={handlePlayCard}\n                    onExtraAction={handleExtraAction}\n                />\n            );\n        }\n    };\n\n    const styles = StyleSheet.create({\n        container: {\n            flex: 1,\n            padding: 20,\n            position: 'relative',\n        },\n        headerButtons: {\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            width: '100%',\n            padding: 10,\n            marginBottom: 10,\n        },\n        title: {\n            fontSize: 24,\n            fontWeight: 'bold',\n            marginTop: 10,\n            textAlign: 'center'\n        },\n        subtitle: {\n            fontSize: 18,\n            fontWeight: 'bold',\n            marginBottom: 10,\n        },\n        controls: {\n            flexDirection: 'row',\n            justifyContent: 'space-around',\n            marginBottom: 20,\n        },\n        status: {\n            fontSize: 16,\n            marginBottom: 20,\n        },\n        trickContainer: {\n            marginBottom: 20,\n        },\n        trick: {\n            flexGrow: 0,\n            height: 100,\n        },\n        handContainer: {\n            marginTop: 'auto',\n        },\n        hand: {\n            flexGrow: 0,\n            height: 100,\n        },\n        scoreboard: {\n            marginTop: 20,\n        },\n    });\n\n    return (\n        <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n            <View style={styles.headerButtons}>\n                <ShareGameLink \n                    gameId={gameId} \n                    isOwner={gameState?.public?.owner === socketService.getCurrentUser()?.userId} \n                />\n                <LeaveGameButton gameId={gameId} />\n            </View>\n            \n            <Text style={[styles.title, { color: colors.titleText }]}>{gameId}</Text>\n            \n            {renderGameContent()}\n            <ConfirmDialog\n                visible={showLeaveConfirm}\n                title=\"Leave Game\"\n                message=\"Are you sure you want to leave this game? This action cannot be undone.\"\n                onConfirm={async () => {\n                    try {\n                        const response = await socketService.leaveGame(gameId);\n                        if (response.success) {\n                            navigation.reset({\n                                index: 0,\n                                routes: [{ name: 'Home' as never }],\n                            });\n                        }\n                    } catch (error) {\n                        console.error('Error leaving game:', error);\n                    }\n                    setShowLeaveConfirm(false);\n                }}\n                onCancel={() => setShowLeaveConfirm(false)}\n            />\n        </View>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { View, Text, Button, StyleSheet, TextInput } from 'react-native';\nimport { Picker } from '@react-native-picker/picker';\nimport { SocketService } from '../services/socket.service';\nimport { AvailableGames } from '../shared/types/game-state';\nimport { useTheme } from '../theme/ThemeContext';\n\nconst GAME_TYPES: AvailableGames[] = ['SUECA'];\n\n// Function to generate a random 8 character hexadecimal string\nconst generateRandomGameName = (): string => {\n    return Math.random().toString(16).substring(2, 10);\n};\n\nexport const GameCreationScreen: React.FC<{ route: any, navigation: any }> =\n    ({route, navigation}) => {\n        const { colors } = useTheme();\n        console.log('GameCreationScreen rendered');\n        console.log('Route params:', route.params);\n        const { playerName } = route.params;\n        const socketService = SocketService.getInstance();\n        const [gameType, setGameType] = useState<AvailableGames>(GAME_TYPES[0]);\n        const [gameName, setGameName] = useState<string>('');\n    \n        const handleCreateGame = async () => {\n            console.log('Creating game');\n            await socketService.connect(playerName);\n            console.log('Connected to socket');\n            // Use the provided game name or generate a random one if empty\n            const finalGameName = gameName.trim() || generateRandomGameName();\n            const response = await socketService.createGame(playerName, gameType, finalGameName);\n            if (response.success && response.gameId) {\n                console.log('Game created successfully');\n                navigation.navigate('Game', { gameId: response.gameId, playerName });\n            }\n        };\n\n        const styles = StyleSheet.create({\n            container: {\n                flex: 1,\n                padding: 20,\n            },\n            title: {\n                fontSize: 24,\n                marginBottom: 20,\n            },\n            formGroup: {\n                marginBottom: 20,\n            },\n            label: {\n                marginBottom: 10,\n            },\n            picker: {\n                padding: 10,\n            },\n            input: {\n                borderWidth: 1,\n                borderColor: colors.inputBorder,\n                borderRadius: 5,\n                padding: 10,\n                color: colors.inputText,\n                backgroundColor: colors.inputBackground,\n            }\n        });\n\n        return (\n            <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n                <Text style={[styles.title, { color: colors.titleText }]}>Game Creation</Text>\n                <View style={styles.formGroup}>\n                    <Text style={[styles.label, { color: colors.subtitleText }]}>\n                        Select Game Type:\n                    </Text>\n                    <Picker\n                        selectedValue={gameType}\n                        onValueChange={(itemValue: AvailableGames) => setGameType(itemValue)}\n                        style={[styles.picker, { backgroundColor: colors.pickerBackground }]}\n                    >\n                        {GAME_TYPES.map((game) => (\n                            <Picker.Item \n                                key={game} \n                                label={game.replace('_', ' ')} \n                                value={game}\n                            />\n                        ))}\n                    </Picker>\n                </View>\n                <View style={styles.formGroup}>\n                    <Text style={[styles.label, { color: colors.subtitleText }]}>\n                        Game Name (optional):\n                    </Text>\n                    <TextInput\n                        style={styles.input}\n                        value={gameName}\n                        onChangeText={setGameName}\n                        placeholder=\"Enter game name or leave blank for random\"\n                        placeholderTextColor={colors.placeholderText}\n                    />\n                </View>\n                <Button \n                    title=\"Create Game\" \n                    onPress={handleCreateGame} \n                    color={colors.primaryButton}\n                />\n            </View>\n        );\n    }","import React, { useState } from 'react';\nimport { View, TextInput, Button, StyleSheet, Alert } from 'react-native';\nimport { SocketService } from '../services/socket.service';\nimport { useTheme } from '../theme/ThemeContext';\n\n\nexport const JoinGameScreen: React.FC<{ route: any, navigation: any }> =\n    ({route, navigation}) => {\n        const { colors } = useTheme();\n        const { playerName } = route.params;\n        const socketService = SocketService.getInstance();\n        const [gameId, setGameId] = useState('');\n\n        const handleJoinGame = async () => {\n            await socketService.connect(playerName);\n            const result = await socketService.joinGame(gameId, playerName);\n            if (result.success) {\n                navigation.navigate('Game', { gameId, playerName });\n            } else {\n                Alert.alert('Error', result.error);\n            }\n        };\n\n        const styles = StyleSheet.create({\n            container: {\n                flex: 1,\n                padding: 20,\n                justifyContent: 'center',\n            },\n            input: {\n                borderWidth: 1,\n                borderColor: colors.inputBorder,\n                padding: 10,\n                marginBottom: 20,\n                borderRadius: 5,\n            },\n            buttonContainer: {\n                gap: 10,\n            },\n        });\n\n        return (\n            <View style={[styles.container, { backgroundColor: colors.containerBackground }]}>\n                <TextInput\n                    style={[styles.input, { backgroundColor: colors.inputBackground }]}\n                    placeholder=\"Enter game name\"\n                    onChangeText={(text) => setGameId(text)}\n                    placeholderTextColor={colors.playerStatsText}\n                />\n                <Button \n                    title=\"Join Game\" \n                    onPress={handleJoinGame} \n                    color={colors.primaryButton}\n                />\n            </View>\n        );\n    }\n    ","import React from 'react';\nimport { TouchableOpacity, StyleSheet } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons'; // Make sure you have this package installed\nimport { useTheme } from '../theme/ThemeContext';\n\nexport const ThemeToggleButton: React.FC = () => {\n  const { toggleTheme, themeType } = useTheme();\n  \n  return (\n    <TouchableOpacity \n      style={styles.button} \n      onPress={toggleTheme}\n      accessibilityLabel=\"Toggle theme\"\n      accessibilityRole=\"button\"\n    >\n      <Ionicons \n        name={themeType === 'light' ? 'moon-outline' : 'sunny-outline'} \n        size={22} \n        color={themeType === 'light' ? '#333' : '#fff'} \n      />\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    marginRight: 8,\n    padding: 8,\n  }\n}); ","import React, { useEffect, useRef, useState } from 'react';\nimport { Platform, View, StatusBar, StyleSheet, Linking, Alert } from 'react-native';\nimport { NavigationContainer, DefaultTheme, NavigationContainerRef } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { LoginScreen } from './src/screens/LoginScreen';\nimport { HomeScreen } from './src/screens/HomeScreen';\nimport { GameScreen } from './src/screens/GameScreen';\nimport { GameCreationScreen } from './src/screens/GameCreationScreen';\nimport { JoinGameScreen } from './src/screens/JoinGameScreen';\nimport { ThemeProvider, useTheme } from './src/theme/ThemeContext';\nimport { ThemeToggleButton } from './src/components/ThemeToggleButton';\nimport { SocketService } from './src/services/socket.service';\n\n// Types for navigation\ntype RootStackParamList = {\n  Login: { gameId?: string }; // Add gameId parameter to Login\n  Home: undefined;\n  Game: { gameId: string; playerName: string };\n  GameCreation: { playerName: string };\n  JoinGame: { playerName: string };\n};\n\nconst WebStack = createStackNavigator<RootStackParamList>();\nconst NativeStack = createNativeStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <AppContent />\n    </ThemeProvider>\n  );\n}\n\nconst AppContent = () => {\n  const Stack = Platform.OS === 'web' ? WebStack : NativeStack;\n  const { colors, themeType } = useTheme();\n  const navigationRef = useRef<NavigationContainerRef<RootStackParamList>>(null);\n  const [initialRoute, setInitialRoute] = useState<{name: keyof RootStackParamList; params: any}>({ \n    name: 'Login', \n    params: {} \n  });\n  const [isReady, setIsReady] = useState(false);\n\n  // Custom navigation theme based on our colors\n  const navigationTheme = {\n    ...DefaultTheme,\n    colors: {\n      ...DefaultTheme.colors,\n      background: colors.appBackground,\n      card: colors.containerBackground,\n      text: colors.titleText,\n      border: colors.inputBorder,\n      primary: colors.primaryButton,\n    },\n  };\n\n  // Handle deep links\n  const handleDeepLink = async (url: string) => {\n    if (!url) return;\n    \n    console.log('Received deep link:', url);\n    \n    // Parse the URL to get the game ID - handle both native deep links and web URLs\n    let gameId;\n    \n    // Native deep link pattern\n    const nativeMatch = url.match(/cardgame:\\/\\/game\\/([^\\/]+)/);\n    if (nativeMatch) {\n      gameId = nativeMatch[1];\n    } \n    \n    // Web URL pattern - updated to match even with subdirectories\n    const webMatch = url.match(/\\/game\\/([^\\/]+)(?:\\/|$)/);\n    if (webMatch) {\n      gameId = webMatch[1];\n    }\n    \n    if (gameId) {\n      console.log('Deep link contains game ID:', gameId);\n      \n      const socketService = SocketService.getInstance();\n      if (socketService.isLoggedIn()) {\n        // If already logged in, navigate to the game directly\n        const navigation = navigationRef.current;\n        if (navigation) {\n          // First connect to ensure socket is ready\n          try {\n            await socketService.connect(socketService.getCurrentUser()?.username || '');\n            const joinResponse = await socketService.joinGame(gameId, socketService.getCurrentUser()?.username || '');\n            \n            if (joinResponse.success) {\n              navigation.reset({\n                index: 0,\n                routes: [\n                  { name: 'Game', params: { \n                    gameId, \n                    playerName: socketService.getCurrentUser()?.username \n                  }}\n                ],\n              });\n            } else {\n              // Show an alert with the specific error\n              Alert.alert(\n                'Game Join Failed',\n                joinResponse.error === 'Game not found or cannot join'\n                  ? 'The game you tried to join does not exist or is no longer available.'\n                  : 'Could not join the game.',\n                [{ \n                  text: 'OK', \n                  onPress: () => navigation.reset({ index: 0, routes: [{ name: 'Home' }] }) \n                }]\n              );\n            }\n          } catch (error) {\n            console.error('Error joining game:', error);\n            Alert.alert(\n              'Connection Error',\n              'Failed to connect to the game server. Please try again later.',\n              [{ \n                text: 'OK', \n                onPress: () => navigation.reset({ index: 0, routes: [{ name: 'Home' }] }) \n              }]\n            );\n          }\n        }\n      } else {\n        // If not logged in, set initial route to Login with gameId\n        setInitialRoute({ name: 'Login' as keyof RootStackParamList, params: { gameId } });\n      }\n    }\n  };\n\n  // Set up link listeners\n  useEffect(() => {\n    // For web, check multiple sources for game ID\n    if (Platform.OS === 'web') {\n      let gameId = null;\n      \n      // First check URL query parameters\n      const urlParams = new URLSearchParams(window.location.search);\n      gameId = urlParams.get('gameId');\n      \n      // If not found in URL params, check sessionStorage (for GitHub Pages)\n      if (!gameId && typeof sessionStorage !== 'undefined') {\n        gameId = sessionStorage.getItem('gameId');\n        // Clear from sessionStorage after reading\n        if (gameId) {\n          console.log('Found game ID in sessionStorage:', gameId);\n          sessionStorage.removeItem('gameId');\n        }\n      }\n      \n      // If still not found, check path\n      if (!gameId) {\n        const path = window.location.pathname;\n        const webMatch = path.match(/\\/game\\/([^\\/]+)(?:\\/|$)/);\n        if (webMatch) {\n          gameId = webMatch[1];\n        }\n      }\n      \n      // Process the gameId if found\n      if (gameId) {\n        console.log('Found game ID:', gameId);\n        handleDeepLink(gameId);\n        \n        // Clean URL if needed\n        if (window.history && window.history.replaceState) {\n          const cleanUrl = window.location.pathname;\n          window.history.replaceState({}, document.title, cleanUrl);\n        }\n      }\n    }\n\n    // Regular deep link handling for all platforms\n    const subscription = Linking.addEventListener('url', ({ url }) => {\n      handleDeepLink(url);\n    });\n\n    // Handle the case where the app is opened from a link\n    Linking.getInitialURL().then(url => {\n      if (url) handleDeepLink(url);\n      setIsReady(true);\n    }).catch(err => {\n      console.error('Error getting initial URL:', err);\n      setIsReady(true);\n    });\n\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n\n  useEffect(() => {\n    const socketService = SocketService.getInstance();\n    const socket = socketService.getSocket();\n   \n    // Set up global socket state listener\n    const onDisconnect = (reason: any) => {\n        console.log('Socket disconnected:', reason);\n        if (reason === \"io server disconnect\" || reason === \"transport close\") {\n            // Server forced disconnect or transport closed - try to reconnect\n            setTimeout(() => {\n                socketService.reconnect().catch(error => {\n                    console.error('Failed to reconnect socket after disconnect:', error);\n                });\n            }, 1000);\n        }\n    };\n    \n    socket.on('disconnect', onDisconnect);\n    \n    return () => {\n        socket.off('disconnect', onDisconnect);\n    };\n  }, []);\n\n  if (!isReady) {\n    return null; // or a loading indicator\n  }\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.appBackground }]}>\n      <StatusBar \n        backgroundColor={colors.appBackground}\n        barStyle={themeType === 'dark' ? 'light-content' : 'dark-content'} \n      />\n      <NavigationContainer \n        theme={navigationTheme}\n        ref={navigationRef}\n        initialState={{\n          routes: [initialRoute]\n        }}\n      >\n        <Stack.Navigator \n          initialRouteName={initialRoute.name} \n          screenOptions={{\n            headerShown: true,\n            headerStyle: {\n              backgroundColor: colors.containerBackground,\n              borderBottomColor: colors.inputBorder,\n              borderBottomWidth: 1,\n            },\n            headerTitleStyle: {\n              color: colors.titleText,\n            },\n            headerTintColor: colors.titleText,\n            headerRight: () => <ThemeToggleButton />\n          }}\n        >\n          <Stack.Screen \n            name=\"Login\" \n            component={LoginScreen}\n            options={{ \n              title: 'Sign In',\n              headerLeft: () => null \n            }}\n          />\n          <Stack.Screen \n            name=\"Home\" \n            component={HomeScreen} \n            options={{\n              title: 'Home',\n              headerLeft: () => null,\n            }}\n          />\n          <Stack.Screen \n            name=\"Game\" \n            component={GameScreen}\n          />\n          <Stack.Screen \n            name=\"GameCreation\" \n            component={GameCreationScreen}\n            options={{ title: 'Create Game' }}\n          />\n          <Stack.Screen \n            name=\"JoinGame\" \n            component={JoinGameScreen}\n            options={{ title: 'Join Game' }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","// extracted by mini-css-extract-plugin\nexport default {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"./\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [708], () => (__webpack_require__(8914)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["AuthActions","MainActions","GameAdminActions","GamePlayActions","BroadcastTypes","socketUrl","socketPath","SocketService","currentUser","reconnectAttempts","MAX_RECONNECT_ATTEMPTS","heartbeatInterval","HEARTBEAT_INTERVAL","eventHandlers","Map","constructor","this","socket","io","config","transports","path","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","timeout","console","log","setupSocketListeners","on","id","reason","connect","error","disconnect","attemptNumber","STATE","state","GAME_DELETED","data","gameId","NOT_IN_GAME","playerId","triggerEvent","socketId","userId","timestamp","Date","toISOString","clearHeartbeat","clearCurrentUser","getInstance","instance","playerName","Promise","resolve","reject","connected","createGame","gameType","gameName","setTimeout","Error","emit","CREATE_GAME","response","clearTimeout","joinGame","JOIN_GAME","addAgent","ADD_AGENT","startGame","START_GAME","playCard","cardIndex","PLAY_CARD","onGameState","callback","onAny","eventName","args","setupHeartbeat","clearInterval","setInterval","heartbeatTimeout","warn","reconnect","catch","HEARTBEAT","success","logout","hasUser","login","username","LOGIN","setCurrentUser","extraAction","actionType","actionData","EXTRA_ACTION","getCurrentUser","LOGOUT","leaveGame","LEAVE_GAME","kickPlayer","KICK_PLAYER","event","has","set","get","push","off","handlers","index","indexOf","splice","forEach","handler","isConnected","onConnect","onError","then","getSocket","reorderPlayer","direction","REORDER_PLAYER","isLoggedIn","lightColors","cardBackground","cardBorder","cardTextBlack","cardTextRed","dialogOverlay","dialogBackground","dialogCancelButton","dialogConfirmButton","dialogButtonText","leaveButtonBackground","leaveButtonText","playerInfoBackground","playerInfoBorder","currentPlayerText","playerStatsText","trumpInfoBackground","trumpInfoBorder","teamScoreCardBackground","teamScoreCardBorder","inputBorder","inputBackground","inputText","placeholderText","tableFelt","tableEdge","statusText","subtitleText","playerTeamBackground","playerTeamBorder","teamScoreText","playerTeamScoreText","accent","welcomeText","logoutButton","primaryButton","primaryButtonText","appBackground","containerBackground","pickerBackground","titleText","winningPlayerBackground","winningPlayerBorder","shareButtonBackground","shareButtonText","darkColors","ThemeContext","createContext","themeType","colors","setThemeType","toggleTheme","ThemeProvider","children","useState","_jsx","Provider","value","prevTheme","useTheme","context","useContext","undefined","LoginScreen","navigation","route","setUsername","socketService","params","styles","StyleSheet","create","container","flex","padding","justifyContent","backgroundColor","title","fontSize","textAlign","marginBottom","color","input","borderWidth","borderColor","borderRadius","buttonContainer","marginTop","button","alignItems","buttonText","fontWeight","subtitle","useEffect","_jsxs","View","style","Text","TextInput","onChangeText","placeholder","placeholderTextColor","autoCapitalize","autoCorrect","TouchableOpacity","onPress","async","trim","joinResponse","replace","errorMessage","Alert","alert","text","HomeScreen","welcome","gap","Button","handleCreateGame","navigate","handleJoinGame","GameManagement","onAddAgent","onStartGame","playerCount","players","isOwner","onKickPlayer","onReorderPlayer","gameCharacteristics","controls","flexDirection","playerListContainer","height","playerList","playerRow","paddingVertical","paddingHorizontal","borderBottomWidth","borderBottomColor","playerActions","actionButton","kickButton","moveButton","width","upButton","downButton","buttonSpacer","hasCorrectNumberOfPlayers","minPlayers","maxPlayers","Infinity","playerGroupSize","ScrollView","map","player","name","isAgent","_Fragment","require","CardRender","card","disabled","margin","opacity","suit","redText","isRed","Object","assign","className","cursor","hearts","diamonds","clubs","spades","defaultDesignProps","TABLE_SIZE","TABLE_MEMBERS_EXPANSION_FACTOR","CARD_RADIUS_FACTOR","PLAYER_RADIUS_FACTOR","MIN_GAME_AREA_HEIGHT","CARD_SIZE","PLAYER_INFO_MIN_WIDTH","GamePlay","gameState","onPlayCard","onExtraAction","position","alignSelf","display","headerRow","status","trickContainer","zIndex","trickTable","tableBackground","cardPositioner","trickCardContainer","handContainer","flexShrink","handWrapper","handContent","hand","flexGrow","extraActionContainer","gameArea","marginVertical","playAreaContainer","playerTable","playerInfo","minWidth","winningPlayerInfo","playerNameFixed","currentPlayerName","playerStats","trumpInfo","top","right","trumpTitle","trumpHolder","teamScoreContainer","teamScoreCard","playerTeamCard","teamName","teamScore","playerTeamScore","currentPlayerIndex","public","isCurrentPlayer","isResolvingTrick","gameSpecificData","isResolvingTurnEnd","isResolvingGameEnd","private","currentTrick","scores","canToggle","trumpCard","teams","gamePoints","playerTeamIndex","findIndex","team","includes","windowWidth","Dimensions","windowHeight","responsiveStyles","getResponsiveStyles","designProps","length","isPlayerTeam","minHeight","renderTrumpInfo","trumpHolderName","find","p","renderCurrentTrick","myPlayerIndex","numPlayers","CARD_RADIUS","getCardPosition","playerIndex","relativePos","angle","Math","PI","transform","translateX","cos","translateY","sin","rotate","cardPlayerId","renderPlayers","PLAYER_RADIUS","winningTeams","getWinningTeams","teamScores","reduce","sum","s","score","maxScore","max","filter","getPlayerPosition","playerScore","isWinningPlayer","horizontal","contentContainerStyle","isHighWins","maxHeight","maxWidth","GameEnd","gamePointsReversed","scoreList","teamRow","playerTeamRow","winnerRow","rankAndTeam","rank","marginRight","teamMembers","teamTitle","marginLeft","playerTeamText","points","sortedTeams","teamIndex","sort","a","b","isWinner","memberId","GamePhase","ConfirmDialog","visible","message","onConfirm","onCancel","overlay","dialog","marginHorizontal","cancelButton","confirmButton","Modal","transparent","animationType","onRequestClose","LeaveGameButton","showConfirm","setShowConfirm","useNavigation","leaveButton","reset","routes","ShareGameLink","shareButton","webUrl","pathname","window","location","basePath","endsWith","substring","lastIndexOf","hostname","origin","url","navigator","clipboard","writeText","err","GameScreen","setGameState","screenState","setScreenState","mode","showLeaveConfirm","setShowLeaveConfirm","appState","setAppState","AppState","currentState","useFocusEffect","useCallback","onBackPress","BackHandler","addEventListener","setOptions","headerLeft","removeEventListener","subscription","nextAppState","match","remove","handleNotInGame","prev","phase","handleAddAgent","handleStartGame","handlePlayCard","handleExtraAction","handleKickPlayer","handleReorderPlayer","headerButtons","trick","scoreboard","owner","FINISHED","GAME_TYPES","GameCreationScreen","setGameType","setGameName","formGroup","label","picker","Picker","selectedValue","onValueChange","itemValue","game","Item","finalGameName","random","toString","JoinGameScreen","setGameId","result","ThemeToggleButton","accessibilityLabel","accessibilityRole","Ionicons","size","WebStack","createStackNavigator","createNativeStackNavigator","AppContent","Stack","navigationRef","useRef","initialRoute","setInitialRoute","isReady","setIsReady","navigationTheme","DefaultTheme","background","border","primary","handleDeepLink","nativeMatch","webMatch","current","URLSearchParams","search","sessionStorage","getItem","removeItem","history","replaceState","cleanUrl","document","Linking","getInitialURL","onDisconnect","StatusBar","barStyle","NavigationContainer","theme","ref","initialState","Navigator","initialRouteName","screenOptions","headerShown","headerStyle","headerTitleStyle","headerTintColor","headerRight","Screen","component","options","registerRootComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","i","fulfilled","j","keys","every","key","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","g","globalThis","Function","e","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}